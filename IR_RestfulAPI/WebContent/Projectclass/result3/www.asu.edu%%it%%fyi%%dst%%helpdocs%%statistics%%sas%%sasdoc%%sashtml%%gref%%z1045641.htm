<HTML>
<!-- This page produced Fri Jul  9 14:14:38 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>The DATA Step Graphics Interface : DSGI Graphics Summary </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z1060954.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1045633.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z1060670.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SAS/GRAPH Software: Reference                                                                                             </FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z1045641">DSGI Graphics Summary</A></FONT></H1>


<P>The following sections summarize the functions and routines
you can use to create graphics output with DSGI.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">DSGI Functions</FONT></B></TD></TR></TABLE>

<P><A name="z1082090">&#13; DSGI provides
functions that </A>
<P>
<UL>

<LI>initialize and terminate DSGI<P>

<LI>generate graphics
elements<P>

<LI>control the appearance of graphics elements by
setting attributes<P>

<LI>control the overall appearance of the graphics
output<P>

<LI>perform management operations for the catalog<P>

<LI>control messages issued by
DSGI.<P>
</UL>

<P><A name="z1082097">&#13;  
</A><A href="#z1057781">DATA Step Graphics Interface Functions</A>
summarizes the types of operations available and the functions used to invoke
them. Refer to <A href="z1060538.htm">DATA Step Graphics Interface Dictionary</A>
for details about each function.  
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">
<CAPTION align="top"><B><I><A name="z1057781">DATA Step Graphics Interface Functions</A></I></B></CAPTION>


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="BOTTOM" ><B><A name="z1057781">&#13;DSGI Operations </A></B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B> Associated Function </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B> Function Description </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Bundling Attributes (valid values for </FONT></CODE></B><B>xxx</B><B><CODE><FONT size="+1"> are FIL, LIN, MAR, and TEX)</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('ASF', . . .)  </TD>
  
<TD  align="LEFT" valign="TOP">sets the aspect source flag of an attribute</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('<B>xxx</B>INDEX', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">selects the bundle of attributes to use</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('<B>xxx</B>REP', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">assigns attributes to a bundle</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Setting  Attributes That Affect Graphics
Elements</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">color index </TD>
  
<TD  align="LEFT" valign="TOP">GSET('COLREF'), . . .)  </TD>
  
<TD  align="LEFT" valign="TOP">assigns a color name to color index</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">fill area  </TD>
  
<TD  align="LEFT" valign="TOP">GSET('FILCOLOR', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the color of the fill  area</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('FILSTYLE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the pattern when FILTYPE is HATCH or PATTERN</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('FILTYPE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">specifies the type of interior for the fill area</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('HTML', . . .   )  </TD>
  
<TD  align="LEFT" valign="TOP">specifies the HTML string to invoke when an affected DSGI graphic element
in a web page is clicked</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">line  </TD>
  
<TD  align="LEFT" valign="TOP">GSET('LINCOLOR', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the color of the line</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('LINTYPE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">sets the type of line</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('LINWIDTH', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">specifies the width of the line</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">marker  </TD>
  
<TD  align="LEFT" valign="TOP">GSET('MARCOLOR', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the color of the marker</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('MARSIZE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">determines the size of the marker</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('MARTYPE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">sets the type of marker drawn</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">text  </TD>
  
<TD  align="LEFT" valign="TOP">GSET('TEXALIGN', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">specifies horizontal and vertical alignment of text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('TEXCOLOR', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the color of the text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('TEXFONT', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">sets the font for the text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('TEXHEIGHT', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the height of the text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('TEXPATH', . . . ) </TD>
  
<TD  align="LEFT" valign="TOP">determines reading direction of text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('TEXUP', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the angle of text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Setting Attributes That Affect Entire
Graph</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('ASPECT', . . .)  </TD>
  
<TD  align="LEFT" valign="TOP">sets the aspect ratio</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('CATALOG', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the catalog to use</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('CBACK', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">selects the background color</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('DEVICE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">specifies the output device</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('HPOS', . . . )   </TD>
  
<TD  align="LEFT" valign="TOP">sets the number of columns in the graphics output area</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('HSIZE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">sets the width of the graphics output area in units
of inches</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('VPOS', . . . )   </TD>
  
<TD  align="LEFT" valign="TOP">sets the number of rows in the graphics output area</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('VSIZE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">sets the height of the graphics output area in units
of inches</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1"> Managing Catalogs</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GRAPH('COPY', . . .)   </TD>
  
<TD  align="LEFT" valign="TOP">copies a graph to another entry within the same catalog</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GRAPH('DELETE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">deletes a graph</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GRAPH('INSERT', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">inserts a previously created graph into the currently
open segment</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GRAPH('RENAME', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">renames a graph  </TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Drawing Graphics Elements </FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">arc  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('ARC', . . .)   </TD>
  
<TD  align="LEFT" valign="TOP">draws a circular arc</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">bar  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('BAR', . . . )   </TD>
  
<TD  align="LEFT" valign="TOP">draws a rectangle that can be filled</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">ellipse  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('ELLIPSE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">draws an oblong circle that can be filled</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">elliptical arc   </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('ELLARC', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">draws an elliptical arc</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">fill area   </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('FILL', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">draws a polygon that can be filled</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">line   </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('LINE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">draws a single line, a series of connected lines, or
a dot</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">marker  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('MARK', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">draws one or more symbols</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">pie  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('PIE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">draws a pie slice that can be filled</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">text  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('TEXT', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">draws a character string</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Initializing DSGI</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GINIT( )</TD>
  
<TD  align="LEFT" valign="TOP">initializes DSGI</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GRAPH('CLEAR', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">opens a segment to receive graphics primitives</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Handling Messages</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('MESSAGE', . . .)  </TD>
  
<TD  align="LEFT" valign="TOP">prints a message in the SAS log</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GPRINT(<B>code</B>)  </TD>
  
<TD  align="LEFT" valign="TOP">prints the description of a DSGI error code</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('MESSAGE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">turns message logging on or off</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Ending DSGI</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GRAPH('UPDATE', . . .) </TD>
  
<TD  align="LEFT" valign="TOP">closes the currently open segment and, optionally, displays
it</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GTERM()</TD>
  
<TD  align="LEFT" valign="TOP">ends DSGI</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Activating Transformations</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GET('TRANSNO', . . .)  </TD>
  
<TD  align="LEFT" valign="TOP">selects the transformation number of the viewport or
window to use</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP">  Defining Viewports</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('CLIP', . . .)  </TD>
  
<TD  align="LEFT" valign="TOP">turns clipping on or off</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('VIEWPORT', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">sets the coordinates of the viewport and assigns it
a transformation number</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Defining Windows</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GSET('WINDOW', . . .)</TD>
  
<TD  align="LEFT" valign="TOP">sets the coordinates of the window and assigns it a
transformation number</TD>
</TR>

</TABLE>

<BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">DSGI Routines</FONT></B></TD></TR></TABLE>

<P><A name="z1082228">&#13;
 DSGI routines return the values set
by some of the DSGI functions. </A><A href="#z1057800">DATA Step Graphics Interface Routines</A>
summarizes the types of values that the GASK routines can check. Refer to <A href="z1060538.htm">DATA Step Graphics Interface Dictionary</A> for details
about each routine.  
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">
<CAPTION align="top"><B><I><A name="z1057800">DATA Step Graphics Interface Routines</A></I></B></CAPTION>


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="BOTTOM" ><B><A name="z1057800">&#13;DSGI Operations</A></B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Associated Routine</B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Routine Description</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Checking Attribute Bundles (valid values
for </FONT></CODE></B><B>xxx</B><B><CODE><FONT size="+1"> are FIL, LIN, MAR, and
TEX)</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('ASK', . . .)</TD>
  
<TD  align="LEFT" valign="TOP">returns the aspect source flag of the attribute</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('<B>xxx</B>INDEX', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the index of the active bundle</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('<B>xxx</B>REP', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the attributes assigned to the bundle</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Checking Attribute Settings</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">color index</TD>
  
<TD  align="LEFT" valign="TOP">GASK('COLINDEX', . . .)</TD>
  
<TD  align="LEFT" valign="TOP">returns the color indices that currently have colors
assigned to them</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('COLREP', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the color name assigned to the color index</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">fill area</TD>
  
<TD  align="LEFT" valign="TOP">GASK('FILCOLOR', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the color of the fill area</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('FILSTYLE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the index of the pattern when the FILTYPE is
HATCH or PATTERN</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('FILTYPE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the index of the type of interior</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('HTML', . . .   )  </TD>
  
<TD  align="LEFT" valign="TOP">finds the HTML string that is in effect when one of the following graphic
elements is drawn: bar, ellipse, fill, mark, pie, and text.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">line</TD>
  
<TD  align="LEFT" valign="TOP">GASK('LINCOLOR', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the color index of the color of the line</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('LINTYPE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the index of the type of line</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('LINWIDTH', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the width of the line</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">marker</TD>
  
<TD  align="LEFT" valign="TOP">GASK('MARCOLOR', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the color index of the color of markers</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('MARSIZE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the size of markers</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('MARTYPE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the index of the type of marker drawn</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">text</TD>
  
<TD  align="LEFT" valign="TOP">GASK('TEXALIGN', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the horizontal and vertical alignment of text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('TEXCOLOR', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the color index of the color of text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('TEXEXTENT', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the coordinates of text extent rectangle and
the text concatenation point of the character string</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('TEXFONT', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the text font</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('TEXHEIGHT', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the height of text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('TEXPATH', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the reading direction of text</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('TEXUP', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the character up vector in <B>x</B> vector
and <B>y</B> vector</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Checking Attributes That Affect Entire
Graph</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('ASPECT', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the aspect ratio</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('CATALOG', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the current catalog</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('CBACK', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the background color</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('DEVICE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the current output device</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('HPOS', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the number of columns in the graphics output
area</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('HSIZE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the width of the graphics output area in units
of inches</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('MAXDISP', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the dimensions of maximum display area for the
device in meters and pixels</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('VPOS', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the number of rows in the graphics output area</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('VSIZE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the height of the graphics output area in units
of inches</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Querying Catalogs</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('GRAPHLIST', . . .)</TD>
  
<TD  align="LEFT" valign="TOP">returns the names of graphs in the current catalog</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('NUMGRAPH', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the number of graphs in the current catalog</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('OPENGRAPH', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the name of the currently open graph</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Checking System Status</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('STATE', . . .)</TD>
  
<TD  align="LEFT" valign="TOP">returns the current operating state</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('WSACTIVE', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns whether or not the workstation is active</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('WSOPEN', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns whether or not the workstation is open</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Checking Transformation Definitions</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('TRANS', . . .)</TD>
  
<TD  align="LEFT" valign="TOP">returns the coordinates of the viewport and window associated
with the transformation</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('TRANSNO', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the active transformation number</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Checking Viewport Definitions </FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('CLIP', . . .)</TD>
  
<TD  align="LEFT" valign="TOP">returns the status of clipping</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('VIEWPORT', . . . )</TD>
  
<TD  align="LEFT" valign="TOP">returns the coordinates of the viewport assigned to
the transformation number</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="3" align="LEFT" valign="TOP"><B><CODE><FONT size="+1">Checking Window Definitions</FONT></CODE></B><BR></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">GASK('WINDOW', . . .)</TD>
  
<TD  align="LEFT" valign="TOP">returns the coordinates of the window assigned to the
transformation number</TD>
</TR>

</TABLE>

<BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Creating Simple Graphics with DSGI</FONT></B></TD></TR></TABLE>

<P><A name="z1082327">&#13; 
Within any DSGI program, you need to follow these basic steps: </A>
<OL START="1" type="1">
<LI>Initialize DSGI.
<P><A name="z1082329">&#13; The function that initializes DSGI is GINIT(). GINIT() loads
the graphics sublibrary, opens a workstation, and activates a workstation.</A><P>

<LI>Open a graphics segment.
<P><A name="z1082331">&#13;  Before you can submit graphics
primitives, you must submit the GRAPH('CLEAR', . . .) function. GRAPH('CLEAR',
. . .) opens a graphic segment so that graphics primitives can be submitted.</A><P>

<LI>Generate graphics
elements.
<P><A name="z1082333">&#13;  DSGI can generate arcs, bars, ellipses, elliptical arcs, lines,
markers, pie slices, polygons (fill areas), and text. These graphics elements
are all produced with the GDRAW function using their associated operator names.</A>
<P><A name="z1082334">&#13; 
 GDRAW functions can only be submitted when a graphics
segment
is open. Therefore, they must be submitted between the GRAPH('CLEAR', . .
.) and GRAPH('UPDATE', . . .) functions.</A><P>

<LI>Close the graphics segment.
<P><A name="z1082336">&#13; Once the attribute and graphics
statements have been entered, you must submit statements to close the graphics
segment and output the graph. The GRAPH('UPDATE', . . .) function closes the
graphic segment currently open and, optionally, displays the graphics output.</A><P>

<LI>End DSGI.
<P><A name="z1082338">&#13; The GTERM() function ends DSGI by deactivating and closing the
workstation, and closing the graphics sublibrary. It frees any memory allocated
by DSGI.</A>
<P><A name="z1082339">&#13; <B>Note:</B> You must execute a RUN statement at the end of the DATA step
to display the output.</A><P>
</OL>

<P><A href="#z1058065">Basic Steps Used in Creating DSGI Graphics Output</A>
outlines the basic steps and shows the functions used to initiate steps 1,
2, 4, and 5.  Step 3 can consist of many types of functions.  The GDRAW('LINE',
. . . ) function is used as an example.
<P><A name="z1082341">&#13;
</A>
<P>
<B><I><A name="z1058065">Basic Steps Used in Creating DSGI Graphics Output</A></I></B><BR>


<P><IMG border="0" src="./images/01329391.gif" vspace="12" alt="[IMAGE]">
<P>
<P><A name="z1082342">&#13;     Notice that there are two pairs
of functions that work together within a DSGI DATA step (shown by a and b
in </A><A href="#z1058065">Basic Steps Used in Creating DSGI Graphics Output</A>).
The first pair, GINIT() and GTERM(), begin and end DSGI. Within the first
pair, the second pair, GRAPH('CLEAR', . . . ) and GRAPH('UPDATE', . . . )
begin and end a graphics segment.  You can repeat these pairs within a single
DATA step to produce multiple graphics output; however, the relative positions
of these functions must be maintained within a DATA step. See <A href="#z1045569">Generating Multiple Graphics Output in One DATA Step</A> for more information about
producing multiple graphics outputs from one DATA step.
<P>The order of these steps is controlled by DSGI operating
states. Before any DSGI function or routine can be submitted, the operating
state in which that function or routine can be submitted must be active. See <A href="#z1045539">How Operating States Control the Order of DSGI Statements</A>.
<BR><H3><A name="z1045538">Setting Attributes for Graphics Elements</A></H3>


<P><A name="z1082344">&#13;   
The appearance of the graphics elements is determined by the settings of the
attributes. Attributes control such aspects as height of text; text font;
and color, size, and width of the graphics element. In addition, the HTML
attribute determines whether the element provides a link to another graphic
or web page. Attributes are set and reset with GSET functions.  GASK routines
return the current setting of the attribute specified.</A>
<P><A name="z1082345">&#13;
      
   Each graphics primitive is associated with a particular set
of attributes.  Its appearance or linking capability can only be altered by
that set of attributes. </A><A href="#z1058103">Graphics Output Primitive Functions and Associated Attributes</A>
lists the operators used with GDRAW functions to generate graphics elements
and the attributes that control them. 
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">
<CAPTION align="top"><B><I><A name="z1058103">Graphics Output Primitive Functions and Associated Attributes</A></I></B></CAPTION>


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="BOTTOM" ><B><A name="z1058103">&#13;Graphics Output Primitive </A></B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>  Functions </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>  Associated Attributes</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Arc </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('ARC', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">HTML, LINCOLOR,   LININDEX,   LINREP,   LINTYPE,   LINWIDTH</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Bar </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('BAR', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">FILCOLOR,   FILINDEX,   FILREP,   FILSTYLE, FILTYPE,
HTML</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Ellipse  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('ELLIPSE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">FILCOLOR,   FILINDEX,   FILREP,   FILSTYLE, FILTYPE,
HTML</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Elliptical Arc  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('ELLARC', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">HTML, LINCOLOR,   LININDEX,   LINREP,   LINTYPE,   LINWIDTH</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Fill Area  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('FILL', . . . )   </TD>
  
<TD  align="LEFT" valign="TOP">FILCOLOR,   FILINDEX,   FILREP,   FILSTYLE,   FILTYPE,
HTML</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Line   </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('LINE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">HTML, LINCOLOR,   LININDEX,   LINREP,   LINTYPE,   LINWIDTH</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Marker  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('MARK', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">HTML, MARCOLOR,   MARINDEX,   MARREP,   MARSIZE,   MARTYPE</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Pie  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('PIE', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">FILCOLOR,   FILINDEX,   FILREP,   FILSTYLE,   FILTYPE,
HTML</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Text  </TD>
  
<TD  align="LEFT" valign="TOP">GDRAW('TEXT', . . . )  </TD>
  
<TD  align="LEFT" valign="TOP">HTML, TEXALIGN,   TEXCOLOR,   TEXFONT,   TEXHEIGHT,
  TEXINDEX,   TEXPATH,   TEXREP,   TEXUP</TD>
</TR>

</TABLE>

<BR>
<P>Attribute functions must precede the graphics primitive
they control.  Once an attribute is set, it controls any associated graphics
primitives that follow.  If you want to change the setting, you can issue
another GSET(<B>attribute</B>, . . . ) function with the new setting.
<P>If you do not set an attribute before you submit a graphics
primitive, DSGI uses the default value for the attribute.  Refer to <A href="z1060538.htm">DATA Step Graphics Interface Dictionary</A> for the
default values used for each attribute.
<BR><H3><A name="z1045539">How Operating States Control the Order of DSGI Statements</A></H3>


<P><A name="z1082378">&#13;  Each DSGI function and routine
can only be submitted when certain
operating states are active. This restriction affects the order of functions
and routines within the DATA step. Generally, the operating states within
a DATA step follow this order:


</A>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>GKCL &rarr;  WSAC &rarr;  SGOP &rarr;  WSAC &rarr; 
GKCL</TD></TR></TABLE>
<BR><H3>Functions That Change the Operating State</H3>


<P><A name="z1082380">&#13; 
The functions described earlier in steps 1, 2, 4, and 5 actually control the
changes to the operating state.  For example, the GINIT() function must be
submitted when the operating state is GKCL, the initial state of DSGI.  GINIT()
then changes the operating state to WSAC.  The GRAPH('CLEAR', . . . ) function
must be submitted when the operating state is WSAC and before any graphics
primitives are submitted.  The reason it precedes graphics primitives is that
it changes the operating state to SGOP, the operating state in which you can
submit graphics primitives.  The following list shows the change in the operating
state due to specific functions:</A>
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GINIT()</TD>
  
<TD  align="LEFT" valign="TOP">GKCL &rarr; WSAC</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GRAPH('CLEAR', . . . ) </TD>
  
<TD  align="LEFT" valign="TOP">WSAC &rarr; SGOP</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GRAPH('UPDATE', . . . ) </TD>
  
<TD  align="LEFT" valign="TOP">SGOP &rarr; WSAC</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GTERM()</TD>
  
<TD  align="LEFT" valign="TOP">WSAC &rarr; GKCL</TD>
</TR>

</TABLE>

<BR>
<P><A name="z1082389">&#13;   Because these functions change the
operating state, you must order all other functions and routines so that the
change in operating state is appropriate for the functions and routines that
follow. The following program statements show how the operating state changes
from step to step in a typical DSGI program.  They also summarize the functions
and routines that can be submitted under each operating state.  The functions
that change the operating state are included as actual statements.  Refer
to </A><A href="z1060670.htm#z1060669">Operating States</A>
for the operating states from which functions and routines can be submitted.
 



<PRE>data dsname;

      /* GKCL - initial state of DSGI; can execute:             */
      /*   1. GSET functions that set attributes                */
      /*      that affect the entire graphics output            */
      /*   2. some catalog management functions                 */
      /*      (some GRAPH functions)                            */

      /* Step 1 - initialize DSGI             */
   rc=ginit();

      /* WSAC - workstation is active; can execute:             */
      /*   1. most GASK routines                                */
      /*   2. some catalog management functions                 */  
      /*      (some GRAPH functions)                            */
      /*   3. GSET functions that set attributes                */   
      /*      and bundles, viewports, windows,                  */
      /*      transformations, and message logging              */    
      
      /* Step 2 - open a graphics segment     */
   rc=graph('clear', 'text');

      /* SGOP - segment open; can execute:                      */
      /* 1. any GASK routine                                    */
      /* 2. any GDRAW function                                  */
      /* 3. some catalog management functions                   */     
      /*    (some GRAPH functions)                              */
      /* 4. GSET functions that set attributes                  */
      /*    and bundles, viewports, windows,                    */ 
      /*    transformations, and message logging                */

      /* Step 3 - execute graphics primitives */
   rc = gdraw('line', 2, 30,50,50,50);

      /* Step 4 - close the graphics segment  */
   rc=graph('update');

      /* WSAC - workstation is active; can execute:             */
      /*  1. most GASK routines                                 */
      /*  2. some catalog management functions                  */ 
      /*     (some GRAPH functions)                             */
      /*  3. GSET functions that set attributes                 */   
      /*     and bundles, viewports, windows,                   */
      /*     transformations, and message logging               */ 
    
      /* Step 5 - end DSGI */
   rc=gterm();

      /* GKCL - initial state of DSGI         */
run;</PRE>
<BR><H3>Order of Functions and Routines</H3>


<P><A name="z1082390">&#13;
Functions and routines within each operating state can technically
be submitted in any order; however, once an attribute is set, it remains in
effect until the end of the DATA step or until you change its value.  If you
are producing multiple graphics output within the same DATA step, the attributes
for one output affect the ones that follow. Attributes are not reset until
after the GTERM() function is submitted.</A>
<P><A name="z1082391">&#13; Notice that you can set attributes for
the graphics primitives
in several places.  As long as the functions that set the attributes are executed
before the graphics primitives, they will affect the graphics output.  If
you execute them after a graphics primitive, the primitive is not affected.
See </A><A href="#z1045538">Setting Attributes for Graphics Elements</A>.
<P>The following program statements illustrate a more complex
DSGI program that produces <A href="#z1061401">Simple Graphics Output Generated with DSGI</A>
when submitted. Notice that all attributes for a graphics primitive are executed
before the graphics primitive. In addition, the GINIT() and GTERM() pairing
and the GRAPH('CLEAR') and GRAPH('UPDATE') pairing are maintained within the
DATA step.  Refer to <A href="z1060670.htm#z1060669">Operating States</A>
for the operating states in which each function and routine can be submitted.
 



<PRE>/* set the graphics environment */
goptions reset=global gunit=pct border
         hsize=7 in vsize=5 in
         targetdevice=pscolor;

   /* execute a DATA step with DSGI */
data dsname;
      /* initialize SAS/GRAPH software */
      /* to accept DSGI statements     */
   rc=ginit();
   rc=graph('clear');

      /* assign colors to color index */
   rc=gset('colrep', 1, 'blue');
   rc=gset('colrep', 2, 'red');

      /* define and display titles */
   rc=gset('texcolor', 1);
   rc=gset('texfont', 'swissb');
   rc=gset('texheight', 6);
   rc=gdraw('text', 45, 93, 'Simple Graphics Output');

      /* change the height and */
      /* display second title  */
   rc=gset('texheight', 4);
   rc=gdraw('text', 58, 85, 'Created with DSGI');

      /* define and display footnotes */
      /* using same text font and     */
      /* color as defined for titles  */
   rc=gset('texheight', 3);
   rc=gdraw('text', 125, 1, 'GR31N03  ');

      /* define and draw bar */
   rc=gset('lincolor', 2);
   rc=gset('linwidth', 5);
   rc=gdraw('line', 2, 72, 72, 30, 70);
   rc=gdraw('line', 2, 52, 92, 50, 50);

      /* display graph and end DSGI */
   rc=graph('update');
   rc=gterm();
run;</PRE>
<P>
<P>
<P>
<B><I><A name="z1061401">Simple Graphics Output Generated with DSGI</A></I></B><BR>

<P><IMG border="0" src="./images/01329392.gif" vspace="12" alt="[IMAGE]">
<P>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Bundling Attributes</FONT></B></TD></TR></TABLE>

<P><A name="z1082394">&#13;    DSGI allows you to bundle attributes.  As a result, you can
select a group of attribute values rather than having to select each one individually.
 This feature is useful if you use the same attribute settings over and over
within the same DATA step.</A>
<P>To use an attribute bundle, you assign the values of
the attributes to a bundle index.  When you want to use those attributes for
a graphics primitive, you select the bundle rather than set each attribute
separately.
<BR><H3>Attributes That Can Be Bundled for Each Graphics Primitive</H3>


<P><A name="z1082396">&#13; 
Each graphics primitive has a group of attributes associated with it that
can be bundled.  Only the attributes in that group can be assigned to the
bundle.  </A><A href="#z1058106">Attributes That Can Be Bundled for Each Graphics Primitive</A>
shows the attributes that can be bundled for each graphics primitive. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp; You do not have to use attribute bundles for all graphics
primitives if you use a bundle for one.  You can define bundles for some graphics
primitives and set the attributes individually for others.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P><A name="z1082398">&#13;   
    
 However, if the other graphics primitives are associated with
the same attributes you have bundled and you do not want to use the same values,
you can use other bundles to set the attributes, or you can set the attributes
back to 'INDIVIDUAL'. </A>
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">
<CAPTION align="top"><B><I><A name="z1058106">Attributes That Can Be Bundled for Each Graphics Primitive</A></I></B></CAPTION>


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="BOTTOM" ><B><A name="z1058106">&#13; Graphics Output Primitive </A></B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Associated Attributes  That Can Be Bundled </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('ARC', . . . )    </TD>
  
<TD  align="LEFT" valign="TOP">LINCOLOR,   LINTYPE,   LINWIDTH</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('BAR', . . . )    </TD>
  
<TD  align="LEFT" valign="TOP">FILCOLOR,   FILSTYLE,   FILTYPE</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('ELLARC', . . . )   </TD>
  
<TD  align="LEFT" valign="TOP">LINCOLOR,   LINTYPE,   LINWIDTH</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('ELLIPSE', . . . )    </TD>
  
<TD  align="LEFT" valign="TOP">FILCOLOR,   FILSTYLE,   FILTYPE</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('FILL', . . . )    </TD>
  
<TD  align="LEFT" valign="TOP">FILCOLOR,   FILSTYLE,   FILTYPE</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('LINE', . . . )    </TD>
  
<TD  align="LEFT" valign="TOP">LINCOLOR,   LINTYPE,   LINWIDTH</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('MARK', . . . )    </TD>
  
<TD  align="LEFT" valign="TOP">MARCOLOR,   MARSIZE,   MARTYPE</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('PIE', . . . )    </TD>
  
<TD  align="LEFT" valign="TOP">FILCOLOR,   FILSTYLE,   FILTYPE</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GDRAW('TEXT', . . . )    </TD>
  
<TD  align="LEFT" valign="TOP">TEXCOLOR,   TEXFONT</TD>
</TR>

</TABLE>

<BR>
<BR><H3>Assigning Attributes to a Bundle</H3>


<P><A name="z1082419">&#13;   To assign values of attributes to a
bundle, you must </A>
<P>
<UL>

<LI><A name="z1082420">&#13; assign the values to a
numeric bundle index with the GSET('<B>xxx</B> REP', . . . ) function.
Each set of attributes that can be bundled uses a separate GSET('<B>xxx</B> REP', . . . ) function, where <B>xxx</B> is the appropriate
prefix for the set of attributes to be bundled. Valid values for <B>xxx</B> are FIL, LIN, MAR, and TEX.</A><P>

<LI><A name="z1082421">&#13; set the aspect source
flag (ASF) of the attributes to 'BUNDLED' before you use the bundled attributes.
You can use the GSET('ASF', . . . ) function to set the ASF of an attribute.
 You need to execute a GSET('ASF', . . . ) function for each attribute in
the bundle.</A><P>
</UL>

<P><A name="z1082422">&#13; The following example assigns the
text attributes, color, and
font, to the bundle indexed by the number 1.  As shown in the GSET('TEXREP',
. . . ) function, the color for the bundle is green,   the second color in
the COLOR= graphics option.  The font for the bundle is the 'ZAPF' font. 
(See </A><A href="z1047015.htm">COLREP</A>
for an explanation of how colors are used in DSGI.)  



<PRE>goptions colors=(red green blue);

data dsname;
.
.     /* other DATA step statements */
.
      /* associate the bundle with the index 1 */
   rc=gset('texrep', 1, 2, 'zapf');
.
.     /* more statements */
.
      /* assign the text attributes to a bundle */
   rc=gset('asf', 'texcolor', 'bundled');
   rc=gset('asf', 'texfont', 'bundled');

      /* draw the text */
   rc=gdraw('text', 50, 50, 'Today is the day.');</PRE>
<P>The bundled attributes are used when an associated GDRAW
function is executed.  If the ASF of an attribute is not set to 'BUNDLED'
at the time a GDRAW function is executed, DSGI searches for a value to use
in the following order: 
<OL START="1" type="1">
<LI>the current value of the attribute<P>

<LI>the default value of the
attribute.<P>
</OL>

<BR><H3>Selecting a Bundle</H3>


<P><A name="z1082426">&#13;   Once you have issued the GSET('ASF',
. . . ) and GSET('<B>xxx</B> REP', . . . ) functions, you can issue
the GSET('<B>xxx</B> INDEX', . . . ) function to select the bundle.
The following statement selects the bundle defined in the previous example:
 


</A>
<PRE>/* invoke the bundle of text attributes */
   rc=gset('texindex', 1);</PRE>
<P>The 1 in this example corresponds to the index number
specified in the GSET('TEXREP', . . . ) function.
<BR><H3>Defining Multiple Bundles for a Graphics Primitive</H3>


<P><A name="z1082428">&#13;   You can set up more than one bundle for graphics primitives
by issuing another GSET('<B>xxx</B> REP', . . . ) function with a different
index number.  If you wanted to add a second attribute bundle for text to
the previous example,  you could issue the following statement:  


</A>
<PRE>/* define another attribute bundle for text */
   rc=gset('texrep', 2, 3, 'swiss');</PRE>
<P>When you activate the second bundle, the graphics primitives
for the text that follows will use the third color, blue, and the SWISS font. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp; When using a new bundle, you do not need to reissue
the GSET('ASF', . . . ) functions for
the attributes that will be bundled. Once the ASF of an attribute has been
set, the setting remains in effect until it is changed.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<BR><H3>How DSGI Selects the Value of an Attribute to Use</H3>


<P><A name="z1082431">&#13;   Attributes that are bundled
override any of the same attributes that are individually set. For example,
you assign the line color green, the type 1, and the width 5 to a line bundle
with the following statements:  


</A>
<PRE>goptions colors=(red green blue);
rc=gset('asf', 'lincolor', 'bundled');
rc=gset('asf', 'linwidth', 'bundled');
rc=gset('asf', 'lintype', 'bundled');
rc=gset('linrep', 3, 2, 5, 1);</PRE>
<P>In subsequent statements, you activate the bundle, select
other attributes for the line, and then draw a line:  



<PRE>/* activate the bundle */
rc=gset('linindex', 3);

   /* select other attributes for the line */
rc=gset('lincolor', 3);
rc=gset('linwidth', 10);
rc=gset('lintype', 4);

   /* draw a line from point (30,50) to (70,50) */
rc=gdraw('line', 2, 30, 70, 50, 50);</PRE>
<P>The color, type, and width associated with the line
bundle are used rather than the attributes set just before the GDRAW('LINE',
. . . ) function was executed. The line that is drawn is green (the second
color from the colors list of the COLORS= graphics option), 5 units wide,
and solid (line type 1).
<P>During processing, DSGI chooses the value of an attribute
using the following logic: 
<OL START="1" type="1">
<LI>Get the index of the active line bundle.<P>

<LI>Check the ASF of the LINCOLOR
attribute. If the
ASF is 'INDIVIDUAL', the value selected with GSET('LINCOLOR', . . .) is used;
otherwise, the LINCOLOR associated with the bundle index is used.<P>

<LI>Check the ASF of the LINTYPE attribute. If the
ASF is 'INDIVIDUAL', the value selected with GSET('LINTYPE', . . .) is used;
otherwise, the LINTYPE associated with the bundle index is used.<P>

<LI>Check the ASF of the LINWIDTH attribute. If the
ASF is 'INDIVIDUAL', the value selected with GSET('LINWIDTH', . . .) is used;
otherwise, the LINWIDTH associated with the bundle index is used.<P>

<LI>Draw the line using the appropriate color, type,
and width for the line.<P>
</OL>

<BR><H3>Disassociating an Attribute from a Bundle</H3>


<P><A name="z1082440">&#13;   To disassociate an attribute from a bundle, use the GSET('ASF',
. . . ) function to reset the ASF of the attribute to 'INDIVIDUAL'.  The following
program statements demonstrate how to disassociate the attributes from the
text bundle:  


</A>
<PRE>/* disassociate an attribute from a bundle */
   rc=gset('asf', 'texcolor', 'individual');
   rc=gset('asf', 'texfont', 'individual');</PRE>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z1045559">Using Viewports and Windows</A></FONT></B></TD></TR></TABLE>

<P><A name="z1082441">&#13;
 

In DSGI, you can define viewports and windows.  Viewports enable you to subdivide
the graphics output area and insert existing graphs or draw graphics elements
in smaller sections of the graphics output area.  Windows define the coordinate
system within a viewport and enable you to scale the graph or graphics elements
drawn within the viewport.</A>
<P><A name="z1082442">&#13; The default viewport is defined as (0,0) to (1,1) with 1 being
100 percent of the graphics output area. If you do not define a viewport,
graphics elements or graphs are drawn using the default.</A>
<P><A name="z1082443">&#13;  The default window is defined
so that a rectangle drawn from window coordinates (0,0) to (100,100) is square
and fills the display in one dimension.  The actual dimensions of the default
window are device dependent.  Use the GASK('WINDOW', .
. . ) routine to find the exact dimensions of your default
window. You can define a window without defining a viewport.  The coordinate
system of the window is used with the default viewport.</A>
<P>If you define a viewport, you can position it anywhere
in the graphics output area.  You can define multiple viewports within the
graphics output area so that more than one existing graph, part of a graph,
or more than one graphics element can be inserted into the graphics output.
<P><A name="z1082445">&#13;
Transformations activate both a viewport and the associated
window.  DSGI maintains 21 (0 through 20) transformations.  By default, transformation
0 is active. Transformation 0 always uses the entire graphics output area
for the viewport and maps the window coordinates to fill the viewport. The
definition of the viewport and window of transformation 0 may not be changed.</A>
<P>By default, the viewports and windows of all the other
transformations (1 through 20) are set to the defaults for viewports and windows.
If you want to define a different viewport or window, you must select a transformation
number between 1 and 20.
<P><A name="z1082447">&#13;  You generally follow these steps when defining viewports or
windows: </A>
<P>
<UL>

<LI>Define the viewport or window.<P>

<LI>Activate the transformation so that the viewport
or window is used for the output.<P>
</UL>

<P>These steps can be submitted in any order; however,
if you use a transformation you have not defined, the default viewport and
window are used. Once you activate a transformation, the graphics elements
drawn by the subsequent DSGI functions are drawn in the viewport and window
associated with that transformation.
<BR><H3>Defining Viewports</H3>


<P><A name="z1082451">&#13;
  You can define a viewport with the
GSET('VIEWPORT', <B>n</B>, . . . ) function, where <B>n</B> is the transformation number
of the viewport you are defining.  You can also use this function to define
multiple viewports, each containing a portion of the graphics output area.
You can then place a separate graph, part of a graph, or graphics elements
within each viewport.</A>
<P>The following program statements divide the graphics
output area into four subareas:  



<PRE>/* define the first viewport, indexed by 1 */
rc=gset('viewport', 1, .05, .05, .45, .45);

   /* define the second viewport, indexed by 2 */
rc=gset('viewport', 2, .55, .05, .95, .45);

   /* define the third viewport, indexed by 3 */
rc=gset('viewport', 3, .55, .55, .95, .95);

   /* define the fourth viewport, indexed by 4 */
rc=gset('viewport', 4, .05, .55, .45, .95);</PRE>
<P>Once you define the viewports, you can insert existing
graphs or draw graphics elements in each viewport by activating the transformation
of that viewport.
<BR><H3>Clipping around Viewports</H3>


<P><A name="z1082454">&#13;
  When you use viewports,
you also may need to
use the clipping feature. Even though you have defined the dimensions of your
viewport, it is possible for graphics elements to display past its boundaries.
If the graphics elements are too large to fit into the dimensions you have
defined, portions of the graphics elements actually display outside of the
viewport. To ensure that only the portions of the graphics elements that fit
within the dimensions of the viewport display, turn the clipping feature on
by using the GSET('CLIP', . . . ) function. For details, see </A><A href="z1047010.htm">CLIP</A>.
<BR><H3>Defining Windows</H3>


<P><A name="z1082455">&#13;
  You can define a window by using the
GSET('WINDOW',<B>n</B>,
. . . ) function, where <B>n</B> is the transformation number of the
window you are defining. If you are defining a window for a viewport you have
also defined, <B>n</B> must match the transformation number of the viewport.</A>
<P>You can scale the <B>x</B> and <B>y</B>
axes differently for a window.  The following program statements scale the
axes for each of the four viewports defined earlier in "Defining Viewpoints":
 



<PRE>/* define the window for viewport 1 */
rc=gset('window', 1, 0, 50, 20, 100);

   /* define the window for viewport 2 */
rc=gset('window', 2, 0, 40, 20, 90);

   /* define the window for viewport 3 */
rc=gset('window', 3, 10, 25, 45, 100);

   /* define the window for viewport 4 */
rc=gset('window', 4, 0, 0, 100, 100);</PRE>
<P>See <A href="#z1045579">Scaling Graphs by Using Windows</A>
for an example of using windows to scale graphs. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;<A name="z1082458">&#13;
  
   When you define a window for a viewport, the transformation
numbers in the GSET('VIEWPORT', . . . ) and GSET('WINDOW', . . . ) functions
must match in order for DSGI to activate them simultaneously.</A>&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<BR><H3>Activating Transformations</H3>


<P><A name="z1082459">&#13;
   
Once you have defined a viewport or window, you must activate the transformation
in order for DSGI to use the viewport or window.  To activate the transformation,
use the GSET('TRANSNO',<B>n</B>, . . . ) function where <B>n</B>
has the same value as <B>n</B> in GSET('VIEWPORT',<B>n</B>, .
. . ) or GSET('WINDOW',<B>n</B>, . . . ).</A>
<P>The following program statements illustrate how to activate
the viewports and windows defined in the previous examples:  



<PRE>/* define the viewports */
   .
   .
   .
   /* define the windows */
   .
   .
   .
   /* activate the first transformation */
gset('transno', 1);
.
.  /* graphics primitive functions follow */
.
   /* activate the second transformation */
gset('transno', 2);
.
.  /* graphics primitive functions follow */
.
   /* activate the third transformation */
gset('transno', 3);
.
.  /* graphics primitive functions follow */
.
   /* activate the fourth transformation */
gset('transno', 4);
.
.  /* graphics primitive functions follow */
.</PRE>
<P><A name="z1082461">&#13; When you activate these transformations,
your display is logically
divided into four subareas as shown in </A><A href="#z1058070">Graphics Output Area Divided into Four Logical Transformations</A>.
<P>
<P>
<B><I><A name="z1058070">Graphics Output Area Divided into Four Logical Transformations</A></I></B><BR>


<P><IMG border="0" src="./images/01329393.gif" vspace="12" alt="[IMAGE]">
<P>
<P><A name="z1082463">&#13; If you want to use
the default viewport and window after selecting different ones, execute the
GSET('TRANSNO', 0) function to reselect the default transformation for DSGI.</A>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Inserting Existing Graphs into DSGI Graphics Output</FONT></B></TD></TR></TABLE>

<P><A name="z1082464">&#13; You can
insert existing graphs into graphics output you are creating.  The graph you
insert must be in the same catalog in which you are currently working. Follow
these steps to insert an existing graph: </A>
<OL START="1" type="1">
<LI><A name="z1082465">&#13; Use
the GSET('CATALOG', . . . ) function to set the output catalog to the catalog
that contains the existing graph. </A>
<P><B>Note:</B>&nbsp;&nbsp;&nbsp; Unless you
are using the WORK library, you must have previously defined the libref in
a LIBNAME statement or window when using GSET('CATALOG', . . . ).&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR><P>

<LI><A name="z1082467">&#13;  Define a
viewport with the dimensions and position of the place
in the graphics output where you want to insert the existing graph. GSET('VIEWPORT',<B>n</B>, . . . ) defines a viewport and GSET('WINDOW',<B>n</B>,
. . . ) defines a window.</A><P>

<LI>Define a window as (0,0) to (100,100) so that
the inserted graph is not distorted.  The graph must have a square area defined
to avoid the distortion.  If your device does not have a square graphics output
area, the window defaults to the units of the device rather than (0,0) to
(100,100) and may distort the graph.<P>

<LI><A name="z1082469">&#13;  Activate the transformation number
<B>n</B>, as defined
in the viewport function, and possibly in the window function, using GSET('TRANSNO', <B>n</B>, . . . ).</A><P>

<LI>Use the GRAPH('INSERT', . . . ) function with
the name of the existing graph.<P>
</OL>

<P><A name="z1082471">&#13;
The following program statements provide an example of including an existing
graph in the graphics output being created.  The name of the existing graph
is 'MAP'. 'LOCAL' points to the library containing the catalog 'MAPCTLG'.
The coordinates of the viewport are percentages of the graphics output area. 


</A><CODE><B>SAS-data-library</B></CODE> refers to a
permanent SAS data library.  



<PRE>
<B><I>Graphics Output Area Divided into Four Logical Transformations</I></B><BR>


libname local 'SAS-data-library';
.
.
.
      /* select the output catalog to the */
      /* catalog that contains 'map' */
   rc=gset('catalog', 'local', 'mapctlg');
   .
   .
   .

      /* define the viewport to contain the */
      /* existing graph */
   rc=gset('viewport', 1, .25, .45, .75, .9);
   rc=gset('window', 1, 0, 0, 100, 100);

      /* set the transformation number to the one */
      /* defined in the viewport function */
   rc=gset('transno', 1);

      /* insert the existing graph */
   rc=graph('insert', 'map');</PRE>
<P>These statements put the existing graph 'MAP' in the
upper half of the graphics output.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z1045569">Generating Multiple Graphics Output in One DATA Step</A></FONT></B></TD></TR></TABLE>

<P><A name="z1082473">&#13; You
can produce more than one graphics output within the same DATA step.  All
statements between the GRAPH('CLEAR', . . . ) and GRAPH('UPDATE', . . . )
functions will produce one graphics output.</A>
<P>Each time the GRAPH('UPDATE', . . . ) function is executed,
a graph is displayed.  After the GTERM() function is executed, no more graphs
are displayed for the DATA step.  The GINIT() function must be executed again
to produce more graphs. <DL>
<DT><B><FONT color="FF00007">CAUTION:</FONT></B></DT><DD><B>Be careful using global SAS/GRAPH statements
when you are producing multiple output from within the DATA step.</B>
&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"></DD></DL><A name="z1082475">&#13;  </A>
<P>If you use global SAS/GRAPH statements
when producing multiple output from one DATA step, the last definition of
the statements is used for all displays.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Processing DSGI Statements in Loops</FONT></B></TD></TR></TABLE>

<P><A name="z1082477">&#13;     You can process DSGI statements in loops to draw a graphics
element multiple times in one graphics output or to produce multiple output.
 If you use loops, you must maintain the GRAPH('CLEAR', . . . ) and GRAPH('UPDATE',
. . . ) pairing within the GINIT() and GTERM() pairing. (See </A><A href="#z1058065">Basic Steps Used in Creating DSGI Graphics Output</A>.) The following program
statements illustrate how you can use DSGI statements to produce multiple
graphics output for different output devices:  



<PRE>data _null_;
   length d1-d5 $ 8;
   input d1-d5;
   array devices{5} d1-d5;
   .
   .
   .
   do j=1 to 5;
      rc=gset('device', devices{j});
      .
      .
      .
      rc=ginit();
      .
      .
      .
      do i=1 to 5;
         rc=graph('clear');
         rc=gset('filcolor', i);
         rc=gdraw('bar', 45, 45, 65, 65);
         rc=graph('update');
      end;
      .
      .
      .
      rc=gterm();
   end;
   cards;
tek4105 hp7475 ps qms800 ibm3279
;
run;</PRE>
<P>The inner loop produces five graphs for each device.
Each graphics output produced by the inner loop consists of a bar. The bar
uses a different color for each graph. The outer loop produces all of the
graphs for five different devices. A total of 25 graphs is generated by these
loops.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Examples</FONT></B></TD></TR></TABLE>

<P><A name="z1082479">&#13; The following examples show
different applications
for DSGI and illustrate some of its features such as defining viewports and
windows, inserting existing graphs, angling text, using GASK routines, enlarging
a segment of a graph, and scaling a graph.</A>
<P><A name="z1082480">&#13;
   These examples use some additional graphics options that may
not be used in other examples in this book. Because the dimensions of the
default window vary across devices, the TARGETDEVICE=, HSIZE=, and VSIZE=
graphics options are used to make the programs more portable.  The COLORS=
graphics option provides a standard colors list.</A>
<P>Refer to <A href="z1060538.htm">DATA Step Graphics Interface Dictionary</A>
for a complete description of each of the functions used in the examples.
<BR><H3>Vertically Angling Text</H3>


<P><A name="z1082482">&#13;
 
This
example generates a pie chart with text that changes its angle as you rotate
around the pie.  DSGI positions the text by aligning it differently depending
on its location on the pie.  In addition, DSGI changes the angle of the text
so that it aligns with the spokes of the pie.</A>
<P><A name="z1082483">&#13;
  This example illustrates how global statements can be used with
DSGI.  In this example, FOOTNOTE and TITLE statements create the footnotes
and title for the graph.  The GOPTIONS statement defines general aspects of
the graph.  The COLORS= graphics option provides a colors list from which
the colors referenced in <BR>GSET('<B>xxx</B> COLOR', . .
. ) functions are selected.</A>
<P>The following program statements produce <A href="#z1061407">Text Angled with the GSET('TEXUP', ...) Function</A>:  



<PRE>/* set the graphics environment */
goptions reset=global gunit=pct border
         ftext=swissb htitle=6 htext=3
         colors=(black blue green red)
         hsize=7 in vsize=5 in
         targetdevice=pscolor;

   /* define the footnote and title */
footnote1 j=r 'GR31N04  ';
title1 'Text Up Vector';

   /* execute DATA step with DSGI */
data vector;

      /* prepare SAS/GRAPH software */
      /* to accept DSGI statements  */
   rc=ginit();
   rc=graph('clear');

      /* define and display arc  */
      /* with intersecting lines */
   rc=gset('lincolor', 2);
   rc=gset('linwidth', 5);
   rc=gdraw('arc', 84, 50, 35, 0, 360);
   rc=gdraw('line', 2, 49, 119, 51, 51);
   rc=gdraw('line', 2, 84, 84, 15, 85);

      /* define height of text */
   rc=gset('texheight', 5);

      /* mark 360 degrees on the arc */
      /* using default align         */
   rc=gdraw('text', 121, 50, '0');

      /* set text to align to the right and */
      /* mark 180 degrees on the arc        */
   rc=gset('texalign', 'right', 'normal');
   rc=gdraw('text', 47, 50, '180');

      /* set text to align to the center and */
      /* mark 90 and 270 degrees on the arc  */
   rc=gset('texalign', 'center', 'normal');
   rc=gdraw('text', 84, 87, '90');
   rc=gdraw('text', 84, 9, '270');

      /* reset texalign to normal and          */
      /* display coordinate values or quadrant */
   rc=gset('texalign', 'normal', 'normal');
   rc=gdraw('text', 85, 52, '(0.0, +1.0)');

      /* rotate text using TEXUP and           */
      /* display coordinate values or quadrant */
   rc=gset('texup', 1.0, 0.0);
   rc=gdraw('text', 85, 49, '(+1.0, 0.0)');

      /* rotate text using TEXUP and           */
      /* display coordinate values or quadrant */
   rc=gset('texup', 0.0, -1.0);
   rc=gdraw('text', 83, 50, '(0.0, -1.0)');

      /* rotate text using TEXUP and           */
      /* display coordinate values or quadrant */
   rc=gset('texup', -1.0, 0.0);
   rc=gdraw('text', 83, 52, '(-1.0, 0.0)');

      /* display graph and end DSGI */
   rc=graph('update');
   rc=gterm();
run;</PRE>
<P>
<P>
<P>
<B><I><A name="z1061407">Text Angled with the GSET('TEXUP', ...) Function</A></I></B><BR>

<P><IMG border="0" src="./images/01329394.gif" vspace="12" alt="[IMAGE]">
<P>
<P>This
example illustrates the following features: 
<P>
<UL>

<LI><A name="z1082487">&#13; The
COLORS= graphics option provides a colors table to be used with the GSET('LINCOLOR',
. . . ) function.</A><P>

<LI><A name="z1082488">&#13; The
HSIZE= graphics option provides a standard width for the graphics output area.</A><P>

<LI><A name="z1082489">&#13; The
VSIZE= graphics option provides a standard height for the graphics output
area.</A><P>

<LI><A name="z1082490">&#13; The
TARGETDEVICE= graphics option selects the standard color PostScript driver
to use as the target device.</A><P>

<LI><A name="z1082491">&#13;
 The GINIT() function begins DSGI.</A><P>

<LI>The
GRAPH('CLEAR') function sets the graphics
environment. Because the function does not specify a name for the catalog
entry, DSGI will use the default name 'DSGI'.<P>

<LI><A name="z1082493">&#13;   The
GSET('TEXHEIGHT', . . . ), GSET('LINCOLOR', . . . ), and GSET('LINWIDTH',
. . . ) functions set attributes of the graphics primitives. The COLORS= graphics
option provides a colors table for the GSET('LINCOLOR', 2) function to reference.
 In this example, the color indexed by 2 is used to draw lines.  Since no
other colors table is explicitly defined with GSET('COLREP', . . .) functions,
DSGI looks at the colors list and chooses the color indexed by 2 (the second
color in the list) to draw the lines.</A><P>

<LI><A name="z1082494">&#13; The
GDRAW('ARC', . . . ) function draws an empty pie chart.  The arguments of
the GDRAW('ARC', . . . ) function provide the coordinates of the starting
point, the radius, and the beginning and ending angles of the arc.</A><P>

<LI><A name="z1082495">&#13; The
GDRAW('LINE', . . . ) function draws a line.  It provides the type of line,
the coordinates of the beginning point, and the coordinates of the ending
point.</A><P>

<LI><A name="z1082496">&#13; The
GDRAW('TEXT', . . . ) function draws the text. It sets the coordinates of
the starting point of the text string as well as the text string to be written.</A><P>

<LI><A name="z1082497">&#13; The
GSET('TEXALIGN', . . . ) function aligns text to the center, left, or right
of the starting point specified in the GDRAW('TEXT', . . . ) function.</A><P>

<LI><A name="z1082498">&#13; The
GSET('TEXUP', . . . ) function determines the angle at which the text is to
be written.</A><P>

<LI><A name="z1082499">&#13; The
GRAPH('UPDATE', . . . ) function closes the graphics segment.</A><P>

<LI><A name="z1082500">&#13; The
GTERM() function ends DSGI.</A><P>
</UL>

<BR><H3>Changing the Reading Direction of the Text</H3>


<P><A name="z1082501">&#13;   This example changes the reading direction of text. Notice that
the data set name is _NULL_. No data set is created as a result of this DATA
step; however, the graphics output is generated. The following program statements
produce </A><A href="#z1061410">Reading Direction of the Text Changed with the GSET('TEXPATH', ...) Function</A>:
 



<PRE>   /* set the graphics environment */
goptions reset=global gunit=pct border
         ftext=swissb htitle=6 htext=3
         colors=(black blue green red)
         hsize=7 in vsize=5 in
         targetdevice=pscolor;

   /* define the footnote and title */
footnote1 j=r 'GR31N05  ';
title1 'Text Path';

   /* execute DATA step with DSGI */
data _null_;

      /* prepare SAS/GRAPH software */
      /* to accept DSGI statements  */
   rc=ginit();
   rc=graph('clear');

      /* define height of text */
   rc=gset('texheight', 5);

      /* display first text */
   rc=gdraw('text', 105, 50, 'Right');

      /* change text path so that text reads from */
      /* right to left and display next text      */
   rc=gset('texpath', 'left');
   rc=gdraw('text', 65, 50, 'Left');

      /* change text path so that text reads up */
      /* the display and display next text      */
   rc=gset('texpath', 'up');
   rc=gdraw('text', 85, 60, 'Up');

      /* change text path so that text reads down */
      /* the display and display next text        */
   rc=gset('texpath', 'down');
   rc=gdraw('text', 85, 40, 'Down');

      /* display the graph and end DSGI */
   rc=graph('update');
   rc=gterm();
run;</PRE>
<P>
<P>
<P>
<B><I><A name="z1061410">Reading Direction of the Text Changed with the GSET('TEXPATH', ...) Function</A></I></B><BR>

<P><IMG border="0" src="./images/01329395.gif" vspace="12" alt="[IMAGE]">
<P>
<P>Features not explained earlier in "Vertically Angling
Text" are described here: 
<P>
<UL>

<LI>DATA _NULL_ causes the DATA step to be executed,
but no data set is created.<P>

<LI><A name="z1082505">&#13; The
GSET('TEXPATH',
. . . ) function changes the direction in which the text reads.</A><P>
</UL>

<BR><H3>Using Viewports in DSGI</H3>


<P><A name="z1082506">&#13;
 This example uses the GCHART procedure
to generate a graph, defines a viewport in which to display it, and inserts
the GCHART graph into the graphics output being created by DSGI.  </A><A href="#z1062411">Pie Chart Produced with the GCHART Procedure</A> shows the pie chart created
by the GCHART procedure.  <A href="#z1062414">Pie Chart Inserted into DSGI Graph by Using a Viewport</A>
shows the same pie chart after it has been inserted into a DSGI graph.  



<PRE>   /* set the graphics environment */
goptions reset=global gunit=pct border
         ftext=swissb htitle=6 htext=4
         colors=(black blue green red)
         hsize=7 in vsize=7 in
         targetdevice=pscolor;


   /* create data set TOTALS */
data totals;
   length dept $ 7 site $ 8;
   do year=1996 to 1999;
      do dept='Parts','Repairs','Tools';
         do site='New York','Atlanta','Chicago','Seattle';
            sales=ranuni(97531)*10000+2000;
            output;
         end;
      end;
   end;
run;

   /* define the footnote */
footnote1 h=3 j=r 'GR31N06  ';

   /* generate pie chart from TOTALS */
   /* and create catalog entry PIE   */
proc gchart data=totals;
   format sales dollar8.;
   pie site
       / type=sum
         sumvar=sales
         midpoints='New York' 'Chicago' 'Atlanta' 'Seattle'
         fill=solid
         cfill=green
         coutline=blue
         angle=45
         percent=inside
         value=inside
         slice=outside
         noheading
         name='gr31n06';
run;

   /* define the titles */
title1 'Total Sales';
title2 'For Period 1996-1999';

   /* execute DATA step with DSGI */
data piein;

      /* prepare SAS/GRAPH software */
      /* to accept DSGI statements  */
   rc=ginit();
   rc=graph('clear');

      /* define and activate viewport for inserted graph */
   rc=gset('viewport', 1, .15, .05, .85, .90);
   rc=gset('window', 1, 0, 0, 100, 100);
   rc=gset('transno', 1);

      /* insert graph created from GCHART procedure */
   rc=graph('insert', 'gr31n06');

      /* display graph and end DSGI */
   rc=graph('update');
   rc=gterm();
run;</PRE>
<P>
<P>
<P>
<B><I><A name="z1062411">Pie Chart Produced with the GCHART Procedure</A></I></B><BR>

<P><IMG border="0" src="./images/01329396.gif" vspace="12" alt="[IMAGE]">
<P>
<P>
<P>
<P>
<B><I><A name="z1062414">Pie Chart Inserted into DSGI Graph by Using a Viewport</A></I></B><BR>

<P><IMG border="0" src="./images/01329397.gif" vspace="12" alt="[IMAGE]">
<P>
<P>Features not explained in previous examples are described
here: 
<P>
<UL>

<LI><A name="z1082510">&#13; A graph can be created by another
SAS/GRAPH procedure
and inserted into DSGI graphics output.  In this case, the NAME= option in
the PIE statement of the GCHART procedure names the graph, 'GR31N06', to be
inserted.</A><P>

<LI><A name="z1082511">&#13; The GSET('VIEWPORT',
. . . ) function defines the section of the graphics output area into which
GR31N06 is inserted.  The dimensional ratio of the viewport should match that
of the entire graphics output area so that the inserted graph is not distorted.</A><P>

<LI><A name="z1082512">&#13; The GSET('WINDOW', .
. . ) function defines the coordinate system to be used within the viewport.
 In this example, the coordinates (0,0) to (100,100) are used.  These coordinates
provide a square area to insert the graph and preserve the aspect ratio of
the GCHART graph.</A><P>

<LI><A name="z1082513">&#13; The GSET('TRANSNO', .
. . ) function activates the transformation for the defined viewport and window.</A><P>

<LI><A name="z1082514">&#13; The GRAPH('INSERT', .
. . ) function inserts the existing graph, 'GR31N06', into the one being created
with DSGI. If no viewport has been explicitly defined, DSGI inserts the graph
into the default viewport, which is the entire graphics output area.</A><P>
</UL>

<BR><H3><A name="z1045579">Scaling Graphs by Using Windows</A></H3>


<P><A name="z1082515">&#13; 
This example uses the GPLOT procedure to generate a plot of AMOUNT*MONTH and
store the graph in a permanent catalog. DSGI then scales the graph by defining
a window in another DSGI graph and inserting the GPLOT graph into that window. </A><A href="#z1062417">Plot Produced with the GPLOT Procedure</A> shows
the plot as it is displayed with the GPLOT procedure. <A href="#z1062420">Plot Scaled by Using a Window in DSGI</A> shows how the same plot
is displayed when the <B>x</B> axis is scaled from 15 to 95 and the <B>y</B> axis is scaled from 15 to 75.  



<PRE>   /* set the graphics environment */
goptions reset=global gunit=pct border
         ftext=swissb htitle=6 htext=3
         colors=(black blue green red)
         hsize=7 in vsize=5 in
         targetdevice=pscolor;

   /* create data set EARN, which holds month */
   /* and amount of earnings for that month   */
data earn;
   input month amount;
   datalines;
1 2.1
2 3
3 5
4 6.4
5 9
6 7.2
7 6
8 9.8
9 4.4
10 2.5
11 5.75
12 4.35
;
run;

   /* define the footnote for the first graph */
footnote1 j=r 'GR31N07(a)  ';

   /* define axis and symbol characteristics */
axis1 label=(color=green 'Millions of Dollars')
      order=(1 to 10 by 1)
      value=(color=green);
axis2 label=(color=green 'Months')
      order=(1 to 12 by 1)
      value=(color=green Tick=1 'Jan' Tick=2 'Feb' Tick=3 'Mar'
             Tick=4 'Apr' Tick=5 'May' Tick=6 'Jun'
             Tick=7 'Jul' Tick=8 'Aug' Tick=9 'Sep'
             Tick=10 'Oct' Tick=11 'Nov' Tick=12 'Dec');

symbol value=M font=special height=8 interpol=join
       color=blue width=3;

   /* generate a plot of AMOUNT * MONTH,          */
   /* and store in member GR31N07                 */
proc gplot data=earn;
   plot amount*month
        / haxis=axis2
          vaxis=axis1
          name='gr31n07';
run;

   /* define the footnote and titles for       */
   /* second graph, which will scale output */
footnote1 j=r 'GR31N07(b)  ';
title1 'XYZ Corporation Annual Earnings';
title2 h=4 'Fiscal Year 1999';

   /* execute DATA step with DSGI using  */
   /* catalog entry created in previous  */
   /* plot, but do not create a data set */
   /* (determined by specifying _NULL_)  */
data _null_;

      /* prepare SAS/GRAPH software */
      /* to accept DSGI statements */
   rc=ginit();
   rc=graph('clear');

      /* define viewport and window for inserted graph */
   rc=gset('viewport', 1, .20, .30, .90, .75);
   rc=gset('window', 1, 15, 15, 95, 75);
   rc=gset('transno', 1);

      /* insert graph previously created */
   rc=graph('insert', 'gr31n07');

      /* display graph and end DSGI */
   rc=graph('update');
   rc=gterm();
run;</PRE>
<P>
<P>
<P>
<B><I><A name="z1062417">Plot Produced with the GPLOT Procedure</A></I></B><BR>

<P><IMG border="0" src="./images/01329398.gif" vspace="12" alt="[IMAGE]">
<P>
<P>
<P>
<P>
<B><I><A name="z1062420">Plot Scaled by Using a Window in DSGI</A></I></B><BR>

<P><IMG border="0" src="./images/01329399.gif" vspace="12" alt="[IMAGE]">
<P>
<P>One feature not
explained in previous examples is described
here: 
<P>
<UL>

<LI><A name="z1082519">&#13; The GSET('WINDOW', .
. . ) function scales the plot with respect to the viewport that is defined.
 The <B>x</B> axis is scaled from 15 to 95, and the <B>y</B> axis
is scaled from 15 to 75. If no viewport were explicitly defined, the window
coordinates would be mapped to the default viewport, the entire graphics output
area.</A><P>
</UL>

<BR><H3>Enlarging an Area of a Graph by Using Windows</H3>


<P><A name="z1082520">&#13;  This example
illustrates how you can enlarge a section of a graph by using windows.  In
the first DATA step, the program statements generate graphics output that
contains four pie charts.  The second DATA step defines a window that enlarges
the bottom-left quadrant of the graphics output and inserts 'GR31N08' into
that window.  The following program statements produce </A><A href="#z1062424">Four Pie Charts Generated with DSGI</A> from the first DATA step,
and <A href="#z1062427">Area of the Graph Enlarged by Using Windows</A>
from the second DATA step:  



<PRE>   /* set the graphics environment */
goptions reset=global gunit=pct border
         ftext=swissb htext=3
         colors=(black blue green red)
         hsize=7 in vsize=5 in
         targetdevice=pscolor;

   /* define the footnote for the first graph */
footnote1 j=r 'GR31N08(a)  ';

   /* execute DATA step with DSGI */
data plot;

      /* prepare SAS/GRAPH software */
      /* to accept DSGI statements  */
   rc=ginit();
   rc=graph('clear', 'gr31n08');

      /* define and draw first pie chart */
   rc=gset('filcolor', 4);
   rc=gset('filtype', 'solid');
   rc=gdraw('pie', 30, 75, 22, 0, 360);

      /* define and draw second pie chart */
   rc=gset('filcolor', 1);
   rc=gset('filtype', 'solid');
   rc=gdraw('pie', 30, 25, 22, 0, 360);

      /* define and draw third pie chart */
   rc=gset('filcolor', 3);
   rc=gset('filtype', 'solid');
   rc=gdraw('pie', 90, 75, 22, 0, 360);

      /* define and draw fourth pie chart */
   rc=gset('filcolor', 2);
   rc=gset('filtype', 'solid');
   rc=gdraw('pie', 90, 25, 22, 0, 360);

      /* display graph and end DSGI */
   rc=graph('update');
   rc=gterm();
run;

   /* define the footnote for the second graph */
footnote1 j=r 'GR31N08(b)  ';

   /* execute DATA step with DSGI   */
   /* that zooms in on a section of */
   /* the previous graph            */
data zoom;

      /* prepare SAS/GRAPH software */
      /* to accept DSGI statements  */
   rc=ginit();
   rc=graph('clear');

      /* define and activate a window     */
      /* that will enlarge the lower left */
      /* quadrant of the graph            */
   rc=gset('window', 1, 0, 0, 50, 50);
   rc=gset('transno', 1);

      /* insert the previous graph into */
      /* window 1                       */
   rc=graph('insert', 'gr31n08');

      /* display graph and end DSGI */
   rc=graph('update');
   rc=gterm();
run;</PRE>
<P>
<P>
<P>
<B><I><A name="z1062424">Four Pie Charts Generated with DSGI</A></I></B><BR>

<P><IMG border="0" src="./images/01329400.gif" vspace="12" alt="[IMAGE]">
<P>
<P>
<P>
<P>
<B><I><A name="z1062427">Area of the Graph Enlarged by Using Windows</A></I></B><BR>

<P><IMG border="0" src="./images/01329401.gif" vspace="12" alt="[IMAGE]">
<P>
<P>Features
not explained in previous examples are described
here: 
<P>
<UL>

<LI><A name="z1082524">&#13; The GSET('WINDOW', .
. . ) function defines a window into which the graph is inserted.  In this
example, no viewport is defined, so the window coordinates map to the default
viewport, which is the entire graphics output area. The result of using the
default viewport is that only the portion of the graph enclosed by the coordinates
of the window is displayed.</A><P>

<LI><A name="z1082525">&#13; The GRAPH('INSERT',
.
. . ) function inserts a graph that was previously generated with DSGI. If
you want to insert output created by DSGI, the output to be inserted must
be closed.</A><P>
</UL>

<BR><H3>Using GASK Routines in DSGI</H3>


<P><A name="z1082526">&#13;
 This example illustrates how to
invoke GASK routines and how to display the returned values in the SAS log
and write them to a data set.</A>
<P>This example assigns a predefined color to color index
2 and then invokes a GASK routine to get the name of the color associated
with color index 2. The value returned from the GASK call is displayed in
the log and written to a data set. <A href="#z1062430">Checking the Color Associated with a Particular Color Index</A> shows how the value appears in the log.
 <A href="#z1062433">Writing the Value of an Attribute to a Data Set</A>
shows how the value appears in the data set in the OUTPUT window.  



<PRE>   /* execute DATA step with DSGI */
data routine;

      /* declare character variables used */
      /* in GASK subroutines              */
   length color $ 8;

      /* prepare SAS/GRAPH software */
      /* to accept DSGI statements  */
   rc=ginit();
   rc=graph('clear');

      /* set color for color index 2 */
   rc=gset('colrep', 2, 'orange');

      /* check color associated with color index 2 and */
      /* display the value in the LOG window           */
   call gask('colrep', 2, color, rc);
   put 'Current FILCOLOR =' color;
   output;

      /* end DSGI */
   rc=graph('update');
   rc=gterm();
run;

   /* display the contents of ROUTINE */
proc print data=routine;
run;</PRE>


 

<P>
<B><I><A name="z1062430">Checking the Color Associated with a Particular Color Index</A></I></B><BR>


<TABLE border="1" cellpadding="12" cellspacing="0" bgcolor="#FAFAFA">
<TR>
<TD><PRE> 3       /* execute DATA step with DSGI */
 4    data routine;
 5
 6          /* declare character variables used */
 7          /* in GASK subroutines              */
 8       length color $ 8;
 9
 10         /* prepare SAS/GRAPH software */
 11         /* to accept DSGI statements  */
 12      rc=ginit();
 13      rc=graph('clear');
 14
 15         /* set color for color index 2 */
 16      rc=gset('colrep', 2, 'orange');
 17
 18         /* check color associated with color index 2 and */
 19         /* display the value in the LOG window           */
 20      call gask('colrep', 2, color, rc);
 21      put 'Current FILCOLOR =' color;
 22      output;
 23
 24         /* end DSGI */
 25      rc=graph('update');
 26      rc=gterm();
 27   run;

 Current FILCOLOR =ORANGE</PRE></TD></TR></TABLE>

<P>

<P>
<B><I><A name="z1062433">Writing the Value of an Attribute to a Data Set</A></I></B><BR>


<TABLE border="1" cellpadding="12" cellspacing="0" bgcolor="#FAFAFA">
<TR>
<TD><PRE>The SAS System             13:50 Tuesday, December 22, 1998   1

   Obs    color     rc

    1     ORANGE     0</PRE></TD></TR></TABLE>

<P>
<P>Features not explained in previous examples are described
here: 
<P>
<UL>

<LI><A name="z1082529">&#13; The GSET('COLREP',
. . . ) function assigns the predefined color 'ORANGE' to the color index
2.</A><P>

<LI><A name="z1082530">&#13; GASK routines check the current
value of an attribute.  In this example, the GASK('COLREP', . . . ) function
returns the color associated with color index 2.</A><P>

<LI><A name="z1082531">&#13;
  A PUT statement displays the value of the COLOR argument in
the log.</A><P>

<LI>An OUTPUT statement writes the value of COLOR
to the ROUTINE data set.<P>

<LI>The GRAPH('UPDATE') function closes the graphics
segment.<P>

<LI><A name="z1082534">&#13; The PRINT procedure displays the contents of the
ROUTINE data
set.</A><P>
</UL>

<BR><H3><A name="z1065969">Generating a Drill-down Graph Using DSGI</A></H3>


<P><A name="z1082535">&#13;   This example uses ODS processing with DSGI to generate a drill-down
graph. To get the drill-down capability, you use the GSET('HTML',...) function
to specify a URL that points to the location of the target output. This HTML
string can be used with the following graphic element types drawn in the code <B>after</B> the string is set: BAR, ELLIPSE, FILL, MARK, PIE, and TEXT. The
example uses a PIE element type.</A>
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;The
example assumes users will access the output through a file system rather
than accross the Web, so the HTML string uses a file specification rather
than a full URL. For information on bringing SAS/GRAPH output to the Web,
see <A href="z0696071.htm">Bringing SAS/GRAPH Output to the Web</A>.
For specific information about drill-down graphs, see <A href="z1025181.htm">About Drill-down Graphs</A>.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P>This example also includes a
FILENAME statement to allocate
an aggregate storage location for the HTML and GIF files produced by the code.
You should replace the term <B>path-to-Web-server</B> with the location
where you want to store the files. 
<P><A name="z1082538">&#13; In the example, the ODS
HTML statement is used to create a body
file named dsgi.htm. When file dsgi.htm is viewed in a Web browser, it displays
a solid pie chart, as shown in </A><A href="#z1066034">Drill-down Graph Generated with DSGI</A>.
To drill down to the graph shown in <A href="#z1066037">Target Output for Drill-down Graph</A>, click anywhere in the pie chart. This
example uses PROC GSLIDE to create the simple graphic that is used for the
target output:



<PRE>   /* This is the only line you have to  */
   /* change to run the program. Specify */
   /* a location in your file system.    */
filename odsout '<I>path-to-Web-server</I>';

   /* close the listing destination */
ods listing close;

   /* set the graphics environment */
goptions reset=global gunit=pct noborder
         ftitle=swissb htitle=6
         ftext=swiss htext=3
         colors=(black blue)
         hsize=5 in vsize=5 in
         device=gif;

   /* define tile and footnote for graph */
title1 'Drill-down Graph';
footnote1 j=l '  Click in pie chart'
          j=r 'GR31N10  ';

ods html body='dsgi.htm'
         path=odsout;

   /* execute DATA step with DSGI */
data _null_;
      /* prepare SAS/GRAPH software */
      /* to accept DSGI statements  */
   rc=ginit();
   rc=graph('clear');
      /* set a value for the html variable */
   rc=gset('html', 'href="blue.htm"');

      /* define and draw a pie chart */
   rc=gset('filcolor', 2);
   rc=gset('filtype', 'solid');
   rc=gdraw('pie', 55, 50, 22, 0, 360);

      /* generate graph and end DSGI */
   rc=graph('update');
   rc=gterm();
run;

goptions ftext=centb ctext=blue;

   /* open a new body file for the */
   /* target output                */
ods html body='blue.htm'
         path=odsout;

title1;
footnote1;
proc gslide wframe=4
     cframe=blue
     name='blue';
     note height=20;
     note height=10
          justify=center
          'Blue Sky';
run;
quit;

ods html close;
ods listing;</PRE>
<P>
<P>
<P>
<B><I><A name="z1066034">Drill-down Graph Generated with DSGI</A></I></B><BR>

<P><IMG border="0" src="./images/01329402.gif" vspace="12" alt="[IMAGE]">
<P>
<P>
<P>
<P>
<B><I><A name="z1066037">Target Output for Drill-down Graph</A></I></B><BR>

<P><IMG border="0" src="./images/01329403.gif" vspace="12" alt="[IMAGE]">
<P>
<P>Features not
explained in previous examples are described
here:
<P>
<UL>

<LI><A name="z1082542">&#13; FILENAME
allocates a storage location for the HTML and GIF files that are produced
by the program.</A><P>

<LI><A name="z1082543">&#13; To conserve system resources, ODS LISTING CLOSE closes
the Listing destination.</A><P>

<LI><A name="z1082544">&#13;
 On the GOPTIONS statement, DEVICE=GIF tells SAS/GRAPH to generate
a GIF file for each GRSEG that is created in the code. The GIF files are needed
to display the graphics output in a Web browser.</A><P>

<LI>On the first ODS HTML statement, BODY= specifies
a name for the file that will reference the pie chart that is generated with
DSGI. PATH= specifes the output location that was allocated by the FILENAME
statement.<P>

<LI><A name="z1082546">&#13; In the DATA
step, the presence of the GSET('HTML',...) function causes SAS/GRAPH to
create the pie chart as a drill-down graph. The HTML string <B>'href="blue.htm"'</B> will be used as the value for the HREF attribute in the image map
that SAS/GRAPH creates for the drill-down capability. The image map will be
created in the body file dsgi.htm, because that is the file that references
the pie chart. (The target output file blue.htm does not exist yet, but it
will be created by the GSLIDE procedure later in the program.)</A><P>

<LI>The second ODS HTML file specifies a new body
file. Thus, the first body file dsgi.htm is closed, and the new body file
blue.htm is opened. File blue.htm is the file that is identified as the target
output by the HREF value on the GSET('HTML',...) function.<P>

<LI>PROC GSLIDE produces the graphic that is used
as the target output for the drill-down graph.<P>

<LI><A name="z1082549">&#13; ODS HTML
CLOSE closes the HTML destination, and ODS LISTING opens the Listing destination
for subsequent output during the SAS session.</A><P>
</UL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">See Also</FONT></B></TD></TR></TABLE>

<P>
<DL>
<DT><A href="zatalogs.htm">Storing Graphics Output in SAS Catalogs</A></DT>
<DD>for an explanation of graphics catalogs
and catalog entries<P></DD>

<DT><A href="z0713550.htm">Graphics Options and Device Parameters Dictionary</A></DT>
<DD>for complete information about graphics
options<P></DD>

<DT><A href="ztlechap.htm">TITLE, FOOTNOTE, and NOTE Statements</A></DT>
<DD>for details of using the TITLE and FOOTNOTE
statements<P></DD>

<DT><A href="zonschap.htm">GOPTIONS Statement</A></DT>
<DD>for details of using the GOPTIONS
statement<P></DD>

<DT><A href="zatachap.htm">The Annotate Data Set</A></DT>
<DD>for an explanation of the Annotate
facility<P></DD>

<DT><A href="z1060538.htm">DATA Step Graphics Interface Dictionary</A></DT>
<DD>for complete information on the functions
and routines used with DSGI<P></DD>

<DT>

<B>SAS Language Reference: Dictionary</B></DT>
<DD>for information about additional functions
and statements that can be used in the DATA step<P></DD>
</DL>


<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z1060954.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1045633.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z1060670.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z1045641">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>
