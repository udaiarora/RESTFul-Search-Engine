<HTML>
<!-- This page produced Thu Jul  8 15:57:47 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Accessing External Files : Reading from External Files </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0166056.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="zwriting.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="zexf-non.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SAS Companion for the OS/390 Environment                                                                                  </FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="zreading">Reading from External Files</A></FONT></H1>


<P>After you allocate an external file, you can read from
the file in a SAS DATA step by specifying it in the INFILE statement, the
INCLUDE command, or the %INCLUDE statement.
<P>This section describes the INFILE statement.  For information
about the INCLUDE command, the %INCLUDE statement, and the DATA step, see 



<B>SAS Language Reference: Dictionary</B>.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">INFILE Statement</FONT></B></TD></TR></TABLE>

<P><A name="z0549474">&#13;   In a SAS DATA step, the INFILE statement specifies which external
file is to be read by a subsequent INPUT statement. Every external file that
you want to read must have a corresponding INFILE statement. The external
file can be a sequential data set on disk or tape, a member of a partitioned
data set (PDS or PDSE), or any of several nonstandard file types (see the
description of the <B>type</B> argument in </A><A href="#z-infsyn">INFILE Statement Syntax</A>). The file can also be entered
from a terminal.
<P>The INFILE statement is executable. Therefore, it can
be used in conditional processing--in an IF/THEN statement, for example.
<P>When multiple INFILE statements are present, the INPUT
statement reads from the external file that was specified by the most recent
INFILE statement.  (See <B>SAS Language: Reference</B> for a complete
description of the INPUT statement.)
<BR><H3><A name="z-infsyn">INFILE Statement Syntax</A></H3>


<P>This section provides a brief overview of INFILE statement
syntax. For complete information about the INFILE statement, see <A href="z2main.htm">INFILE</A>.
<P>The syntax of the INFILE
statement is
<P>
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
INFILE  <I>file-specification </I>&lt;<I>type</I>&gt;
&lt;<I>options</I>&gt;;
</TD></TR></TABLE> 
<DL>
<DT><B>file-specification</B></DT>
<DD>identifies the file.  It may be in the following
forms: 
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="BOTTOM" ><B>Form </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Example </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">fileref </TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>report</PRE></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">fileref(<B>member</B>) </TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>report(feb)</PRE></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'physical-filename'</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>'library.daily.report'</PRE></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'physical-filename(member)'</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>'library.daily.source(report1)'</PRE></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">reserved fileref </TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>DATALINES</PRE></TD>
</TR>

</TABLE>

<BR>
<P>See <A href="z2main.htm">INFILE</A>
for information about partial physical filenames and wildcard member names.<P></DD>

<DT><B>type</B></DT>
<DD>specifies the type of file.  When you omit <B>type</B>, the default is a standard external file.  Nonstandard (host-specific)
file types that you can specify for OS/390 are
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>DLI</TD>
<TD align="left">for IMS-DL/I databases.  For information
about IMS-DL/I options for the FILE statement, see 



<B>SAS/ACCESS Interface to IMS-DL/I Software</B>.</TD></TR>

<TR align=left valign="top">
<TD>HFS and PIPE</TD>
<TD align="left">for files in UNIX System Services
(see <A href="z1-hfs.htm">Accessing UNIX System Services Files</A>



).
PIPE allows you to issue UNIX System Services commands from within the INFILE
statement.</TD></TR>

<TR align=left valign="top">
<TD>IDMS</TD>
<TD align="left">specifies that the file is a CA-IDMS
file. For information about CA-IDMS options for the INFILE statement, see 



<B>SAS/ACCESS Interface to CA-IDMS Software:         Reference</B>.</TD></TR>

<TR align=left valign="top">
<TD>ISAM</TD>
<TD align="left">specifies that the file is an ISAM
file. See <A href="zexf-non.htm">Accessing Nonstandard Files</A>.</TD></TR>

<TR align=left valign="top">
<TD>VSAM</TD>
<TD align="left">for VSAM files (see <A href="zexf-non.htm#zxf-vsam">Accessing VSAM Data Sets</A>



).</TD></TR>

<TR align=left valign="top">
<TD>VTOC</TD>
<TD align="left">specifies that the Volume Table of
Contents (VTOC) is to be accessed.</TD></TR>
</TABLE>
<P></DD>

<DT><B>options</B></DT>
<DD>describe the input file's characteristics
and specify how it is to be read with an INPUT statement. Many of these options
are not host-dependent and are documented in 



<B>SAS Language Reference: Dictionary</B>. Those that are host-specific
are documented in <A href="z2main.htm">INFILE</A>.
You can use these options to do the following: 
<P>
<UL>

<LI>define variables that will contain information
about the external file<P>

<LI>specify special open and close processing<P>

<LI>specify file
characteristics.<P>
</UL>
<P></DD>
</DL>

<BR><H3>INFILE Statement Examples</H3>


<P>
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">
<CAPTION align="top"><B><I><A name="zenid-33">File Specification Examples for the INFILE Statement</A></I></B></CAPTION>


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  colspan="2" align="LEFT" valign="BOTTOM" ><B>Type of  Data Set </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B> Example </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">sequential </TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>infile 'library.daily.data';</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">member of a PDS  or PDSE</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>infile report(feb);</PRE>
<P>or<P>
<PRE>infile 'lib.daily.src(rpt1)';</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">sequential or member of a PDS or PDSE*</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>infile data;</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">IMS  </TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>infile psb dli;</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">in-stream  </TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>infile datalines;</PRE>
</TD>
</TR>

<TR valign="top" bgcolor="#FAFAD2">
<TD colspan="3">*depending on what the fileref
is associated with</TD>
</TR>
</TABLE>

<BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Reading from a Sequential File</FONT></B></TD></TR></TABLE>

<P><A name="z0549522">&#13;

This example assigns the fileref RAW to the data set MYID.RAW.DATAX and uses
the fileref in a simple DATA step:  


</A>
<PRE>filename raw 'myid.raw.datax' disp=shr;
data out;
   infile raw;
   input ... ;
run;</PRE>
<P>This example is similar to the previous one, except
that it specifies a value for the SYSPREF= system option and then uses a partially
qualified data set name in the FILENAME statement:  



<PRE>options syspref=sys2.sas7;
filename raw2 '.raw.datax' disp=shr;
data out;
   infile raw2;
   input ... ;
run;</PRE>
<P>See <A href="zspecify.htm">Specifying Physical Files</A>
for information about using SYSPREF= and partially qualified data set names.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Reading from a Member of a PDS or PDSE</FONT></B></TD></TR></TABLE>

<P><A name="z0549525">&#13;  
 This example specifies the PDS name in the FILENAME statement
and then specifies the member name in parentheses following the fileref in
the INFILE statement:  


</A>
<PRE>filename mypds 'user.my.pds';
data out;
   infile mypds(mydata);
   input ... ;
run;</PRE>
<P>This example specifies both the PDS name and the member
name in the FILENAME statement.  Therefore, only the fileref is specified
in the INFILE statement:  



<PRE>filename mymember 'user.my.pds(mydata)';
data out;
   infile mymember;
   input ... ;
run;</PRE>
<P>Multiple members of a PDS can be open for read access
at the same time.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Reading from the Terminal</FONT></B></TD></TR></TABLE>

<P><A name="z0549528">&#13; If you run SAS in
interactive line mode or in noninteractive
mode, you can read input from the terminal. These examples illustrate ways
to define a terminal file.</A>
<P>In the first example, TERMINAL is specified as the device
type in the FILENAME statement: 



<PRE>filename term1 terminal;
data one;
   infile term1;
   input ... ;
run;</PRE>
<P>In the next example, an asterisk is used in place of
an physical file name to indicate that the file will be entered from the terminal: 



<PRE>filename term2  '*';
data out;
   infile term2;
   input ... ;
run;</PRE>


 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Enter "/*" to signify end-of-file
after entering your input from the terminal.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="zxf-rcds">Reading Concatenated Data Sets</A></FONT></B></TD></TR></TABLE>

<P><A name="z0549531">&#13;
 Multiple sequential data sets can be concatenated (via a JCL
DD statement, a TSO ALLOCATE command, or a FILENAME statement) and read consecutively
using one pair of INFILE/INPUT statements.</A>
<P>Sequential data sets and individual PDS or PDSE members
can also be concatenated, as in the following example:  



<PRE>x alloc fi(in1)
   da('my.data1' 'my.pds(mem)' 'my.data2');
data mydata;
   infile in1;
   input ... ;
   /* SAS statements  */
run;</PRE>
<P>Here is an example of using the FILENAME statement to
concatenate data sets:  



<PRE>filename in1 ('my.data1' 'my.pds(mem)' 'my.data2');</PRE>
<P>You can also concatenate external files that are stored
on different types of devices and that have different characteristics.
<P>If PDSs or PDSEs are concatenated and a member is specified
in the INFILE statement, then SAS searches each PDS or PDSE for that member.
SAS searches in the order in which the PDSs appear in the DD statement, the
ALLOCATE command, or the FILENAME statement or function. If the member is
present in more than one of the PDSs, SAS retrieves the first one that it
finds.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="zxf-rmef">Reading from Multiple External Files</A></FONT></B></TD></TR></TABLE>

<P><A name="z0549536">&#13; You can
read from multiple external files either sequentially
or alternately from multiple filerefs. </A>
<P>
<UL>

<LI>To read from multiple external files sequentially,
use the END= option or the EOF= option in each INFILE statement to direct
program control to a new file after each file has been read. For example:
 



<PRE>filename outrdr sysout=a pgm=intrdr
      recfm=fb lrecl=80;
data _null_;
   length dsn $ 44;
   input dsn $;
   infile dummy filevar=dsn end=end;
   file outrdr noprint notitles;
   do until(end);
      input;
      put _infile_;
      end;
cards;
PROD.PAYROLL.JCL(BACKUP)
PROD.PAYROLL.JCL(TRANS)
PROD.PAYROLL.JCL(PRINT)
;
run;</PRE>
<P>See 



<B>SAS Language Reference: Dictionary</B> for more information about the END= and
EOF= options of the INFILE statement.<P>

<LI>In order to alternately access multiple external
files, the files must have different filerefs.  You can partially process
one file, go to a different file, and return to the original file. An INFILE
statement must be executed each time you want to access a file, even if you
are returning to a file that was previously accessed. The DATA step terminates
when SAS encounters the EOF of any of the files. Consider the following example:
 



<PRE>filename exfile1 'my.file.ex1';
filename exfile2 'my.file.ex2';
data mydata;
   infile exfile1;
   input ... ;
   /* SAS statements  */

   infile exfile2;
   input ... ;

   /* SAS statements  */

   infile exfile1;
   input ... ;

   /* SAS statements  */

run;</PRE>
<P>When there is more than one INFILE statement for the
same fileref, with options specified in each INFILE statement, the options
apply cumulatively to successive files. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Multiple
files inside concatenations cannot be accessed in this manner.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR><P>
</UL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0217257">Reading from Print Data Sets</A></FONT></B></TD></TR></TABLE>

<P><A name="z0549542">&#13;
 
 
 When reading from a print data set, you can tell SAS
to ignore the carriage-control character that is in column 1 of print data
sets by specifying the SAS system option FILECC.  For more information, see </A><A href="z-filecc.htm">FILECC</A>.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Getting Information about an Input Data Set</FONT></B></TD></TR></TABLE>

<P><A name="z0549543">&#13;In
the following example, data set information is printed
in the SAS log. Control blocks are printed in hexadecimal format. Note that
only the first 100 bytes of the JFCB are printed. The example can be used
with either a sequential data set or a PDS.  


</A>
<PRE>filename in 'user.data';
data out;
   infile in jfcb=jf dscb=ds volumes=vol
             ucbname=ucb devtype=dev;
   if (_n_ = 1) then
      put @1 'Data Set Name:' @17 jf  $52.     /
          @4 'Volume ='       @20 vol $30.     /
          @4 'JFCB ='         @20 jf  $hex200. /
          @4 'DSCB ='         @20 ds  $hex188. /
          @4 'Devtype ='      @20 dev $hex48.  /
          @4 'Device Addr ='  @20 ucb $3.      ;
run;</PRE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0166056.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="zwriting.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="zexf-non.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#zreading">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>