<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Functions and CALL Routines : RXPARSE </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0245852.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0332193.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0245943.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">RXPARSE</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0331192">RXPARSE</A></FONT></H1>

<P><HR><BR><B>Parses a pattern and returns a value</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Category:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Character String
Matching
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z0331192.htm#zid-1554"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0401434"><FONT size="2"><B>Syntax Description</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0401436"><FONT size="2"><B>Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0340786"><FONT size="2"><B>Character Classes</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0331192.htm#z0401438"><FONT size="2">Default Character Classes</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0331192.htm#z0401440"><FONT size="2">User-defined Character Classes</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0331192.htm#z0401442"><FONT size="2">Character Class Complements</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0331192.htm#z0401444"><FONT size="2">Reusing Character Classes</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0334323"><FONT size="2"><B>Pattern Abbreviations</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0341432"><FONT size="2"><B>Matching Balanced Symbols</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0325687"><FONT size="2"><B>Special Symbols</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0325693"><FONT size="2"><B>Scores</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0325695"><FONT size="2"><B>Tag Expression</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0325698"><FONT size="2"><B>Change Expressions</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0325739"><FONT size="2"><B>Change Items</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0323915"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0331192.htm#z0403826"><FONT size="2">General Information</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0331192.htm#z0334113"><FONT size="2">Using Quotation Marks in Expressions</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0325865"><FONT size="2"><B>Comparisons</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0324004"><FONT size="2"><B>Example</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0331192.htm#z0325866"><FONT size="2"><B>See Also</b></FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="zid-1554">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<I>rx</I>=<B>RXPARSE</B>(<I>pattern-expression</I>)
</TD></TR></TABLE><A name="zid-1555">&#13;</A>
<P><A name="z0845866">&#13;</A>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0401434">Syntax Description</A></FONT></B></TD></TR></TABLE>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0401436">Arguments</A></FONT></B></TD></TR></TABLE>

<DL>
<DT><B>rx</B></DT>
<DD>specifies a numeric value that is passed
to other regular expression (RX) functions and call routines. <P></DD>

<DT><B>pattern-expression</B></DT>
<DD>specifies a character constant, variable,
or expression whose value is a literal or a pattern expression. A <B>pattern-expression</B> is composed of the following
elements:
<P>
<DL>
<DT><B>string-in-quotation-marks </B></DT>
<DD>matches a substring consisting of the characters
in the string. <P></DD>

<DT><B>letter</B></DT>
<DD>matches the upper- or lowercase letter in
a substring. <P></DD>

<DT><B>digit</B></DT>
<DD>matches the digit in a substring.<P></DD>

<DT>period (.)</DT>
<DD>matches a period (.) in a substring.  <P></DD>

<DT>underscore (_)</DT>
<DD>matches an underscore (_) in a substring. <P></DD>

<DT>?</DT>
<DD>matches any one character in a substring.<P></DD>

<DT>colon (:)</DT>
<DD>matches any sequence of zero or more characters
in a substring.<P></DD>

<DT>$'<B>pattern</B>' or $"<B>pattern</B>"  </DT>
<DD>matches any one character in a substring. 
<P>
<DL>
<DT>Tip:</DT>
<DD>Ranges of alphanumeric variables are indicated
by the hyphen (-). <P></DD>

<DT>Example:</DT>
<DD>To match any lowercase letter, use 



<PRE>rx=rxparse("$'a-z'"); </PRE><P></DD>

<DT>See:</DT>
<DD><A href="#z0401440">User-defined Character Classes</A><P></DD>
</DL>
<P></DD>

<DT>~'<B>character-class</B>'
or ^'<B>character-class</B>' or ~"<B>character-class</B>" or ^"<B>character-class</B>"</DT>
<DD>matches any one character that is <B>not</B> matched by the corresponding character class. 
<P>
<DL>
<DT>Tip:</DT>
<DD>Ranges of alphanumeric variables are indicated
by a hyphen (-). <P></DD>

<DT>Example:</DT>
<DD>To <B>exclude</B> the letters a-d
from the match, use 



<PRE>rx=rxparse("^'a-d'");</PRE><P></DD>

<DT>See:</DT>
<DD><A href="#z0401442">Character Class Complements</A><P></DD>
</DL>
<P></DD>

<DT><B>pattern1
pattern2</B> or <B>pattern1</B>
|| <B>pattern2</B></DT>
<DD>selects any substring matched by pattern1
followed immediately by any substring matched by pattern2  (with no intervening
blanks).<P></DD>

<DT><B>pattern1</B> | <B>pattern2</B></DT>
<DD>selects any substring matched by pattern1
or any substring matched by pattern2. 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>Tip:</TD>
<TD align="left">You can use an exclamation point
(!) instead of a vertical bar (|). </TD></TR>
</TABLE>
<P></DD>

<DT>(<B>pattern</B>)</DT>
<DD>matches a substring that contains a pattern.
You can use parentheses to indicate the order in which operations are performed. <P></DD>

<DT>[<B>pattern</B>] or {<B>pattern</B>}</DT>
<DD>matches a substring that contains a pattern
or null string. <P></DD>

<DT><B>pattern</B>*</DT>
<DD>matches zero or more consecutive strings
matched by a pattern.<P></DD>

<DT><B>pattern</B>+</DT>
<DD>matches one or more consecutive strings
matched by a pattern. <P></DD>

<DT>@<B>int</B></DT>
<DD>matches the position of a variable if the
next character is located in the column specified by <I>int</I>.
@0 matches end-of-line. If <I>int</I> is negative, it
matches  -<I>int</I> positions from end-of-line.<P></DD>

<DT><B>reuse-character-class</B></DT>
<DD>reuses a <I>character-class</I>
you previously defined.  
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>See:</TD>
<TD align="left"><A href="#z0401444">Reusing Character Classes</A></TD></TR>
</TABLE>
<P></DD>

<DT><B>pattern-abbreviaton</B></DT>
<DD>specifies ways to shorten pattern representation. 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>See:</TD>
<TD align="left"><A href="#z0334323">Pattern Abbreviations</A>,
      
<A href="#z0401438">Default Character Classes</A> </TD></TR>
</TABLE>
<P></DD>

<DT><B>balanced-symbols</B></DT>
<DD>specifies the number of nested parentheses,
brackets, braces, or less-than/greater-than symbols in a mathematical expression. 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>See:</TD>
<TD align="left"><A href="#z0341432">Matching Balanced Symbols</A></TD></TR>
</TABLE>
<P></DD>

<DT><B>special-symbol</B></DT>
<DD>specifies a position in a string, or a score
value. 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>See:</TD>
<TD align="left"><A href="#z0325687">Special Symbols</A></TD></TR>
</TABLE>
<P></DD>

<DT><B>score-value</B></DT>
<DD>selects the pattern with the highest score
value. 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>See:</TD>
<TD align="left"><A href="#z0325693">Scores</A></TD></TR>
</TABLE>
<P></DD>

<DT>&lt;<B>pattern</B>></DT>
<DD>retrieves a matched substring for use in
a change expression. 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>See:</TD>
<TD align="left"><A href="#z0325695">Tag Expression</A></TD></TR>
</TABLE>
<P></DD>

<DT><B>change-expression</B></DT>
<DD>specifies a pattern change operation that
replaces a string containing a matched substring by concatenating values to
the replacement string. 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>See:</TD>
<TD align="left"><A href="#z0325698">Change Expressions</A></TD></TR>
</TABLE>
<P></DD>

<DT><B>change-item</B></DT>
<DD>specifies items used for string manipulation. 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>See:</TD>
<TD align="left"><A href="#z0325739">Change Items</A></TD></TR>
</TABLE>
<P></DD>
</DL>
<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0340786">Character Classes</A></FONT></B></TD></TR></TABLE>

<P><A name="z0845949">&#13;Using a character class element is a shorthand method for specifying
a range of values for matching. In pattern matching, you can </A>
<P>
<UL>

<LI>use default character classes<P>

<LI>define your own
character classes <P>

<LI>use character class complements<P>

<LI>reuse character classes.<P>
</UL>
 
<BR><H3><A name="z0401438">Default Character Classes</A></H3>


<P><A name="z0845954">&#13;You specify
a default character class with a dollar sign ($) followed by a single upper-
or lowercase letter. In the following list, the character class is listed
in the left column and the definition is listed in the right column.  </A>
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>$a or $A</TD>
<TD align="left">matches any alphabetic upper- or
lowercase letter in a substring ($'a-zA-Z'). </TD></TR>

<TR align=left valign="top">
<TD>$c or $C</TD>
<TD align="left">matches any character allowed in
a version 6 SAS name that is found in a substring ($'0-9a-zA-Z_'). </TD></TR>

<TR align=left valign="top">
<TD>$d or $D</TD>
<TD align="left">matches any digit in a substring
($'0-9').</TD></TR>

<TR align=left valign="top">
<TD>$i or $I</TD>
<TD align="left">matches any initial character in
a version 6 SAS name that is found in a substring ($'a-zA-Z_').</TD></TR>

<TR align=left valign="top">
<TD>$l or $L</TD>
<TD align="left">matches any lowercase letter in a
substring ($'a-z').</TD></TR>

<TR align=left valign="top">
<TD>$u or $U</TD>
<TD align="left">matches any uppercase letter in a
substring ($'A-Z').</TD></TR>

<TR align=left valign="top">
<TD>$w or $W</TD>
<TD align="left">matches any white space character,
such as blank, tab, backspace, carriage return, etc., in a substring. </TD></TR>

<TR align=left valign="top">
<TD>See also:</TD>
<TD align="left"><A href="#z0401442">Character Class Complements</A></TD></TR>
</TABLE>

<P><B>Note:</B>&nbsp;&nbsp;&nbsp;A
hyphen appearing at the beginning
or end of a character class is treated as a member of the class rather than
as a range symbol. &nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR> 
<P>This statement and these values produce these matches.
 



<PRE>rx=rxparse("$<I>character-class</I>");</PRE>
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Pattern</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Input string</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Position of match</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Value of match</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>$L or $l</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>3+Y STRIkeS</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">9</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>k</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>$U or $u</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>0*5x49XY</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">7</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>X (uppercase)</PRE>
</TD>
</TR>

</TABLE>

<BR> 
<P>The following example shows how to use a default character
class in a DATA step. 
<PRE>data _null_;
   stringA='3+Y STRIkeS';
   rx=rxparse("$L");
   matchA = rxmatch(rx,stringA);
   valueA=substr(stringA,matchA,1);
   put 'Example A: ' matchA = valueA= ;
run;

data _null_;
   stringA2='0*5x49XY';
   rx=rxparse("$u");
   matchA2 = rxmatch(rx,stringA2);
   valueA2 = substr(stringA2, matchA2,1);
   put 'Example A2: ' matchA2 = valueA2= ;
run;</PRE>
<P>The SAS log shows the following results:
<PRE>Example A: matchA=9 valueA=k
Example A2: matchA2=7 valueA2=X</PRE>
<BR><H3><A name="z0401440">User-defined Character Classes</A></H3>


<P><A name="z0845982">&#13;A user-defined
character class begins with a dollar sign ($) and is followed by a string
in quotation marks. A character class matches any one character within the
quotation marks. </A>
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Ranges of values are indicated by a hyphen (-). &nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P>This statement and these values produce these matches. 



<PRE>rx=rxparse("$'<I>pattern</I>'");</PRE>
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Pattern</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Input string</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Position of match</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Value of match</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>$'abcde'</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>3+yE strikes</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">11</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>e</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>$'1-9'</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>z0*549xy</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">4</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>5</PRE>
</TD>
</TR>

</TABLE>

<BR>
<P>The following example shows how to use a user-defined
character class in a DATA step. 



<PRE>data _null_;
   stringB='3+yE strikes';
   rx=rxparse("$'abcde'");
   matchB = rxmatch(rx,stringB);
   valueB=substr(stringB,matchB,1);
   put 'Example B: ' matchB= valueB= ;
run;

data _null_;
   stringB2='z0*549xy';
   rx=rxparse("$'1-9'");
   matchB2=rxmatch(rx,stringB2);
   valueB2=substr(stringB2,matchB2,1);
   put 'Example B2: ' matchB2= valueB2= ;
run;</PRE>
<P>The SAS log shows the following results: 
<PRE>Example B: matchB=11 valueB=e
Example B2: matchB2=4 valueB2=5</PRE>
<P> You can also define your own character class complements.
For details about character class complements, see <A href="#z0401442">Character Class Complements</A>. 
<BR><H3><A name="z0401442">Character Class Complements</A></H3>


<P><A name="z0845994">&#13;A character
class complement begins with a caret (^) or a tilde (~) and is followed by
a string in quotation marks. A character class complement matches any one
character that is <B>not</B> matched by the corresponding character
class. For details about character classes, see </A><A href="#z0340786">Character Classes</A>.
<P>This statement and these values produce these
matches. 



<PRE>rx=rxparse(<I>^character-class</I> | <I>~character-class</I>);</PRE>
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Pattern</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Input string</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Position of match</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Value of match</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>^u or ~u</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>0*5x49XY</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">1</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>0</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>^'A-z' or
~'A-z'</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>Abc de45</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">4</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>the first space</PRE>
</TD>
</TR>

</TABLE>

<BR> 
<P>The following example shows how to use a character class
complement in a DATA step. 



<PRE>data _null_;
   stringC='0*5x49XY';
   rx=rxparse('^u');
   matchC = rxmatch(rx,stringC);
   valueC=substr(stringC,matchC,1);
   put 'Example C: ' matchC = valueC=;
run;

data _null_;
   stringC2='Abc de45';
   rx=rxparse("~'A-z'");
   matchC2=rxmatch(rx,stringC2);
   valueC2=substr(stringC2,matchC2,1);
   put 'Example C2: ' matchC2= valueC2= ;
run;</PRE>
<P>The SAS log shows the following results: 



<PRE>Example C: matchC=1 valueC=0
Example C2: matchC2=4 valueC2=</PRE>
<BR><H3><A name="z0401444">Reusing Character Classes</A></H3>


<P><A name="z0846005">&#13;You can
reuse character classes you previously defined by using one of the following
patterns:</A>
<DL>
<DT>$<B>int</B></DT>
<DD>reuses the <I>int</I><SUP>th</SUP> character class. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><I>int</I> is a nonzero integer. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you defined a character
class in a pattern and want to use the same character class again in the same
pattern, use $<I>int</I> to refer to the <I>int</I><SUP>th</SUP> character class you defined.
If <I>int</I> is negative, count backwards from the
last pattern to identify the character class for -<I>int</I>.
For example, 



<PRE>rx=rxparse("$'AB' $1 $'XYZ' $2 $-2");</PRE>is
equivalent to 



<PRE>rx=rxparse("$'AB' $'AB' $'XYZ' $'XYZ' $'AB'");</PRE>
<P>
<UL>

<LI>The $1 element in the first code sample is replaced
by AB in the second code sample, because AB was the first pattern defined.<P>

<LI>The $2 element in the first code sample is replaced
by XYZ in the second code sample, because XYZ was the second pattern defined. <P>

<LI>The $-2 element in the first code sample is replaced
by AB in the second code sample, because AB is the second-to-the-last pattern
defined. <P>
</UL>
 </TD>
</TABLE>
<P></DD>

<DT>~<B>int</B> or ^<B>int</B></DT>
<DD>reuses the complement of the <I>int</I>'th character class. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><I>int</I> is a nonzero integer. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This example shows character-class
elements ($'Al', $'Jo', $'Li') and reuse numbers ($1, $2, $3, ~2): 



<PRE>rx=rxparse($'Al' $1 $'Jo' $2 $'Li' $3 ~2);</PRE>is equivalent to 



<PRE>rx=rxparse($'Al' $'Al' $'Jo' $'Jo' 
           $'Li' $'Li' $'Al' $'Li');</PRE>The ~2 matches patterns 1 (Al)
and 3 (Li), and excludes pattern 2 (Jo).  </TD>
</TABLE>
<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0334323">Pattern Abbreviations</A></FONT></B></TD></TR></TABLE>

<P><A name="z0846017">&#13;You can use the following list of elements in your pattern:
 </A>
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>$f or $F</TD>
<TD align="left">matches a floating point number. </TD></TR>

<TR align=left valign="top">
<TD>$n or $N</TD>
<TD align="left">matches a SAS name.</TD></TR>

<TR align=left valign="top">
<TD>$p or $P</TD>
<TD align="left">indicates a prefix option. </TD></TR>

<TR align=left valign="top">
<TD>$q or $Q</TD>
<TD align="left">matches a string in quotation marks. </TD></TR>

<TR align=left valign="top">
<TD>$s or $S</TD>
<TD align="left">indicates a suffix option. </TD></TR>
</TABLE>

<P>This statement and input string produce these matches.



<PRE>rx=rxparse($<I>pattern-abbreviation</I> <I>pattern</I>);</PRE>
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Pattern</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Input string</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Position of match</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Value of match</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>$p wood</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>woodchucks eat
 wood</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">1</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>characters
"wood" in
 woodchucks</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>wood $s</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>woodchucks eat
 wood</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">20</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>wood</PRE>
</TD>
</TR>

</TABLE>

<BR> 
<P>The following example shows how to use a pattern abbreviation
in a DATA step. 
<PRE>data _null_;
  stringD='woodchucks eat firewood';
  rx=rxparse("$p 'wood'");
  PositionOfMatchD=rxmatch(rx,stringD);
  call rxsubstr(rx,stringD,positionD,lengthD);
  valueD=substr(stringD,PositionOfMatchD);
  put 'Example D: ' lengthD= valueD= ;
run;

data _null_;
  stringD2='woodchucks eat firewood';
  rx=rxparse("'wood' $s");
  PositionOfMatchD2=rxmatch(rx,stringD2);
  call rxsubstr(rx,stringD2,positionD2,lengthD2);
  valueD2=substr(stringD2,PositionOfMatchD2);
  put 'Example D2: ' lengthD2= valueD2= ;
run;</PRE>
<P>The SAS log shows the following results: 



<PRE>Example D: lengthD=4 valueD=woodchucks eat firewood
Example D2: lengthD2=4 valueD2=wood</PRE>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0341432">Matching Balanced Symbols</A></FONT></B></TD></TR></TABLE>

<P><A name="z0846039">&#13;You can match
mathematical expressions
containing multiple sets of balanced parentheses, brackets, braces, and less-than/greater-than
symbols. Both the symbols and the expressions within the symbols are part
of the match:</A>
<DL>
<DT>$(<I>int</I>) or $[<I>int</I>] or ${<I>int</I>} or
$&lt;<I>int</I>></DT>
<DD>indicates the <I>int</I>
level of nesting you specify. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><I>int</I> is a positive integer. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Using smaller values increases
the efficiency of finding a match. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This statement and input
string produces this match.



<PRE>rx=rxparse("$(2)");</PRE>
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Input string</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Position of match</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Value of match</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>(((a+b)*5)/43)</PRE></TD>
  
<TD  align="LEFT" valign="TOP">2</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>((a+b)*5)</PRE></TD>
</TR>

</TABLE>

<BR></TD>
</TABLE>
<P></DD>
</DL>

<P>The following example shows how to use
mathematical
symbol matching in a DATA step. 



<PRE>data _null_;
   stringE='(((a+b)*5)/43)';
      rx=rxparse("$(2)");
      call rxsubstr(rx,stringE,positionE,lengthE);
      PositionOfMatchE=rxmatch(rx,stringE);
      valueE=substr(stringE,PositionOfMatchE);
      put 'Example E: ' lengthE= valueE= ;
run;</PRE>
<P>The SAS log shows the following results: 



<PRE>Example E: lengthE=9 valueE=((a+b)*5)/43)</PRE>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0325687">Special Symbols</A></FONT></B></TD></TR></TABLE>

<P><A name="z0846049">&#13;You can use the following list of special
symbols in your pattern: </A>
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>\</TD>
<TD align="left">sets the beginning of a match to
the current position. </TD></TR>

<TR align=left valign="top">
<TD>/</TD>
<TD align="left">sets the end of a match to the current
position. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If  you use a backward
slash (\) in one alternative of a union (|), you must use a forward slash
( /) in all alternatives of the union, or in a position preceding or following
the union.  </TD>
</TABLE>
</TD></TR>

<TR align=left valign="top">
<TD>$#</TD>
<TD align="left">requests the match with the highest
score, regardless of the starting position. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The position of this symbol
within the pattern is not significant. </TD>
</TABLE>
</TD></TR>

<TR align=left valign="top">
<TD>$- </TD>
<TD align="left">scans a string from right to left. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The position of this symbol
within the pattern is not significant. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Do not confuse a hyphen
(-) used to scan a string with a hyphen used in arithmetic operations.</TD>
</TABLE>
</TD></TR>

<TR align=left valign="top">
<TD>$@</TD>
<TD align="left">requires the match to begin where
the scan of the text begins. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The position of this symbol
within the pattern is not significant. </TD>
</TABLE>
</TD></TR>
</TABLE>

<P>The following table shows how a pattern matches an input
string.  
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Pattern</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Input string</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Value of match</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>c\ow</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>How now brown cow?</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>characters "ow"
in cow</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>ow/n</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>How now brown cow?</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>characters "ow"
in brown</PRE>
</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">
<PRE>@3:\ow</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>How now brown cow?</PRE>
</TD>
  
<TD  align="LEFT" valign="TOP">
<PRE>characters "ow"
in now</PRE>
</TD>
</TR>

</TABLE>

<BR>  
<P>The following example shows how to use special symbol
matching in a DATA step. 



<PRE>data _null_;
   stringF='How now brown cow?';
   rx=rxparse("$'c\ow'");
   matchF=rxmatch(rx,stringF);
   valueF=substr(stringF,matchF,2);
   put 'Example F= ' matchF= valueF= ;
run;  

data _null_;
   stringF2='How now brown cow?';
   rx=rxparse("@3:\ow");
   matchF2=rxmatch(rx,stringF2);
   valueF2=substr(stringF2,matchF2,2);
   put 'Example F2= ' matchF2= valueF2= ;
run; </PRE>
<P>The SAS log shows the following results: 



<PRE>Example F= matchF=2 valueF=ow
Example F2= matchF2=6 valueF2=ow</PRE>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0325693">Scores</A></FONT></B></TD></TR></TABLE>

<P><A name="z0846078">&#13;When a pattern is matched by more than one substring beginning
at a specific position, the longest substring is selected. To change the selection
criterion, assign a score value to each substring by using the pound sign
(#) special symbol followed by an integer. </A>
<P>The score for any substring begins at zero. When <I>#int</I> is encountered in the pattern, the value of
<I>int</I> is added to the score. If two or more matching substrings
begin at the same leftmost position, SAS selects the substring with the highest
score value. If two substrings begin at the same leftmost position and have
the same score value, SAS selects the longer substring. The following is a
list of score representations: 
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>#<B>int</B></TD>
<TD align="left">adds <B>int</B> to the score,
where <B>int</B> is a positive or negative integer. </TD></TR>

<TR align=left valign="top">
<TD>#*<B>int</B></TD>
<TD align="left">multiplies the score by nonnegative <B>int</B>.</TD></TR>

<TR align=left valign="top">
<TD>#/<B>int</B></TD>
<TD align="left">divides the score by positive <B>int</B>. </TD></TR>

<TR align=left valign="top">
<TD>#=<B>int</B></TD>
<TD align="left">assigns the value of <B>int</B>
to the score. </TD></TR>

<TR align=left valign="top">
<TD>#><B>int</B></TD>
<TD align="left">finds a match if the current score
exceeds <B>int</B>. </TD></TR>
</TABLE>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0325695">Tag Expression</A></FONT></B></TD></TR></TABLE>

<P><A name="z0846090">&#13;You can assign a substring of the string being searched to a
character variable with the expression 


</A><CODE><B><I>name</I>=&lt;<I>pattern</I>></B></CODE>, where <I>pattern</I> specifies any pattern expression. The substring matched
by this expression is assigned to the variable <I>name</I>. 
<P>If you enclose a pattern in less-than/greater-than symbols
(&lt;>) and do not specify a variable name, SAS automatically assigns the
pattern to a variable. SAS assigns the variable _1 to the first occurrence
of the pattern, _2 to the second occurrence, etc. This assignment is called
tagging. SAS tags the corresponding substring of the matched string. 
<P>The following shows the syntax of a tag expression:

<DL>
<DT>&lt;<I>pattern</I>></DT>
<DD>specifies a pattern expression. SAS assigns
a variable to each occurrence of <I>pattern</I> for
use in a change expression.       <P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0325698">Change Expressions</A></FONT></B></TD></TR></TABLE>

<P><A name="z0846095">&#13;If you find a substring that matches a pattern, you can change
the substring to another value. You must specify the pattern expression, use
the TO keyword, and specify the change expression in the argument for RXPARSE.
You can specify a list of pattern change expressions by separating each expression
with a comma. </A>
<P>A pattern change operation replaces a matched string
by concatenating values to the replacement string. The operation concatenates 
<P>
<UL>

<LI>all characters to the left of the
match<P>

<LI>the characters specified in the change expression<P>

<LI>all characters to the right of the
match.<P>
</UL>

<P>You can have multiple parallel operations within the
RXPARSE argument. In the following example, 



<PRE>rx=rxparse("x TO y, y TO x");</PRE>


<CODE><B>x</B></CODE>  in a substring
is substituted for 


<CODE><B>y</B></CODE>, and 


<CODE><B>y</B></CODE> in a substring is substituted
for 


<CODE><B>x</B></CODE>. 
<P>A change expression can include the items in the following
list. Each item in the list is followed by the description of the value concatenated
to the replacement string at the position of the pointer. 
<DL>
<DT>string in quotation marks</DT>
<DD>concatenates the contents of the string.<P></DD>

<DT>name</DT>
<DD>concatenates the name, possibly in a different
case.<P></DD>

<DT>number</DT>
<DD>concatenates the number.<P></DD>

<DT>period (.)</DT>
<DD>concatenates the period (.).<P></DD>

<DT>underscore (_)</DT>
<DD>concatenates the underscore (_). <P></DD>

<DT>=<I>int</I></DT>
<DD>concatenates the value of the <I>int</I><SUP>th</SUP> tagged substring if <I>int</I> is positive, or the
-<I>int</I><SUP>th</SUP>-from-the-last tagged substring if <I>int</I>
is negative. In a parallel change expression, the <I>int</I><SUP>th</SUP> or -<I>int</I><SUP>th</SUP>-from-the-last
tag is counted within the component of the parallel change expression that
yielded the match, and not over the entire parallel change expression.<P></DD>

<DT>==</DT>
<DD>concatenates the entire matched substring.<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0325739">Change Items</A></FONT></B></TD></TR></TABLE>

<P><A name="z0846116">&#13;You can use the items in the following list to manipulate the
replacement string. The items position the cursor without affecting the replacement
string.</A>
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>@<B>int</B></TD>
<TD align="left">moves the pointer to column <I>int</I> where the next string added to the replacement string will
start. </TD></TR>

<TR align=left valign="top">
<TD>@=</TD>
<TD align="left">moves the pointer one column past
the end of the matched substring. </TD></TR>

<TR align=left valign="top">
<TD>><B>int</B></TD>
<TD align="left">moves the pointer to the right to
column <I>int</I>. If the pointer is already to the
right of column <I>int</I>, the pointer is not moved.</TD></TR>

<TR align=left valign="top">
<TD>>=</TD>
<TD align="left">moves the pointer to the right, one
column past the end of the matched substring.  </TD></TR>

<TR align=left valign="top">
<TD>&lt;<B>int</B></TD>
<TD align="left">moves pointer to the left to column <I>int</I>. If the pointer is already to the left of column <I>int</I>, the pointer is
not moved. </TD></TR>

<TR align=left valign="top">
<TD>&lt;=</TD>
<TD align="left">moves the pointer to the left, one
column past the end of the matched substring. </TD></TR>

<TR align=left valign="top">
<TD>+<B>int</B></TD>
<TD align="left">moves the pointer <I>int</I> columns to the right. </TD></TR>

<TR align=left valign="top">
<TD>-<B>int</B></TD>
<TD align="left">moves the pointer <I>int</I> columns to the left. </TD></TR>

<TR align=left valign="top">
<TD>-L</TD>
<TD align="left">left-aligns the result of the previous
item or expression in parentheses. </TD></TR>

<TR align=left valign="top">
<TD>-R</TD>
<TD align="left">right-aligns the result of the previous
item or expression in parentheses. </TD></TR>

<TR align=left valign="top">
<TD>-C</TD>
<TD align="left">centers the result of the previous
item or expression in parentheses. </TD></TR>

<TR align=left valign="top">
<TD>*<B>int</B></TD>
<TD align="left">repeats the result of the previous
item or expression in parentheses <I>int</I>-1 times,
producing a total of <I>int</I> copies. </TD></TR>
</TABLE>


<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0323915">Details</A></FONT></B></TD></TR></TABLE>

<BR><H3><A name="z0403826">General Information</A></H3>


<UL>

<LI>When creating a pattern for matching, make the
pattern as short as possible for greater efficiency. The time required for
matching is roughly proportional to the length of the pattern times the length
of the string that is searched. <P>

<LI>The algorithm used by the regular expression (RX)
functions and CALL routines is a nondeterministic finite automaton. <P>
</UL>

<BR><H3><A name="z0334113">Using Quotation Marks in Expressions</A></H3>


<UL>

<LI><A name="z0846143">&#13;To specify a literal that begins with a single quotation mark,
use two single quotation marks instead of one.</A><P>

<LI>Literals inside a pattern must be enclosed by
another layer of quotation marks. For example,


<CODE><B> " 'O' '' connor"</B></CODE> matches an uppercase O, followed by a
single quotation mark, followed by the letters "connor" in either upper or
lower case.<P>
</UL>

<P>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0325865">Comparisons</A></FONT></B></TD></TR></TABLE>

<P> The regular expression (RX) functions
and CALL routines work together to manipulate strings that match patterns.
Use the RXPARSE function to parse a pattern you specify. Use the RXMATCH function
and the CALL RXCHANGE and CALL RXSUBSTR routines to match or modify your data.
Use the CALL RXFREE routine to free allocated space. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Use RXPARSE  only with other regular expression (RX) functions and CALL
routines.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0324004">Example</A></FONT></B></TD></TR></TABLE>

<P><A name="z0846148">&#13;The following example uses RXPARSE to parse an input
string and
change the value of the string. 


</A>
<PRE>data test; 
   input string $;
   datalines;
abcxyzpq
xyyzxyZx
x2z..X7z
;

data _null_;
  set;
  length to $20;
  if _n_=1 then 
     rx=rxparse("` x &lt; ? > 'z' to ABC =1 '@#%'");
  retain rx;
  drop rx;
  put string=;
  match=rxmatch(rx,string);
     put @3 match=;
  call rxsubstr(rx,string,position);
     put @3 position=;
  call rxsubstr(rx,string,position,length,score);
     put @3 position= Length= Score=;
  call rxchange(rx,999,string,to);
     put @3 to=;
  call rxchange(rx,999,string);
     put @3 'New ' string=;
run;</PRE>
<P>

<TABLE border="1" cellpadding="12" cellspacing="0" bgcolor="#FAFAFA">
<TR>
<TD><PRE>      cpu time            0.05 seconds
      
1  data test;
2     input string $;
3     datalines;
NOTE: The data set WORK.TEST has 3 observations and 1 variables.
NOTE: DATA statement used:
      real time           0.34 seconds
      cpu time            0.21 seconds
      
7  ;
8  
9  data _null_;
10    set;
11    length to $20;
12    if _n_=1 then
13       rx=rxparse("` x &lt; ? > 'z' to ABC =1 '@#%'");
14    retain rx;
15    drop rx;
16    put string=;
17    match=rxmatch(rx,string);
18       put @3 match=;
19    call rxsubstr(rx,string,position);
20       put @3 position=;
21    call rxsubstr(rx,string,position,length,score);
22       put @3 position= Length= Score=;
23    call rxchange(rx,999,string,to);
24       put @3 to=;
25    call rxchange(rx,999,string);
26       put @3 'New ' string=;
27  run;
string=abcxyzpq
  match=4
  position=4
  position=4 length=3 score=0
  to=abcabcy@#%pq
  New string=abcabcy@
string=xyyzxyZx
  match=0
  position=0
  position=0 length=0 score=0
  to=xyyzxyZx
  New string=xyyzxyZx
string=x2z..X7z
  match=1
  position=1
  position=1 length=3 score=0
  to=abc2@#%..Abc7@#%
  New string=abc2@#%.
NOTE: DATA statement used:
      real time           0.67 seconds
      cpu time            0.45 seconds
      </PRE></TD></TR></TABLE>

<P>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><FONT size="5"><A name="z0325866">See Also</A></FONT>
</FONT></B></TD></TR></TABLE>
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>Functions and CALL routines: 



<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD><A href="z0332495.htm">CALL RXCHANGE</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0332110.htm">CALL RXFREE</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0332193.htm">RXMATCH</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0332378.htm">CALL RXSUBSTR</A></TD></TR></TABLE></TD></TR>
<TR valign="top"><TD></TD><TD>Aho,
Hopcroft, and Ullman, Chapter 9 (See
<A href="z1019314.htm">References</A>)</TD></TR></TABLE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0245852.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0332193.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0245943.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0331192">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>