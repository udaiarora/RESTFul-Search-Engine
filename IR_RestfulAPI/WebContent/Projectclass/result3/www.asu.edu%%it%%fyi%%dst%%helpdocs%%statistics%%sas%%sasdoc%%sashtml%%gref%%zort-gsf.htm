<HTML>
<!-- This page produced Fri Jul  9 14:14:38 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>SAS/GRAPH Output : Exporting SAS/GRAPH Output with Program Statements </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0696063.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="zractive.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0762619.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SAS/GRAPH Software: Reference                                                                                             </FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="zort-gsf">Exporting SAS/GRAPH Output with Program Statements</A></FONT></H1>


<P><A name="z0748245">&#13;  When you use program
statements to create external files for your SAS/GRAPH output,
you use one of these processes: </A>
<P>
<UL>

<LI>create one file that contains one graph<P>

<LI>create one file that contains multiple
graphs<P>

<LI>create multiple files that each contain one graph.<P>
</UL>

<P>You can send the graphics output to
external files either
at the time you run the program that creates the graphs, or later when you
replay them from the catalog in which they are stored. For this reason, these
methods are most useful for processing large quantities of output. In addition,
using program statements allows you to specify exactly the device driver you
want and is therefore a more flexible and powerful way of exporting SAS/GRAPH output.
<P>The following sections provide some information
common
to all the processes and then describes each process in detail.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">General Information</FONT></B></TD></TR></TABLE>

<BR><H3>Common Requirements</H3>


<P>Regardless of the process you use to create a GSF from
a SAS/GRAPH program, you must specify
the following: 
<P>
<UL>

<LI>a destination for the output. This can be an aggregate
file storage location (for example, a  directory or a partitioned data set)
or a specific file. Typically you specify the destination with a FILENAME
statement and one or more graphics options. For more information, see <A href="zs-parts.htm#zilename">FILENAME Statement</A>.<P>

<LI>a
device driver that creates the type of graphics
output that you want.<P>

<LI>whether SAS/GRAPH should
replace an existing file or append new records to it. By default, SAS/GRAPH replaces
an existing file with newly created output <B>of the same name</B>.
For details, see <A href="#z0762614">Replacing Existing External Files</A>.<P>
</UL>

<P>Each requirement is explained in detail in the
individual
process descriptions.
<BR><H3>Naming the Output</H3>


<P>When you are working with both catalog entries and external
files, you should understand how both types of output are named.
<BR><H3>Using the NAME= option</H3>


<P>You can use the NAME= option in the SAS/GRAPH procedure
to specify a name for the catalog entry that the procedure generates. How
this name is used depends on whether the FILENAME statement points to a specific
external file or to an aggregate file storage location. 
<P>
<UL>

<LI>If you specify a specific filename for the external
file and also use the NAME= option, the external file is assigned the name
specified in the FILENAME statement and NAME= controls only the name given
to the created catalog entry.  When you specify the filename, you should include
the appropriate file extension, such as .CGM, .GIF, or .PS).<P>

<LI>If you specify an aggregate file storage location
instead of a specific filename, and also use the NAME= option, the name of
the external file is built from the name of the catalog entry, which is determined
by the value of NAME=.  In this case, SAS/GRAPH supplies
the appropriate file extension.<P>
</UL>

<P>See <A href="#z0762683">How SAS/GRAPH Generates Entry Names and File Names</A>
for examples.
<BR><H3><A name="z0696077">Using the default output name</A></H3>


<P>If you omit NAME=, SAS/GRAPH uses
the default naming convention to name the catalog entry, and in some cases
the external file.  This convention uses up to eight characters of the procedure
name as the base name for the catalog entry. If the name generated by the
procedure duplicates an existing entry, the name is incremented, for example,
GCHART, GCHART1, GCHART2, and so forth. For details, see the description of
the NAME= option for a specific procedure. 
<P>
<UL>

<LI>If you specify a specific filename for the external
file and omit the NAME= option, the external file uses the name specified
in the FILENAME statement and the catalog entry uses the default name. When
you specify the filename, you should include the appropriate file extension,
such as .CGM, .GIF, or .PS.<P>

<LI>If you specify an aggregate file storage location
instead of a specific filename, and omit the NAME= option, both the catalog
entry and the external file use the default name and SAS/GRAPH supplies
the appropriate file extension.<P>
</UL>

<P>See <A href="#z0762683">How SAS/GRAPH Generates Entry Names and File Names</A>
for examples.
<BR><H3>File extensions</H3>


<P>When you send SAS/GRAPH output
to an aggregate file storage location, SAS/GRAPH generates
the name of the external file by taking the catalog entry name and adding
the appropriate file extension. Most drivers provide a default extension.
If a driver does not generate an extension, SAS/GRAPH uses
the default extension .GSF. To specify a different extension from the one SAS/GRAPH provides,
use the EXTENSION= graphics option. (For details, see <A href="ztension.htm">EXTENSION=</A>).
<BR><H3>Example</H3>


<P>illustrates how SAS/GRAPH generates
names for catalog entries and external files, depending on 1) whether the
NAME= option is used, and 2) on the fileref specification.  This illustration
assumes the GSLIDE procedure and DEV=GIF: 
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">
<CAPTION align="top"><B><I><A name="z0762683">How SAS/GRAPH Generates Entry Names and File Names</A></I></B></CAPTION>


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B><A name="z0762683">&#13;<B>If...</B></A></B></TH>
  <TH  align="LEFT" valign="TOP" ><B><B>And...</B></B></TH>
  <TH  align="LEFT" valign="TOP" ><B><B>Then</B></B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NAME='FRED'</TD>
  
<TD  align="LEFT" valign="TOP">fileref points to a file named 'MYSLIDE.GIF'</TD>
  
<TD  align="LEFT" valign="TOP">catalog entry name: FRED<P>external file name: MYSLIDE.GIF</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NAME='FRED'</TD>
  
<TD  align="LEFT" valign="TOP">fileref points to a storage location (for example, a
directory)</TD>
  
<TD  align="LEFT" valign="TOP">catalog entry name: FRED<P>external file name: FRED.GIF</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NAME= (not specified)</TD>
  
<TD  align="LEFT" valign="TOP">fileref points to a file named 'MYSLIDE.GIF'</TD>
  
<TD  align="LEFT" valign="TOP">catalog entry name: GSLIDE<P>external file name: MYSLIDE.GIF</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NAME= (not specified)</TD>
  
<TD  align="LEFT" valign="TOP">fileref points to a storage location (for example, a
directory)</TD>
  
<TD  align="LEFT" valign="TOP">catalog entry name: GSLIDE<P>external file name:
GSLIDE.GIF</TD>
</TR>

</TABLE>

<BR>
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;When the fileref points to an aggregate
file storage location, the name of the catalog entry <B>always</B> determines
the name of the external file.  It does not matter whether the catalog entry
name is the default name or a name assigned by NAME=.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P><DL>
<DT><B><FONT color="FF00007">CAUTION:</FONT></B></DT><DD><B>If the graph created by the program
already exists in the catalog, a new catalog entry with an incremented name
will be created and a new external file may be created rather than updating
the existing file.</B>
&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"></DD></DL> You cannot replace individual entries in a catalog;
therefore, to replace an entry you must first delete the entry and then re-create
it. Therefore, even though the contents of the external file are replaced,
the catalog entry is not.  Each time you submit the program, a new entry is
created and the catalog entry name is incremented.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z-gsfone">Saving One Graph to a File</A></FONT></B></TD></TR></TABLE>

<P><A name="z0748271">&#13;The simplest
way to save one
graph to a file is to use the FILENAME statement, the GSFNAME= graphics option,
and the default setting GSFMODE=REPLACE to create one graphics stream file.
These steps describe the general process: </A>
<OL START="1" type="1">
<LI>Use a FILENAME statement to define a fileref for
the external file where you want to send the output. The file name must be
the complete physical name of the external file and should include a file
extension that indicates what type of graphics file you are creating, for
example .GIF for a GIF file.<P>

<LI>Assign the fileref to the GSFNAME= graphics option.<P>

<LI>Specify the device driver with the
DEVICE= graphics
option.<P>

<LI>Use the default setting GSFMODE=REPLACE so that SAS/GRAPH produces
only one graph per file (unless BY-group processing is in effect).  Because
REPLACE is the default setting, you can omit GSFMODE=.<P>

<LI>Submit the SAS/GRAPH
program.<P>
</OL>

<P><B>Note:</B>  The GSF remains open while the SAS/GRAPH procedure
is running.  Be sure to end the procedure by submitting another procedure
step, DATA step, or QUIT statement. To be really safe, you can submit a FILENAME <I>fileref</I> CLEAR; statement to explicitly close the
GSF.
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;On certain systems, other
graphics options may be required.  For more information
on creating a graphics stream file, refer to the SAS Help facility for SAS/GRAPH Device
Drivers for your operating environment.  &nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom">
<BR><H3>Example</H3>


<P>This example creates one GSF that contains one text
slide created by a group of TITLE and FOOTNOTE statements and the GSLIDE procedure.
 
<P><B>Define the fileref.</B> The FILENAME statement
associates the fileref GRAFOUT with the external file that is the destination
for the GSF. The file extension .PS indicates that the graphics output is
PostScript.



<PRE>filename grafout '<I>mygraph</I>.ps';</PRE>
<P><B>Specify graphics options for the GSF.</B> RESET=ALL
resets all global statements and graphics options. DEVICE= specifies a PostScript
device driver. GSFNAME= assigns the fileref GRAFOUT as the destination for
the GSF. GSFMODE=REPLACE (the default) causes the contents of the external
file to be replaced each time the graphics procedure is run.



<PRE>goptions reset=all
         device=pscolor
         gsfname=grafout
         gsfmode=replace
         ftext=swissb;</PRE>
<P>  <B>Produce one text slide.</B> NAME= specifies
the name that is assigned to the catalog entry created by the procedure. If
you omit NAME=, SAS/GRAPH uses the
default naming convention to name the entry.



<PRE>proc gslide border name='proposal';
   title1 h=4 'Proposed Design Improvements:';
   title2 h=3 '* Increase Stability';
   title3 h=3 '* Increase Speed';
   title4 h=3 '* Reduce Weight';
   footnote h=2 j=l 'ABC Company';
run;
quit;</PRE>
<P>When you submit these statements, SAS/GRAPH does
the following if no graphs of the same name exist in the catalog: 
<P>
<UL>

<LI>Creates one catalog entry named PROPOSAL in
WORK.GSEG.<P>

<LI>Creates one external file that contains the output
from the GSLIDE procedure and sends a message to the LOG reporting the number
of records and the name of the file to which they were written.  The file
name is the one specified in the FILENAME statement.<P>
</UL>

<P>Because the destination is a specific file and because
GSFMODE=REPLACE, each time you run the program it replaces the contents of
the external file. Therefore, this method is particularly useful when you
want to update an external file by resubmitting an existing program.
<P>However, if there is more than one run of a graphics
procedure in this program, the file would contain only the graphics output
from the last procedure run because this program replaces the external file
each time a graphics procedure is run. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Even though
the contents of the external file are replaced, the catalog entry is not.
Unless you explicitly delete the existing entry named PROPOSAL, each time
you submit the program, a new entry is created and the catalog entry name
is incremented.  This table illustrates what happens if you submit the above
program three times without deleting the catalog entries:&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P>
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  colspan="2" align="LEFT" valign="BOTTOM" ><B>Pass</B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Catalog entries </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>File name </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">1  </TD>
  
<TD  align="LEFT" valign="TOP">PROPOSAL     </TD>
  
<TD  align="LEFT" valign="TOP">mygraph.ps</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">2  </TD>
  
<TD  align="LEFT" valign="TOP">PROPOSA1  </TD>
  
<TD  align="LEFT" valign="TOP">mygraph.ps</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">3   </TD>
  
<TD  align="LEFT" valign="TOP">PROPOSA2        </TD>
  
<TD  align="LEFT" valign="TOP">mygraph.ps</TD>
</TR>

</TABLE>

<BR>
<P>Note that each new
catalog entry replaces the contents
of the external file, in this case, mygraph.ps. For more information, see <A href="#z0762614">Replacing Existing External Files</A>.
<P>For a complete
description of the graphics options used
in this example, see <A href="z0713550.htm">Graphics Options and Device Parameters Dictionary</A>.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Saving Multiple Graphs to One File</FONT></B></TD></TR></TABLE>

<P><A name="z0748300">&#13; If your program creates
multiple graphs that you want to store in one file, you follow the same steps
as those for saving one graph to one file except you specify GSFMODE=APPEND
to add each new graph to the end of the file instead of replacing the file.</A>
<BR><H3>Example</H3>


<P>This example stores several text slides in one external
file.  The program is the same as the previous example except the GOPTIONS
statement specifies GSFMODE=APPEND and the GSLIDE procedure uses RUN-group
processing to create multiple slides. Each slide includes the current TITLE
statement and all previously defined TITLE and FOOTNOTE statements.  
<P><B>Define the fileref.</B>



<PRE>filename grafout '<I>mygraph</I>.ps';</PRE>
<P>  <B>Specify graphics options for the GSF.</B>
GSFNAME= assigns the fileref GRAFOUT as the destination for the GSF. GSFMODE=APPEND
adds each new piece of output to the end of the external file.



<PRE>goptions reset=all
         device=pscolor
         gsfname=grafout
         gsfmode=append
         ftext=swissb
         rotate=landscape;</PRE>
<P>  <B>Produce four text slides.</B> Each RUN-group
generates a new catalog entry. NAME= specifies the base name for each catalog
entry created by the procedure.



<PRE>proc gslide border name='proposal';
   footnote h=2 j=l 'ABC Company';
   title1 h=4 'Proposed Design Improvements:';
run;
   title1 h=3 '* Increase Stability';
run;
   title1 h=3 '* Increase Speed';
run;
   title1 h=3 '* Reduce Weight';
run;
quit;</PRE>
<P>When you submit these statements, SAS/GRAPH does
the following if no graphs of the same name exist in the catalog: 
<P>
<UL>

<LI>Creates a new catalog entry for each graph, beginning
with the name PROPOSAL.  After the first graph is created, the entry name
is incremented so that subsequent graphs are called PROPOSA1, PROPOSA2, and
so forth.<P>

<LI>Creates one external file that contains all of
the output from the GSLIDE procedure. The file name is the one specified in
the FILENAME statement. Each time a graph is added to the file, SAS/GRAPH sends
a message to the LOG reporting the number of records and the name of the file
to which they were appended.<P>
</UL>
 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Because the destination is a
specific file and because the GSFMODE= setting is APPEND, each time you run
the program SAS/GRAPH adds the new
graphs to the external file. If you want the file to contain only the newly
created graphs, delete it before resubmitting the program.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P>In addition, if you resubmit the program  without deleting
the original catalog entries, SAS/GRAPH will
create four new entries that will be added to the catalog entry and four new
graphs appended to the external file, both of which will contain all eight
graphs.
<P>This table illustrates what happens if you submit this
program twice without deleting the catalog entries or the external file: 
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  colspan="2" align="LEFT" valign="BOTTOM" ><B>Pass </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Catalog entries </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>File name </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>File contents</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">1 </TD>
  
<TD  align="LEFT" valign="TOP">PROPOSAL   PROPOSA1   PROPOSA2   PROPOSA3 </TD>
  
<TD  align="LEFT" valign="TOP">mygraph.ps </TD>
  
<TD  align="LEFT" valign="TOP">PROPOSAL, PROPOSA1, PROPOSA2, PROPOSA3</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">2</TD>
  
<TD  align="LEFT" valign="TOP">PROPOSAL   PROPOSA1   PROPOSA2   PROPOSA3 PROPOSA4 
 PROPOSA5   PROPOSA6   PROPOSA7 </TD>
  
<TD  align="LEFT" valign="TOP">mygraph.ps </TD>
  
<TD  align="LEFT" valign="TOP">PROPOSAL, PROPOSA1, PROPOSA2, PROPOSA3, PROPOSA4,PROPOSA5,
PROPOSA6, PROPOSA7</TD>
</TR>

</TABLE>

<BR>
<P>For more information, see
<A href="#z0762614">Replacing Existing External Files</A>.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Saving Multiple Graphs to Multiple Files</FONT></B></TD></TR></TABLE>

<P><A name="z0748321">&#13; When you want
your SAS/GRAPH program to create multiple
files that each contain one graph, you can either </A>
<P>
<UL>

<LI>use a FILENAME statements  for each PROC statement
to explicitly specify a destination file for each graph. To do this, simply
repeat as many times as necessary the process described in <A href="#z-gsfone">Saving One Graph to a File</A>.<P>

<LI>use one FILENAME
statement to specify an aggregate
file storage location as the destination and let SAS/GRAPH automatically
name and create the files for you. <P>
</UL>

<P>These steps describe the general process: 
<OL START="1" type="1">
<LI>Use a
FILENAME statement to define a fileref for
the aggregate file storage location, such as a directory or PDS, where you
want to send the output.  Do not point to a specific file.<P>

<LI>Assign the fileref to the GSFNAME= graphics option.<P>

<LI>Specify
the device driver with the DEVICE= graphics
option.<P>

<LI>Use the default setting GSFMODE=REPLACE so that SAS/GRAPH produces
only one graph per file.  Because REPLACE is the default setting, you can
omit GSFMODE=.<P>

<LI>Submit the SAS/GRAPH program.<P>
</OL>
 
<P>Although the general technique is
the same, there are significant differences
between directing your graphics output to a specific file and directing it
to an aggregate file storage location.  These differences are mostly concerned
with how the file is named.
<P>When the destination is an aggregate file storage location, SAS/GRAPH not
only creates the external file, it also names it.  When SAS/GRAPH names
an external file, it always uses the name of the entry in the output catalog.
 This name is either 
<P>
<UL>

<LI>the name you specify in the NAME= option in the procedure<P>

<LI>the default name supplied by
SAS/GRAPH,
such as GSLIDE.<P>
</UL>

<P>In addition, SAS/GRAPH automatically
appends the correct file extension to the external file name. For example,
if the output is named Q1SALES and the external file is a GIF file, the file
name is Q1SALES.GIF.
<P>This technique of building the file name from the catalog entry name
affects what you do when you want to replace the contents of a file created
in this way. For details, see <A href="#z0762614">Replacing Existing External Files</A>.
<BR><H3>Example</H3>


<P>This example creates four text slides and stores each
one in a separate external file.  The program is similar to the previous examples
except the fileref points to an aggregate storage location instead of to a
specific file.  
<P> <B>Define the fileref.</B> The FILENAME statement
assigns an aggregate file storage location as the destination for the files.



<PRE>filename grafout '<I>external-file-location</I>'; /* such as a directory */</PRE>
<P>  <B>Specify graphics options for the GSF.</B>
GSFNAME= assigns the fileref GRAFOUT as the destination for the GSF. GSFMODE=REPLACE
(the default) replaces the contents of the external files with catalog entries <B>of the same name</B>.



<PRE>goptions reset=all
         device=pscolor
         gsfname=grafout
         gsfmode=replace
         ftext=swissb
         rotate=landscape;</PRE>
<P>  <B>Produce four text slides.</B> Each RUN-group
generates a new catalog entry. NAME= specifies the base name for each catalog
entry that is generated by the procedure. This name is also the base name
for the external files.



<PRE>proc gslide border name='proposal';
   footnote h=2 j=l 'ABC Company';
   title1 h=4 'Proposed Design Improvements:';
run;
   title1 h=3 '* Increase Stability';
run;
   title1 h=3 '* Increase Speed';
run;
   title1 h=3 '* Reduce Weight';
run;
quit;</PRE>
<P>When you submit these statements, SAS/GRAPH does
the following if no graphs of the same name exist in the catalog: 
<P>
<UL>

<LI>Creates a new catalog entry for each graph, beginning
with the name PROPOSAL. After the first graph is created, the entry name is
incremented so that subsequent graphs are called PROPOSA1, PROPOSA2, and so
forth.<P>

<LI>Creates one external file for each catalog entry.
The name of the file is the same as the entry name plus the extension. In
this case, the files are named PROPOSAL.PS, PROPOSA1.PS, and so forth.  For
each file created, SAS/GRAPH sends
a message to the LOG reporting the number of records and the name of the file
to which they were written.<P>
</UL>
 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Because you cannot replace individual
entries in a catalog, each time you run the program SAS/GRAPH creates
new catalog entries and consequently new files.  If you want to replace the
files, you must delete the corresponding catalog entries before resubmitting
the program.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P>This table illustrates what happens if you submit this
program twice without deleting the catalog entries:
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  colspan="2" align="LEFT" valign="BOTTOM" ><B>Pass </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Catalog entries </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>File name </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">1  </TD>
  
<TD  align="LEFT" valign="TOP">PROPOSAL <P>   PROPOSA1 <P>  PROPOSA2 <P> 
PROPOSA3   </TD>
  
<TD  align="LEFT" valign="TOP">proposal.ps <P>  proposa1.ps  <P>proposa2.ps<P>proposa3.ps</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">2   </TD>
  
<TD  align="LEFT" valign="TOP">PROPOSA4 <P>    PROPOSA5<P>  PROPOSA6 <P> 
PROPOSA7</TD>
  
<TD  align="LEFT" valign="TOP">proposa4.ps <P>  proposa5.ps <P>  proposa6.ps <P>proposa7.ps</TD>
</TR>

</TABLE>

<BR> 
<P>Because the catalog names increment, there is never
a matching file that the new catalog can replace. Therefore, unless you delete
the existing entries, the program continues to create new files. To delete
the existing entries, first run a GREPLAY procedure with the DELETE option:



<PRE>proc greplay igout=work.gseg nofs;
   delete proposal proposa1 proposa2 proposa3;</PRE>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0762614">Replacing Existing External Files</A></FONT></B></TD></TR></TABLE>

<P><A name="z0763052">&#13;
When you are working with aggregate file storage
locations and automatic file naming, it is important to remember that GSFMODE=REPLACE
replaces a file <B>only</B> if the name of the catalog entry is the
same as the name of the file and you are using the same type of driver. For
example, to replace a file named Q1SALES.PS, your program must create a catalog
entry named Q1SALES, and you must also be using a PostScript driver.  If the
entry named Q1SALES already exists in the catalog,  SAS/GRAPH will
increment the name to Q1SALES1, and either create a new file with the incremented
name or replace an existing file whose name matches the new incremented name.</A>
<P>Therefore, to replace the contents of existing external
files with a new set of graphs, you must be sure that the catalog you are
using does not already contain entries of the same name. There are several
ways to assure that a catalog does not contain entries with the same names
as your files: 
<P>
<UL>

<LI>Use a temporary catalog, such as the default WORK.GSEG,
to store the output and start a new SAS session.  Initially, the catalog is
empty.<P>

<LI>Use a temporary or permanent catalog and use the
GREPLAY procedure to do either of the following:
<P>
<UL>

<LI>delete the entire contents of the catalog before
you submit your program<P>

<LI>delete specified entries before you submit your
program.<P>
</UL>
<P>
</UL>

<P>One additional method for replacing catalog entries
is rarely recommended because it is easy to accidentally delete catalog entries
that you did not intend to delete.  If you want to replace the entire contents
of the catalog and if you are running only one procedure, you can use the
graphics option GOUTMODE=REPLACE. Whenever a new procedure starts, GOUTMODE=REPLACE
replaces the <B>entire contents</B> of the current catalog with the
new entries; it does not replace individual entries.
<BR><H3>Example</H3>


<P>The following example uses the GREPLAY procedure to
explicitly delete specified catalog entries so that you can re-create them
and replace the corresponding external files. This example uses the permanent
catalog MYLIB.GRAFCAT. 
<P>
<UL>

<LI>The GREPLAY procedure explicitly deletes existing
catalog entries that have the same name as the entries to be created. If no
entries exist, PROC GREPLAY issues a message and the program continues.<P>

<LI>The GSLIDE procedure generates four text slides
and stores them in the catalog specified by GOUT=.  NAME= specifies PROPOSAL
as the base name for the catalog entries created by the procedure.<P>
</UL>
  
<P><B>Define the libref for the permanent catalog.</B>



<PRE>libname mylib '<I>SAS-data-library</I>';</PRE>
<P>  <B>Define the fileref.</B> The FILENAME statement
assigns an aggregate file storage location as the destination for the files.



<PRE>filename grafout '<I>external-file-location</I>';</PRE>
<P>  <B>Specify graphics options for the GSF.</B>
GSFNAME= assigns the fileref GRAFOUT as the destination for the GSF. GSFMODE=REPLACE
(the default) replaces the contents of the external files with catalog entries <B>of the same name</B>.



<PRE>goptions reset=all
         device=pscolor
         gsfname=grafout
         gsfmode=replace
         ftext=swissb
         rotate=landscape;</PRE>
<P>  <B>Delete existing catalog entries of the same
name.</B> The GREPLAY procedure deletes the specified catalog entries.
These are the catalog names generated by the NAME= option in the procedure.
If the entries do not exist, PROC GREPLAY issues a message and the program
continues.



<PRE>proc greplay nofs igout=mylib.grafcat;
   delete proposal proposa1 proposa2 proposa3;
run;</PRE>
<P>  <B>Produce four text slides.</B> Each RUN-group
generates a new catalog entry. NAME= specifies the base name for each catalog
entry generated by the procedure. This name is also the base name for the
external files.



<PRE>proc gslide border gout=mylib.grafcat name='proposal';
   footnote h=2 j=l 'ABC Company';
run;
   title1 h=3 '* Increase Strength';
run;
   title1 h=3 '* Reduce Drag';
run;
   title1 h=3 '* Increase Resistance to Sheer';
run;
quit;</PRE>
<P>When you submit these statements, SAS/GRAPH does
the following: 
<P>
<UL>

<LI>deletes the specified entries from the catalog
MYLIB.GRAFCAT.<P>

<LI>creates a new catalog entry in MYLIB.GRAFCAT for
each slide, and increments the entry names: PROPOSAL, PROPOSA1, PROPOSA2,
and PROPOSA3.<P>

<LI>creates one external file for each catalog entry.
The file name is built from the catalog entry name. If a file of the same
name already exists, SAS/GRAPH  replaces
the contents of the file.<P>
</UL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Other Ways to Assign the Destination</FONT></B></TD></TR></TABLE>

<P>You can use the GACCESS= graphics option to assign the
destination for a graphics stream file. There are two ways to do this.
<BR><H3>Using GACCESS=GSASFILE</H3>


<P>This method is similar to the GSFNAME= method described
in the previous sections. 
<P>
<UL>

<LI>Use a FILENAME statement and assign a destination
to the fileref GSASFILE. When you use GACCESS, the fileref must be named GSASFILE.
The destination can be either a specific file or an aggregate file storage
location.<P>

<LI>Assign GSASFILE to the GACCESS= graphics option
instead of to GSFNAME=.<P>
</UL>

<P>For example, these statements define and assign the
fileref for an aggregate file storage location:  



<PRE>/* define a fileref for the destination  */
filename gsasfile '<I>external-file-location</I>';

   /* assign the fileref and specify a device */
goptions reset=all gaccess=gsasfile device=gif;</PRE>
<BR><H3>Using GACCESS= to Explicitly Specify a Destination</H3>


<P>You can also use GACCESS= to assign the destination
and omit the FILENAME statement. In this case, you must also include the SASGASTD
output format and quote the entire value. The destination can be either a
specific file or an aggregate file storage location.
<P>For example, this statement assigns a specific file
location as the destination for the graphics stream file:  



<PRE>/* assign the fileref and specify a device */
goptions reset=all
  gaccess='sasgastd > <I>my-graph-file</I>.gif'
  device=gif;</PRE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0696063.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="zractive.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0762619.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#zort-gsf">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>