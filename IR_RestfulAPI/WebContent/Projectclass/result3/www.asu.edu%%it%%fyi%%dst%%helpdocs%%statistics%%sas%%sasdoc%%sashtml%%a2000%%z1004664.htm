<HTML>
<!-- This page produced Fri Jul  2 16:54:11 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>SYSTEM 2000 Essentials : SYSTEM 2000 Item Types </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z1005180.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1004465.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z1004766.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SAS/ACCESS Interface to SYSTEM 2000 Data          Management Software: Reference                                          </FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z1004664">SYSTEM 2000 Item Types</A></FONT></H1>


<P><A name="z1042888">&#13;  Every schema item in a SYSTEM 2000 database has a specified
item type. The item type tells the software how the values for that item are
to be stored and displayed. The manner of storage determines how you can use
the values. For example, values consisting exclusively of digits can be stored
in a manner suitable for computation. You can specify numeric item types,
a date item type, and character item  types.</A>
<P>How the values are displayed and stored is also determined
by the  picture (or length) assigned to an item. For example, a picture for
decimal numbers indicates how many digits can be stored and where the decimal
point is to appear when the values are displayed or used in computation.
<P>When you create a view descriptor, in addition to assigning
SAS variable names from the schema item names, the ACCESS procedure assigns
SAS formats, informats, and lengths using the  item's picture. See <A href="z1008775.htm">ACCESS Procedure Data Conversions</A> for the default SAS variable
formats and informats for each SYSTEM 2000 item type.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Numeric Item Types</FONT></B></TD></TR></TABLE>

<P><A name="z1042891">&#13;  The following items are numeric item types. A numeric item type's
picture indicates the number of places required by the longest value expected
for an item.  A numeric item type's picture is specified using repetitions
of the numeral 9.  For example, 9999 or 9(4) specifies four places.  Values
for numeric item types cannot exceed their specified picture; that is, overflow
is not allowed for numeric values. </A>
<DL>
<DT>INTEGER</DT>
<DD>stores whole numbers.<P></DD>

<DT>DECIMAL</DT>
<DD> stores numbers with a decimal point.<P></DD>

<DT>MONEY</DT>
<DD>also stores numbers with a decimal point,
but these values include a floating dollar sign at the left and CR at the
right (if negative) when displayed.<P></DD>

<DT>REAL</DT>
<DD>stores fullword (single precision) floating
point (or FLOAT) numbers.  REAL items do not have a picture.  Each REAL value
 occupies one word (four bytes) in the database.<P></DD>

<DT>DOUBLE</DT>
<DD>stores double word (double precision) floating
point numbers. DOUBLE items do not have a picture.  Each DOUBLE  value occupies
two words (eight bytes). You can also use the DOUBLE item type for storing
times.  (SYSTEM 2000 software does not have a TIME item type.)<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Date Item Type</FONT></B></TD></TR></TABLE>

<P><A name="z1042902">&#13;  You can specify dates using the DATE item type. A date does
not have an assigned picture.</A>
<TABLE cellpadding="5" cellspacing="0">
<TR align=left valign="top">
<TD>DATE</TD>
<TD align="left">stores calendar dates in a fixed format.  For example, if the date format
is MM/DD/YYYY (the default), the value stored must be in the form 07/04/1989
(including the slashes). You cannot store dates prior to the origin of the
Gregorian calendar (October 15, 1582).</TD></TR>
</TABLE>

<P><B>Note:</B>&nbsp;&nbsp;&nbsp;<A name="z1042905">&#13;
 SYSTEM 2000 software does not have a TIME item type. To store
times, use the DOUBLE item type.</A>&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Character Item Types</FONT></B></TD></TR></TABLE>

<P><A name="z1042906">&#13;    The following item types are character item types. A character
item type's picture corresponds to the number of places that  would accommodate
most of the values for the item.  A character item type's picture is specified
using repetitions of the letter X.  For example, XXXX or X(4) specifies four
places.  Values for character item types, except for the UNDEFINED item type,
can exceed their picture (up to  250 characters) if the specified picture
is at least X(4). That is, CHARACTER and TEXT item types have overflow capabilities.</A>
<DL>
<DT>CHARACTER </DT>
<DD>stores alphanumeric values with trailing,
leading, and extra internal blanks removed.  For example, JOHN&empty;&empty;&empty;SMITH
is stored and displayed as JOHN&empty;SMITH.<P></DD>

<DT>TEXT</DT>
<DD>also stores alphanumeric values, but blanks
are not removed. For example, &empty;&empty;JOHN&empty;&empty;&empty;SMITH&empty;&empty;&empty;
is stored and displayed as &empty;&empty;JOHN&empty;&empty;&empty;SMITH&empty;&empty;&empty;
.<P></DD>

<DT>UNDEFINED</DT>
<DD>stores binary bit-string data. UNDEFINED
items can contain any of the 256 EBCIDIC characters, which are treated like
TEXT items except that overflow is not allowed.<P></DD>
</DL>

<P><B>Note:</B>&nbsp;&nbsp;&nbsp;When you create a view descriptor, the ACCESS
procedure assigns default variable lengths to the corresponding  SAS variables
using the pictures of the selected items. However, since CHARACTER and TEXT
item types have overflow capabilities, there may be values stored in the database
that are greater than the default variable length. When you use the view descriptor
to select data stored in the database, the larger values will not be recognized.
<P>Therefore, to access values that exceed their item's
picture, you must change the length in the view descriptor definition to the
largest possible value stored in the database, up to a maximum of 200.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z1005180.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1004465.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z1004766.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z1004664">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>