<HTML>
<!-- This page produced Tue Jul 20 10:24:46 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Data Form and Data Table Classes : Data Form and Data Table:  _setColumnAttribute </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="ztatable.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1save.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z42ttrs.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">Data Form and Data Table:  _setColumnAttribute</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z1attr">Data Form and Data Table:  _setColumnAttribute</A></FONT></H1>

<P><HR><BR><B>Sets an attribute for a column</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Delegated to:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Data Set Data Model class
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z1attr.htm#zid-4546"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z1attr.htm#z0390914"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z1attr.htm#z1219155"><FONT size="2"><B>Examples</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z1attr.htm#z1257664"><FONT size="2">Example 1: Spin box list in a cell</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z1attr.htm#z1257666"><FONT size="2">Example 2: Editor pushbutton in a cell</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z1attr.htm#z1257668"><FONT size="2">Example 3: Combo box and editor pushbutton in a cell</FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="zid-4546">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
CALL SEND ( <I>object-id</I>, '_setColumnAttribute',
<I>col-name</I>, <I>attr-name</I>, <I>attr-value</I>); 
</TD></TR></TABLE><A name="zid-4547">&#13;</A>
<P>
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="BOTTOM" ><B>Argument </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Type<BR></B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Description </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><B>col-name</B><BR></TD>
  
<TD  align="LEFT" valign="TOP">C </TD>
  
<TD  align="LEFT" valign="TOP">specifies the name of the column in which to set the attribute</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><B>attr-name</B><BR></TD>
  
<TD  align="LEFT" valign="TOP">C </TD>
  
<TD  align="LEFT" valign="TOP">specifies the name of the column attribute to be set</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><B>attr-value</B><BR></TD>
  
<TD  align="LEFT" valign="TOP">C | N </TD>
  
<TD  align="LEFT" valign="TOP">specifies the value of the column
attribute</TD>
</TR>

</TABLE>

<BR>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0390914">Details</A></FONT></B></TD></TR></TABLE>

<P>The type of the attribute value
must match the type of the attribute you specify. 
<P>To specify more than one column attribute, use the _setColumnAttributes
method. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;You cannot change the NAME, TYPE, LENGTH, COMPUTED, or MODIFIED
attributes of a column.
<P>Also, you cannot call the _setColumnAttribute method from the INIT or
TERM label sections of model SCL.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P>
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">
<CAPTION align="top"><B><I><A name="zid-4550">Column Attribute Items</A></I></B></CAPTION>


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="BOTTOM" ><B>Item </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Type </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Description </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'NAME'  </TD>
  
<TD  align="LEFT" valign="TOP">C </TD>
  
<TD  align="LEFT" valign="TOP">the name of the column; must be a valid SAS name<P>Note that NAME cannot be changed using the _setColumnAttribute or the
_setColumnAttributes method.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'DATFONT'</TD>
  
<TD  align="LEFT" valign="TOP">N</TD>
  
<TD  align="LEFT" valign="TOP">the identifier of an SCL list that contains the font to use when displaying
the data</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'LABFONT' </TD>
  
<TD  align="LEFT" valign="TOP">N</TD>
  
<TD  align="LEFT" valign="TOP">the identifier of an SCL list that contains the font to use when displaying
the label</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'REQUIRED' </TD>
  
<TD  align="LEFT" valign="TOP">C </TD>
  
<TD  align="LEFT" valign="TOP">'Y' if a value is required for the column<P>'N' if a value is not required for a column</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'PROTECTED'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">'Y' if the column is protected<P>'N' if the column is not protected</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'HIDDEN'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">'Y' if the column is hidden<P>'N' if the column is visible</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'MODIFIED'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">'Y' if the column has been modified<P>'N' if the column has not been modified.<P>Notes: MODIFIED cannot be changed using the
_setColumnAttribute or _setColumnAttributes
methods. Although using the MODIFIED attribute is convenient in some situations,
such as where an OVERRIDE occurs, using a check for the MODIFIED attribute
is expensive. Instead, column labels should be used to handle modified columns
where possible.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'EBCOLOR'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the background color when the column is in error</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'EFCOLOR'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the foreground color when the column is in error</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'LBCOLOR'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the background color for the column label</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'LFCOLOR'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the foreground color for the column label</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'DBCOLOR'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the background color for the column data</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'DFCOLOR'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the foreground color for the column data</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'JUST'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the justification format for the column:<P>'C' (center)<P>'L' (left)<P>'R' (right)<P>'N' (none)</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'CAPS'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the capitalization for the column:<P>'Y' if the column sets entered values to UPPERCASE<P>'N' otherwise</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'INITVALUE'</TD>
  
<TD  align="LEFT" valign="TOP">C|N</TD>
  
<TD  align="LEFT" valign="TOP">the initial value to use for the column when adding new rows to the
table; the type is the same as the data column</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'MINVALUE'</TD>
  
<TD  align="LEFT" valign="TOP">C|N</TD>
  
<TD  align="LEFT" valign="TOP">the minimum acceptable value for the column; the type is the same as
the data column</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'MAXVALUE'</TD>
  
<TD  align="LEFT" valign="TOP">C|N</TD>
  
<TD  align="LEFT" valign="TOP">the maximum acceptable value for the column; the type is the same as
the data column</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'ERROR'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">'Y' if the column is in error<P>'N' if the column is not in error</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'DISPLAYLABEL'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">'Y' if the column label is displayed<P>'N' if the column label is not displayed</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'COLUMN_WIDTH'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the width for the column in points. If the value of COLUMN_WIDTH is
0, then column width defaults to format-length EN spaces for character columns
and format-length FG spaces for numeric columns.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'COMPUTED'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">'Y' if the column is a computed column<P>'N' if the column is not a computed column<P>Note that COMPUTED cannot be changed using the
_setColumnAttribute or
_setColumnAttributes methods</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'TYPE'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the type of the column:<P>'C' for character columns<P>'N' for numeric columns<P>Note that TYPE cannot be changed using the
_setColumnAttribute or _setColumnAttributes
methods</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'LENGTH'</TD>
  
<TD  align="LEFT" valign="TOP">N</TD>
  
<TD  align="LEFT" valign="TOP">the data length for the column.<P>Note that LENGTH cannot be changed using the _setColumnAttribute or
_setColumnAttributes methods</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'FORMAT'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the format name for the column; it must be appropriate for the column
type</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'INFORMAT'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the informat name for the column; it must be appropriate for the column
type</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'LABEL' </TD>
  
<TD  align="LEFT" valign="TOP">C </TD>
  
<TD  align="LEFT" valign="TOP">the label for the column; must be 255 or fewer characters</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'DATACLASS'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the host control for a column:<P>COMBOBOX or SPINBOX; default is TEXTFIELD<P>If no host control is desired, set to NONE.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'DATAATTRIBUTES'</TD>
  
<TD  align="LEFT" valign="TOP">L</TD>
  
<TD  align="LEFT" valign="TOP">the named list of attributes that define the control specified in DATACLASS.<P>The attributes are:</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><BR></TD>
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">'ITEMS' specifies a list of valid values for a column. This list will
populate the COMBOBOX or SPINBOX host controls.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><BR></TD>
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">'READONLY' specifies if a cell value is editable via the input field
part of the host control. For comboboxes and spinboxes, if 'READONLY' is set
to 'Y', then the cell can only be edited via the control part of the host
control (such as selecting from the drop-down list for the combobox). If no
'dataclass' is specified and the default is being used for editing, then setting
'READONLY' to 'Y' will protect that cell.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><BR></TD>
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">'TEXTCOMPLETION' specifies if text matching should occur as text is
entered. Valid values are 'Y' | 'N' (default is 'Y'). This is used for comboboxes
and spinboxes only.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">'HONORCASE' specifies whether or not text completion (if active) is
case sensitive. Valid values are 'Y' | 'N' (default is 'N'). This is used
for comboboxes and spinboxes only.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'EDITOR'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">the four-level name of the catalog entry that is opened as an editor
when the ellipsis (...) button is selected in the cell. Valid only when using
a data table.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'EDITORATTRIBUTES'</TD>
  
<TD  align="LEFT" valign="TOP">L</TD>
  
<TD  align="LEFT" valign="TOP">the list of items sent to the editor. By default, the table passes the
cell contents to the editor as the 'VALUE' list entry item. Valid only when
using a data table.<P>If you wish to use a different entry item than the cell contents, specify
a named item 'VALUE' on the editorAttributes list, and populate it with the
desired values.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">'DSPROTECTED'</TD>
  
<TD  align="LEFT" valign="TOP">C</TD>
  
<TD  align="LEFT" valign="TOP">'Y' if the variable is derived via SQL<P>'N' if the variable is not derived from SQL</TD>
</TR>

</TABLE>

<BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z1219155">Examples</A></FONT></B></TD></TR></TABLE>

<P>The following three examples illustrate how to place host controls in
an active cell. All three examples assume you have created a FRAME that contains
a datatable object called TABLE.
<BR><H3> <A name="z1257664">Example 1: Spin box list in a cell</A> </H3>


<P>This example creates
a spin list with items 'one', 'two', 'three', 'four', and 'five' available
on the spin list. It also protects the input field.
<PRE>list = makelist();
rc = insertc(list, 'ONE', -1);
rc = insertc(list, 'TWO', -1);
rc = insertc(list, 'THREE', -1);
rc = insertc(list, 'FOUR', -1);
rc = insertc(list, 'FIVE', -1);
spinlist = makelist();
rc = insertl(spinlist, list, -1, 'ITEMS');
rc = insertc(spinlist, 'Y', -1, 'READONLY');
call notify(object-id, '_setColumnAttribute', column-name,
             'dataClass', 'SPINBOX');
call notify(object-id, '_setColumnAttribute', column-name,
             'dataAttributes', spinlist);</PRE>
<BR><H3> <A name="z1257666">Example 2: Editor pushbutton in a cell</A> </H3>


<P>This example
creates an editor pushbutton that will bring up 'SASUSER.EXAMPLE.EXAMPLE.FRAME'
when it is selected. 
<P>
<PRE>call notify(object-id, '_setColumnAttribute', column-name,'editor',
            'SASUSER.EXAMPLE.EXAMPLE.FRAME');</PRE>
<BR><H3> <A name="z1257668">Example 3: Combo box and editor pushbutton in a cell</A> </H3>


<P>This example creates both a combo box and an editor pushbutton. The combo
box has the items 'red', 'green', 'blue', 'gray', 'white', and 'black' available
on the drop-down list. The editor pushbutton will bring up 'SASUSER.EXAMPLE.CLRSELECT.FRAME'
when it is selected. Text completion is on and is case sensitive.
<P>
<PRE>list = makelist();
rc = insertc(list, 'RED', -1);
rc = insertc(list, 'GREEN', -1);
rc = insertc(list, 'BLUE', -1);
rc = insertc(list, 'GRAY', -1);
rc = insertc(list, 'WHITE', -1);
rc = insertc(list, 'BLACK', -1);
boxlist = makelist();
rc = insertl(boxlist, list, -1, 'ITEMS');
rc = insertc(boxlist, 'Y', -1, 'HONORCASE');
call notify(object-id, '_setColumnAttribute', column-name,
             'dataClass', 'COMBOBOX');
call notify(object-id, '_setColumnAttribute', column-name,
             'dataAttributes', boxlist);
call notify(object-id, '_setColumnAttribute', column-name,
             'editor', 'SASUSER.EXAMPLE.CLRSELECT.FRAME');</PRE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="ztatable.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1save.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z42ttrs.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z1attr">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>