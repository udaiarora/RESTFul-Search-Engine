<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>DATA Step Debugger : Advanced Usage: Using the Macro Facility with the Debugger </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0510023.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0379845.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0379345.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SAS Language Reference: Dictionary                                                                                        </FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0379339">Advanced Usage: Using the Macro Facility with the Debugger</A></FONT></H1>


<P><A name="z0919530">&#13;You can use the SAS macro facility with the debugger to invoke
macros from the DEBUGGER LOG command line. You can also define macros and
use macro program statements, such as %LET, on the debugger command line. </A>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Using Macros as Debugging Tools</FONT></B></TD></TR></TABLE>

<P><A name="z0919531">&#13;Macros are useful for storing a series of debugger commands.
Executing the macro at the DEBUGGER LOG command line then generates the entire
series of debugger commands. You can also use macros with parameters to build
different series of debugger commands based on various conditions.</A>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Creating Customized Debugging Commands with Macros</FONT></B></TD></TR></TABLE>

<P><A name="z0919532">&#13;You can create a customized debugging command by defining a macro
on the DEBUGGER LOG command line. Then invoke the macro from the command line.
For example, to examine the variable COST, to execute five statements, and
then to examine the variable DURATION, define the following macro (in this
case the macro is called EC). Note that the example uses the alias for the
EXAMINE command.


</A>
<PRE>%macro ec; ex cost; step 5; ex duration; %mend ec;</PRE>
<P>To issue the commands, invoke macro EC from the DEBUGGER
LOG command line: 



<PRE>%ec</PRE>


 
<P>The DEBUGGER LOG displays the value of COST, executes
the next five statements, and then displays the value of DURATION. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Defining a macro on the DEBUGGER LOG command line
allows you to use the macro only during the current debugging session, because
the macro is not permanently stored. To create a permanently stored macro,
use the Program Editor.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Debugging a DATA Step Generated by a Macro</FONT></B></TD></TR></TABLE>

<P><A name="z0919536">&#13;You can use a macro to generate a DATA step, but debugging a
DATA step that is generated by a macro can be difficult. The SAS log displays
a copy of the macro, but not the DATA step that the macro generated. If you
use the DEBUG option at this point, the text that the macro generates appears
as a continuous stream to the debugger. As a result, there are no line breaks
where execution can pause.  </A>
<P>To debug a DATA step that is generated by a macro, use
the following steps:
<P>
<OL START="1" type="1">
<LI>Use the MPRINT and MFILE system options when you
execute your program. <P>

<LI>Assign the fileref MPRINT to an existing external
file. MFILE routes the program output to the external file. Note that if you
rerun your program, current output appends to the previous output in your
file. <P>

<LI>Invoke the macro from a SAS session. <P>

<LI>In the Program Editor window, issue the INCLUDE
command or use the File menu to open your external file. <P>

<LI>Add the DEBUG option to the DATA statement and
begin a debugging session.<P>

<LI>When you locate the logic error, correct the portion
of the macro that generated that statement or statements.<P>
</OL>


<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0510023.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0379845.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0379345.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0379339">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>