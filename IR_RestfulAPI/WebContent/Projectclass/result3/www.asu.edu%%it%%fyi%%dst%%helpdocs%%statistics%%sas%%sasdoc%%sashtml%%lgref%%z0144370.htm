<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Statements : INPUT, List </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0148073.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0148147.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">INPUT, List</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0144370">INPUT, List</A></FONT></H1>

<P><HR><BR><B>Scans the input data record for input values and assigns them
to the corresponding SAS variables</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Valid:</B></TD>
<TD bgcolor="#CCCCCC" align="left">in a DATA step
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Category:</B></TD>
<TD bgcolor="#CCCCCC" align="left">File-handling
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Type:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Executable
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z0144370.htm#zid-2413"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0144370.htm#zid-2414"><FONT size="2"><B>Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0144370.htm#z0144375"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0148116"><FONT size="2">When to Use List Input</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0227639"><FONT size="2">Simple List Input</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0144376"><FONT size="2">Modified List Input</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0144370.htm#z0227640"><FONT size="2"><B>Comparisons</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0227641"><FONT size="2">How Modified List Input and Formatted Input Differ</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0227642"><FONT size="2">When Data Contain Quotation Marks</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0144370.htm#z0144377"><FONT size="2"><B>Examples</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0144372"><FONT size="2">Example 1: Reading Unaligned Data with Simple List Input</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0144371"><FONT size="2">Example 2: Reading Character Data That Contain Embedded Blanks</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0144369"><FONT size="2">Example 3: Reading Unaligned Data with Informats</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0144374"><FONT size="2">Example 4: Reading Delimited Data with Simple List Input</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0144370.htm#z0144378"><FONT size="2">Example 5: Reading Delimited Data with Modified List Input</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0144370.htm#z0227643"><FONT size="2"><B>See Also</b></FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="zid-2413">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>INPUT</B> &lt;<I>pointer-control</I>&gt; <I>variable</I>
&lt;$&gt; &lt;&amp;&gt; &lt;@ | @@&gt;; 
</TD></TR></TABLE>
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>INPUT</B>
&lt;<I>pointer-control</I>&gt; <I>variable</I> &lt;:|&amp;|~&gt; 
<BR>&lt;<I>informat.</I>&gt;
&lt;@ | @@&gt;;
</TD></TR></TABLE>
<BR><H3><A name="zid-2414">Arguments</A></H3>

<P><A name="z0853946">&#13;</A>
<DL>
<DT><B><B><I>pointer-control</I></B></B></DT>
<DD>moves the input pointer to a specified line
or column in the input buffer.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0146292.htm#z0146301">Column Pointer Controls</A> and
<A href="z0146292.htm#z0146303">Line Pointer Controls</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144371">Reading Character Data That Contain Embedded Blanks</A></TD>
</TABLE>
<P></DD>

<DT><B><B><I>variable</I></B></B></DT>
<DD>names a variable that is assigned input
values.<P></DD>

<DT><B><A name="z0853953">&#13;$</A></B></DT>
<DD>indicates to store a variable value as a
character value rather than as a numeric value.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the variable is previously
defined as character, $ is not required.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144372">Reading Unaligned Data with Simple List Input</A></TD>
</TABLE>
<P></DD>

<DT><B><A name="z0853957">&#13;&amp;</A></B></DT>
<DD>indicates that a character value may have
one or more single embedded blanks. This format modifier reads the value from
the next nonblank column until the pointer reaches two consecutive blanks,
the defined length of the variable, or the end of the input line, whichever
comes first.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The &amp; modifier
must follow the variable name and $ sign that it affects.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you specify an informat
after the &amp; modifier, the terminating condition for the format modifier
remains two blanks.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144376">Modified List Input</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144371">Reading Character Data That Contain Embedded Blanks</A></TD>
</TABLE>
<P></DD>

<DT><B><A name="z0853963">&#13;:</A></B></DT>
<DD>allows you to specify an informat that the
INPUT statement uses to read the variable value. This format modifier reads
the value from the next nonblank column until the pointer reaches the next
blank column, the defined length of the variable, or the end of the data line,
whichever comes first. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the length of the variable
is not previously defined, its value is read and stored with the informat
length.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The pointer continues to
read until the next blank column is reached. However, if the field is longer
than the formatted length, the value is truncated to the length of variable.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144376">Modified List Input</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144369">Reading Unaligned Data with Informats</A> and
<A href="#z0144378">Reading Delimited Data with Modified List Input</A></TD>
</TABLE>
<P></DD>

<DT><B><A name="z0853969">&#13;~</A></B></DT>
<DD>indicates to treat single quotation marks,
double quotation marks, and delimiters in character values in a special way.
This format modifier reads delimiters within quoted character values as characters
instead of as delimiters and retains the quotation marks when the value is
written to a variable.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You must use the
DSD option in an INFILE statement. Otherwise, the INPUT statement ignores
this option.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144376">Modified List Input</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144378">Reading Delimited Data with Modified List Input</A></TD>
</TABLE>
<P></DD>

<DT><B><B><I>informat.</I></B></B></DT>
<DD>specifies an informat to use to read the
variable values.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Decimal points in the actual
input values always override decimal specifications in a numeric informat.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z1131331.htm">Definition</A> </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0144369">Reading Unaligned Data with Informats</A> and
<A href="#z0144378">Reading Delimited Data with Modified List Input</A></TD>
</TABLE>
<P></DD>

<DT><B><A name="z0853979">&#13;@</A></B></DT>
<DD>holds an input record for the execution
of the next INPUT statement within the same iteration of the DATA step. This
line-hold specifier is called <I><B>trailing @</B></I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The trailing @ must
be the last item in the INPUT statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The trailing @ prevents
the next INPUT statement from automatically releasing the current input record
and reading the next record into the input buffer. It is useful when you need
to read from a record multiple times. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0146292.htm#z0146300">Using Line-Hold Specifiers</A></TD>
</TABLE>
<P></DD>

<DT><B><A name="z0853984">&#13;@@</A></B></DT>
<DD>holds an input record for the execution
of the next INPUT statement across iterations of the DATA step. This line-hold
specifier is called <I><B>double trailing @</B></I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The double trailing
@ must be the last item in the INPUT statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The  double trailing @ is
useful when each input line contains values for several observations.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0146292.htm#z0146300">Using Line-Hold Specifiers</A></TD>
</TABLE>
<P></DD>
</DL>


<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0144375">Details</A></FONT></B></TD></TR></TABLE>

<BR><H3><A name="z0148116">When to Use List Input</A></H3>


<P>List input requires that you specify the variable names in the INPUT statement
in the same order that the fields appear in the input data records. SAS scans
the data line to locate the next value but ignores additional intervening
blanks. List input does not require that the data are located in specific
columns. However, you must separate each value from the next by at least one
blank unless the delimiter between values is changed. By default, the delimiter
for data values is one blank space or the end of the input record. List input
will not skip over any data values to read subsequent values, but it can ignore
all values after a given point in the data record. However, pointer controls
allow you to change the order that the data values are read.
<P>There are two types of list input:
<P>
<UL>

<LI>simple list
input<P>

<LI>modified list input.<P>
</UL>
Modified list input makes the INPUT statement more versatile
because you can use a format modifier to overcome several of the restrictions
of simple list input. See <A href="#z0144376">Modified List Input</A>.
<BR><H3><A name="z0227639">Simple List Input</A></H3>


<P>Simple
list input places several restrictions on the type of data that the INPUT
statement can read: 
<P>
<UL>

<LI>By default, at least one blank must separate the
input values. Use the DELIMITER= option or the DSD option in the INFILE statement
to specify a delimiter other than a blank.<P>

<LI>Represent each missing value with a period, not
a blank, or two adjacent delimiters.<P>

<LI>Character input values cannot be longer than 8
bytes unless the variable is given a longer length in an earlier LENGTH, ATTRIB,
or INFORMAT statement.<P>

<LI>Character values cannot contain embedded blanks
unless you change the delimiter.<P>

<LI>Data must be in standard numeric or character
format.<FONT size="-1"><A href="#footnote1">(footnote 1)</A></FONT><P>
</UL>

<BR><H3><A name="z0144376">Modified List Input</A></H3>


<P>List
input is more versatile when you use format modifiers. The format modifiers
are as follows:
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Format Modifier</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Purpose</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><A name="z0854004">&#13;&amp;</A></TD>
  
<TD  align="LEFT" valign="TOP"><A name="z0854005">&#13;reads character values that contain embedded
blanks.</A></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><A name="z0854006">&#13;:</A></TD>
  
<TD  align="LEFT" valign="TOP"><A name="z0854007">&#13;reads data values that need the additional instructions
that informats can provide but that are not aligned in columns. **</A></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><A name="z0854008">&#13;~</A></TD>
  
<TD  align="LEFT" valign="TOP"><A name="z0854009">&#13;reads delimiters within quoted character values as characters
and retains the quotation marks.</A></TD>
</TR>

<TR valign="top" bgcolor="#FAFAD2">
<TD colspan="2">**Use formatted input and pointer controls to quickly
read data values aligned in columns.</TD>
</TR>
</TABLE>

<BR>For example, use the : modifier with an informat to read character
values that are longer than 8 bytes or numeric values that contain nonstandard
values. 
<P>Because list input interprets a blank as a delimiter,
use modified list input to read values that contain blanks. The &amp; modifier
reads character values that contain single embedded blanks. However, the data
values must be separated by two or more blanks. To read values that contain
leading, trailing, or embedded blanks with list input, use the DELIMITER=
option in the INFILE statement to specify another character as the delimiter.
See <A href="#z0144378">Reading Delimited Data with Modified List Input</A>.
If your input data use blanks as delimiters and they contain leading, trailing,
or embedded blanks, you may need to use either column input or formatted input.
If quotation marks surround the delimited values, you can use list input with
the DSD option in the INFILE statement.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0227640">Comparisons</A></FONT></B></TD></TR></TABLE>

<BR><H3><A name="z0227641">How Modified List Input and Formatted Input Differ</A></H3>


<P><B>Modified list input</B> has a scanning feature
that can use informats to read data which are not aligned in columns. <B>Formatted input</B> causes the pointer to move like that of column input
to read a variable value. The pointer moves the length that is specified in
the informat and stops at the next column.
<P>This DATA step uses modified list input to read the
first data value and formatted input to read the second:  



<PRE>data jansales;
   input item : $10. amount comma5.;
datalines;
trucks 1,382
vans 1,235
sedans 2,391
;</PRE>


The value of ITEM is  read with modified list input. The INPUT statement
stops reading when the pointer finds a blank space.  The pointer then moves
to the second column after the end of the field, which is the correct position
to read the AMOUNT value with formatted input.
<P>Formatted input, on the other hand, continues to read
the entire width of the field. This INPUT statement uses formatted input to
read both data values:  



<PRE>input item $10. +1 amount comma5.;</PRE>


To
read these data correctly with formatted input, the second data value must
occur after the 0<SUP>th</SUP> column of the first value,
as shown here: 



<PRE>----+----1----+----2
trucks    1,382
vans      1,235
sedans    2,391</PRE>Also, after the value of ITEM is read with formatted
input, you must use the pointer control +1 to move the pointer to the column
where the value AMOUNT begins.
<BR><H3><A name="z0227642">When Data Contain Quotation Marks</A></H3>


<P>When you use the DSD option in an INFILE statement, which sets the delimiter
to a comma,  the INPUT statement removes quotation marks  before a value is
written to a variable. When you also use the tilde (~) modifier in an INPUT
statement, the INPUT statement maintains quotation marks as part of the value.
  
 
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0144377">Examples</A></FONT></B></TD></TR></TABLE>

<BR><H3> <A name="z0144372">Example 1: Reading Unaligned Data with Simple List Input</A> </H3>


<P>The INPUT statement in this DATA step uses simple list
input to read the input data records:  



<PRE>data scores;
   input name $ score1 score2 score3 team $;
   datalines;
Joe 11 32 76 red
Mitchel 13 29 82 blue
Susan 14 27 74 green
;</PRE>


The next INPUT statement reads only the first four fields in the previous
data lines, which demonstrates that you are not required to read all the fields
in the record:  



<PRE>input name $ score1 score2 score3;</PRE>
<BR><H3> <A name="z0144371">Example 2: Reading Character Data That Contain Embedded Blanks</A> </H3>


<P>The INPUT statement in this DATA step uses the &amp;
format modifier with list input to read character values that contain embedded
blanks. 



<PRE>data list;
   infile <I>file-specification</I>;
   input name $ &amp; score;
run;</PRE>


It can read these input data records:



<PRE>----+----1----+----2----+----3----+
Joseph   11 Joergensen  red
Mitchel  13 Mc Allister  blue
Su Ellen  14 Fischer-Simon  green</PRE>The &amp; modifier follows the variable it affects in the INPUT statement.
Because this format modifier follows NAME, at least two blanks must separate
the NAME field from the SCORE field in the input data records.
<P>You can also specify an informat with a format modifier,
as shown here:  



<PRE>    input name $ &amp; +3 lastname &amp; $15. team $;</PRE>


In addition, this INPUT statement reads the same data to demonstrate
that you are not required to read all the values in an input record. The +3
column pointer control moves the pointer past the score value in order to
read the value for LASTNAME and TEAM.
<BR><H3> <A name="z0144369">Example 3: Reading Unaligned Data with Informats</A> </H3>


<P>This DATA step uses modified list input to read data values with an informat:
 



<PRE>data jansales;
   input item : $10. amount;
   datalines;
trucks 1382
vans 1235
sedans 2391
;</PRE>


The $10. informat allows a character variable of up to ten characters
to be read.
<BR><H3> <A name="z0144374">Example 4: Reading Delimited Data with Simple List Input</A> </H3>


<P>This DATA step uses the DELIMITER= option in the INFILE
statement to read data values that are separated by commas, instead of blanks,
with simple list input:  



<PRE>data scores2;
   infile datalines delimiter=',';
   input name $ score1-score3 team $;
   datalines;
Joe,11,32,76,red
Mitchel,13,29,82,blue
Susan,14,27,74,green
;</PRE>
<BR><H3> <A name="z0144378">Example 5: Reading Delimited Data with Modified List Input</A> </H3>


<P>This DATA step uses the DSD option in an INFILE statement
and the tilde (~) format modifier in an INPUT statement to retain the quotation
marks in character data and to read a character in a quoted string as a character
instead of as a delimiter.  






<PRE>data scores;
   infile datalines dsd;
   input Name : $9. Score1-Score3 
         Team ~ $25. Div $;
   datalines;
Joseph,11,32,76,"Red Racers, Washington",AAA
Mitchel,13,29,82,"Blue Bunnies, Richmond",AAA
Sue Ellen,14,27,74,"Green Gazelles, Atlanta",AA
;</PRE>
<P>The output that PROC PRINT generates shows the resulting SCORES data
set. The values for TEAM contain the quotation marks. 
<P>
<B><I>SCORES Data Set</I></B><BR>





<TABLE border="1" cellpadding="12" cellspacing="0" bgcolor="#FAFAFA">
<TR>
<TD><PRE>                         The SAS System                        1

OBS Name      Score1 Score2 Score3           Team            Div

 1  Joseph      11     32     76   "Red Racers, Washington"  AAA
 2  Mitchel     13     29     82   "Blue Bunnies, Richmond"  AAA
 3  Sue Ellen   14     27     74   "Green Gazelles, Atlanta" AA </PRE></TD></TR></TABLE>

<P>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><FONT size="5"><A name="z0227643">See Also</A></FONT>
</FONT></B></TD></TR></TABLE>
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>Statements:
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD><A href="z0146932.htm">INFILE</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0146292.htm">INPUT</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0148073.htm">INPUT, Formatted</A></TD></TR></TABLE></TD></TR></TABLE>

<HR><A name="footnote1"><FONT size="-1">FOOTNOTE 1:&nbsp;&nbsp;</FONT></A>See   
<B>SAS Language Reference: Concepts</B> for the information on standard
and nonstandard data values.&nbsp;<A href="#z2dard"><IMG border="0" src="../common/images/fntarrow.gif" alt="[arrow]"></A>
<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0148073.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0148147.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0144370">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>