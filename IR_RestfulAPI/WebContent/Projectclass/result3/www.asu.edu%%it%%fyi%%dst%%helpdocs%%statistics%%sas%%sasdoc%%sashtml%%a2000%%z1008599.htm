<HTML>
<!-- This page produced Fri Jul  2 16:54:11 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>ACCESS Procedure Reference : SYSTEM 2000 Where-Clause </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z1030786.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1026679.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z1008756.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SAS/ACCESS Interface to SYSTEM 2000 Data          Management Software: Reference                                          </FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z1008599">SYSTEM 2000 Where-Clause</A></FONT></H1>


<P><A name="z1042067">&#13; Use a SYSTEM 2000 where-clause to
select particular logical
entries from a SYSTEM 2000 database. You may reference any item included in
the access descriptor on which the view descriptor is based, as long as the
password you are using has where-clause authority for each referenced item.</A>
<P>When you include a SYSTEM 2000 where-clause in a view
descriptor, the selection criteria are executed each time you use the view
descriptor in a SAS program. When a SYSTEM 2000 where-clause is invoked, the
interface view engine
<P>
<UL>

<LI>replaces references to SAS variable names with
database item component numbers. (The SAS variable names must correspond to
a database item included in the view descriptor.)<P>

<LI>translates keywords to uppercase for compatibility
with SYSTEM 2000 software.<P>

<LI>expands connecting strings to connect the SAS
WHERE clause to the view where-clause.<P>

<LI>preserves significant blanks in delimited textual
values.<P>
</UL>

<P>The syntax of the where-clause can include one or more
of the following conditions. Examples of these conditions are presented in <A href="#z1008718">Examples</A>.
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;This is a
partial description of the SYSTEM 2000
where-clause. For a complete description, see the <B>SYSTEM 2000 QUEST
Language</B> manual. However, you cannot include a Collect File item name
or the SAME operator in a where-clause included in a view descriptor.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Syntax</FONT></B></TD></TR></TABLE>

<P>
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>WHERE</B>
<I>expression</I>;
</TD></TR></TABLE>
<DL>
<DT>WHERE</DT>
<DD>is the keyword designating a where-clause.
You can also use the abbreviation WH. The keyword is optional if the where-clause
is the first clause or if you do not specify an ordering-clause.<P></DD>

<DT><B>expression</B></DT>
<DD>consists of one of the following:



<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>|
<I>condition</I></TD></TR>
<TR valign="top"><TD></TD><TD>|(<I>expression</I>)</TD></TR>
<TR valign="top"><TD></TD><TD>|NOT
<I>expression</I></TD></TR>
<TR valign="top"><TD></TD><TD>|<I>expression</I> AND
<I>expression</I></TD></TR>
<TR valign="top"><TD></TD><TD>|<I>expression</I> OR
<I>expression</I></TD></TR>
<TR valign="top"><TD></TD><TD>|<I>record</I> HAS
<I>expression</I></TD></TR>
<TR valign="top"><TD></TD><TD>|<I>expression</I> AT
<I>n</I></TD></TR></TABLE><P></DD>

<DT><I>condition</I> [NON-KEY]
<I>item</I></DT>
<DD>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>|unaryoperator</TD></TR>
<TR valign="top"><TD></TD><TD>|binaryoperator
<I>value</I></TD></TR>
<TR valign="top"><TD></TD><TD>|ternaryoperator <I> value * value</I></TD></TR>
<TR valign="top"><TD></TD><TD>| CONTAINS
<I>text</I></TD></TR>
<TR valign="top"><TD></TD><TD>|* binaryoperator
<I>item</I>*</TD></TR></TABLE><P></DD>

<DT>NON-KEY</DT>
<DD>allows you to change a key condition to
a non-key one. This capability is not available in a SAS WHERE clause. See <A href="z1011131.htm#z1011156">Using HAS, AT, and NON-KEY</A> for information
on using connecting strings to extend the function of the NON-KEY specification
to the SAS WHERE clause conditions. 
<P>You can abbreviate NON-KEY to NK.<P></DD>

<DT>NOT</DT>
<DD>finds the complement of specified criteria.
You can also use the &not; symbol.<P></DD>

<DT>AND</DT>
<DD>combines two expressions by finding data
records that satisfy both expressions. You can also use the &amp; symbol.<P></DD>

<DT>OR</DT>
<DD>combines two expressions by finding data
records that satisfy either expression or both. You can also use the | symbol.<P></DD>

<DT><I>record</I></DT>
<DD>is a schema record name or component number.<P></DD>

<DT>HAS</DT>
<DD>specifies a data record by its position
under its parent. This capability is not available in a SAS WHERE clause.
See <A href="z1011131.htm#z1011156">Using HAS, AT, and NON-KEY</A>
for information on using connecting strings to extend the function of the
AT operator to the SAS WHERE clause conditions.<P></DD>

<DT><I>n</I></DT>
<DD>is 0 or a positive integer indicating position
of a record under its parent. Zero means the last position.<P></DD>

<DT><I>item</I></DT>
<DD>is a schema item name or component number
included in the access descriptor. Or you can specify a SAS variable name
if the item is included in the view descriptor. The item can be key or non-key.<P></DD>

<DT>unary-operator: EXISTS or FAILS </DT>
<DD>specifies the existence or nonexistence
of values. You can also specify EXIST or EXISTING and FAIL or FAILING.<P></DD>

<DT>binary-operator:  EQ, NE, GE, GT, LE, or LT</DT>
<DD>compares an item with a value or compares
two items. You can also use these symbols:
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Operator</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Alternate Form</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">EQ</TD>
  
<TD  align="LEFT" valign="TOP">=</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NE</TD>
  
<TD  align="LEFT" valign="TOP">&not;= or !=</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GE</TD>
  
<TD  align="LEFT" valign="TOP">>= or => or &not;&lt; or !&lt;</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">GT</TD>
  
<TD  align="LEFT" valign="TOP">></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">LE</TD>
  
<TD  align="LEFT" valign="TOP">&lt;= or =&lt; or &not;> or !></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">LT</TD>
  
<TD  align="LEFT" valign="TOP">&lt;</TD>
</TR>

</TABLE>

<BR><P></DD>

<DT>ternary-operator: EQ, NE, or
SPANS</DT>
<DD>compares an item with a range of values.
Ternary operators require a low value and a high value. You can also specify
SPAN or SPANNING, and you can use these symbols:
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>Operator</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Alternate Form</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">EQ</TD>
  
<TD  align="LEFT" valign="TOP">=</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NE</TD>
  
<TD  align="LEFT" valign="TOP">&not;= or
!=</TD>
</TR>

</TABLE>

<BR><P></DD>

<DT><I>value</I></DT>
<DD>is a literal value or the SYSTEM 2000 system
string *TODAY*. Optionally, you can enclose a value with a delimiter of your
choice. Sometimes you may need delimiters around character values, for example,
to preserve a mixed case value. Any special character that appears at the
beginning and end of a character value is assumed to be a delimiter. Consider
these examples:



<PRE>where c1 = 'Abc De' looks for Abc De
where c1 = @Abc De@ looks for Abc De
where c1 = @Abc De  looks for @Abc De</PRE><P></DD>

<DT>CONTAINS</DT>
<DD>searches for characters within an item's
values.You can also specify CONT, CONTAIN, or CONTAINING.<P></DD>

<DT><I>text</I></DT>
<DD>For the syntax and explanation of CONTAINS
text, see <B>SYSTEM 2000 QUEST Language</B>.<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z1008718">Examples</A></FONT></B></TD></TR></TABLE>

<P>This section gives examples using different forms of
the SYSTEM 2000 where-clause.
<BR><H3>Unary operators</H3>


<P><A name="z1042143">&#13;  Unary operators search for values that
exist or do not exist using the EXISTS and FAILS operators. The following
where-clause qualifies data records having a value for the item ACCRUED VACATION. 


</A>
<PRE>      where accrued vacation exists</PRE>
<P>The following where-clause qualifies data records not
having a value for the item ACCRUED VACATION, that is, null items. 



<PRE>      where accrued vacation fails</PRE>
<P>Note that SYSTEM 2000 unary operators are similar to
SAS missing values expressions.
<BR><H3>Binary operators</H3>


<P><A name="z1042146">&#13;  Binary operators compare items with a
value or compare two items using the EQ, NE, GT, GE, LT, or LE operators (or
their equivalent symbols). The following where-clause qualifies data records
having the value for EMPLOYEE NUMBER equal to 1224. 


</A>
<PRE>     where employee number=1224</PRE>
<P>The next where-clause qualifies data records where EMPLOYEE
STATUS is not equal to FULL TIME. (It does not, however, qualify those records
where EMPLOYEE STATUS is null as FAILS would.) 



<PRE>     where employee status ne full time</PRE>
<P>The next where-clause qualifies data records where the
value for HIRE DATE is greater than or equal to June 1, 1987. 



<PRE>     where hire date=>06/01/1987</PRE>
<P>The next where-clause qualifies data records where the
value for C105 equals the value for C4. 



<PRE>     where C4 * EQ C105 *</PRE>
<BR><H3>Ternary operators</H3>


<P><A name="z1042150">&#13;  Ternary operators search for values
in a range of values using the SPANS, EQ, and NE operators (or their equivalent
symbols). The following where-clause qualifies data records where BIRTHDAY
spans the dates January 1, l949 and January 31, 1949, inclusively. 


</A>
<PRE>     wh birthday spans 01/01/1949 * 01/31/1949</PRE>
<BR><H3>CONTAINS operator</H3>


<P><A name="z1042151">&#13;  The CONTAINS operator searches for values
that contain patterns of characters within values. The item must be a CHARACTER,
TEXT, or UNDEFINED item. For example, the following where-clause qualifies
data records where the values for STREET ADDRESS contain the character string
RIM ROCK. 


</A>
<PRE>     wh street address contains /RIM ROCK/ </PRE>
<BR><H3>Combining conditions with AND and OR</H3>


<P><A name="z1042152">&#13;
   Using the AND and OR operators, you can combine
two or more conditions. AND combines two conditions by selecting values that
satisfy both conditions, and OR combines two conditions by selecting values
that satisfy either or both conditions. For example, the following where-clause
qualifies data records having COBOL in the item SKILL TYPE and 4 in the item
YEARS OF EXPERIENCE. 


</A>
<PRE>   where skill type=cobol &amp; years of experience=4</PRE>
<BR><H3>Not qualifying a condition with NOT</H3>


<P><A name="z1042153">&#13;
 Using the NOT operator, you can select data
records where values do not match a condition. For example, the following
where-clause selects data records for the item PAY SCHEDULE that do not equal
the value HOURLY or that are null. 


</A>
<PRE>    wh &not;pay schedule=hourly </PRE>
<BR><H3>Designating specific types of records with HAS</H3>


<P><A name="z1042154">&#13;
 Using the HAS operator, you can specify a
focal record. For example in the following where-clause, the HAS operators
specify C0 (the ENTRY record) as the focal record, because both conditions
refer to the same schema record (C201). In this case, the HAS operators qualify
C0 records that have the values COBOL and FORTRAN for C201. (If the HAS operator
were not used, no records would qualify, because there would never be a C201
value of both COBOL and FORTRAN.)


</A>
<PRE>wh C0 has c201 eq cobol and C0 has c201 eq fortran</PRE>
<BR><H3>Specifying position with AT</H3>


<P><A name="z1042155">&#13;  Using the AT operator, you can select values
that are stored in a specified position in the database. Values must satisfy
the condition and occupy a specific position. A data record's position is
its number in a left-to-right enumeration below its parent record. For example,
the following where-clause qualifies the data record in position 2 in a logical
entry. 


</A>
<PRE>     wh position title eq programmer at 2</PRE>
<BR><H3>Processing order</H3>


<P><A name="z1042156">&#13;  The order in which SYSTEM 2000 software
processes conditions can affect which data records are selected. The software
processes conditions with operators in this order: AT, HAS, NOT, AND, and
OR.</A>
<P>When conditions are joined by the same operator, SYSTEM
2000 software first processes key conditions (ones that are indexed) from
right to left, then non-key conditions (ones not indexed) from right to left.
<P>You can alter processing order by changing the order
of the conditions and by using parentheses around conditions. The software
processes conditions enclosed in parentheses first.
<P>For example, because the software processes the AND
operator prior to the OR operator, to access those employees with an MBA degree
and either a major or minor in Marketing, the following where-clause would
yield the desired results: 



<PRE>wh degree=mba &amp; 
 (major field=marketing|minor field=marketing)</PRE>
<P>On the other hand, if you use the following where-clause,
SYSTEM 2000 software would also select those employees who have a minor in
Marketing and degrees other than MBAs. 



<PRE>wh degree=mba &amp; 
 major field=marketing|minor field=marketing</PRE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z1030786.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1026679.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z1008756.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z1008599">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>