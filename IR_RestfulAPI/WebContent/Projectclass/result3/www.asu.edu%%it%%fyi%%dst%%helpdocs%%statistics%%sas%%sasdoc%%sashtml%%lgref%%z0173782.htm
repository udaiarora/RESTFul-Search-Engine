<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Statements : SET </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0201966.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0289450.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SET</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0173782">SET</A></FONT></H1>

<P><HR><BR><B>Reads an observation from one or more SAS data sets</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Valid:</B></TD>
<TD bgcolor="#CCCCCC" align="left">in a DATA step
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Category:</B></TD>
<TD bgcolor="#CCCCCC" align="left">File-handling
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Type:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Executable
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z0173782.htm#zid-2614"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0173782.htm#zid-2615"><FONT size="2"><B>Without Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0173782.htm#z0290055"><FONT size="2"><B>Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0173782.htm#z0173778"><FONT size="2"><B>Options</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0173782.htm#z0290056"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0290057"><FONT size="2">What SET Does</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0290058"><FONT size="2">Uses</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0290059"><FONT size="2">BY Group Processing with SET</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0290060"><FONT size="2">Combining SAS Data Sets</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0173782.htm#z0290061"><FONT size="2"><B>Comparisons</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0173782.htm#z0290062"><FONT size="2"><B>Examples</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0224316"><FONT size="2">Example 1: Concatenating SAS Data Sets</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0224314"><FONT size="2">Example 2: Interleaving SAS Data Sets</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0290065"><FONT size="2">Example 3: Reading a SAS Data Set</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0290068"><FONT size="2">Example 4: Merging a Single Observation with All Observations in a SAS Data Set</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0290070"><FONT size="2">Example 5: Reading from the Same Data Set More Than Once</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0224294"><FONT size="2">Example 6: Combining One Observation with Many</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0224260"><FONT size="2">Example 7: Performing a Table-Lookup</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0224268"><FONT size="2">Example 8: Performing a Table-Lookup When the Master File Contains Duplicate Observations</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0224299"><FONT size="2">Example 9: Reading a Subset by Using Direct Access</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0224288"><FONT size="2">Example 10: Performing a Function Until the Last Observation Is Reached</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0173782.htm#z0224254"><FONT size="2">Example 11: Writing an Observation Only After All Observations Have Been Read</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0173782.htm#z0290078"><FONT size="2"><B>See Also</b></FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="zid-2614">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>SET</B>&lt;<I>SAS-data-set(s)</I>
&lt;(<I>data-set-options(s)</I> )&gt;&gt;
<BR>&lt;<I>options</I>&gt;;
</TD></TR></TABLE>
<BR><H3><A name="zid-2615">Without Arguments</A></H3>

<P><A name="z0855727">&#13;</A>
<P>When you
do not specify an argument, the SET statement
reads an observation from the most recently created data set.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290055">Arguments</A></FONT></B></TD></TR></TABLE>

<P>
<DL>
<DT><B>SAS-data-set</B></DT>
<DD>specifies a one-level name, a two-level
name, or one of the special SAS data set names.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5">See the "SAS
Data Sets" chapter of    
<B>SAS Language Reference: Concepts</B> for a description of the levels
of SAS data set names and when to use each level. </TD>
</TABLE>
<P></DD>

<DT>(<B>data-set-options</B>)</DT>
<DD>specifies actions SAS is to take when it
reads variables or observations into the program data vector for processing.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Refer to <A href="z0201788.htm">Data Set Options</A>    
 for a list of the data set options to use with input data sets.</TD>
</TABLE>
<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0173778">Options</A></FONT></B></TD></TR></TABLE>

<DL>
<DT><A name="z0855736">&#13;END=<B>variable</B></A></DT>
<DD> creates and names a temporary variable
that contains an end-of-file indicator. The variable, which is initialized
to zero, is set to 1 when SET reads the last observation of the last data
set listed. This variable is not added to any new data set.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">END= cannot be used
with POINT=. When random access is used, the END= variable is never set to
1.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0224254">Writing an Observation Only After All Observations Have Been Read</A></TD>
</TABLE>
<P></DD>

<DT><A name="z0855740">&#13;KEY=<B>index</B></A></DT>
<DD>provides nonsequential access to observations
in a SAS data set, which are based on the value of an index variable or a
key.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Specify the name of a
simple or a composite index of the data set that is being read.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">KEY= cannot be used
with POINT=.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Using the _IORC_ automatic
variable in conjunction with the SYSRC autocall macro provides you with more
error-handling information than was previously available. When you use the
SET statement with the KEY= option, the new automatic variable _IORC_ is created.
This automatic variable is set to a return code that shows the status of the
most recent I/O operation that is performed on an observation in a SAS data
set. If the KEY= value is not found, the _IORC_ variable returns a value that
corresponds to the SYSRC autocall macro's mnemonic _DSENOM and the automatic
variable _ERROR_ is set to 1. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0224260">Performing a Table-Lookup</A>
and <A href="#z0224268">Performing a Table-Lookup When the Master File Contains Duplicate Observations</A>.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0224285">UNIQUE
option</A></TD>
</TABLE>
<P></DD>

<DT><A name="z0855748">&#13;NOBS=<B>variable</B></A></DT>
<DD>creates and names a temporary variable whose
value is usually the total number of observations in the input data set or
data sets. If more than one data set is listed in the SET statement, NOBS=
the total number of observations in the data sets that are listed. The number
of observations includes those that are marked for deletion but are not yet
deleted.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">For certain SAS
views, SAS cannot determine the number of observations. In these cases, SAS
sets the value of the NOBS= variable to the largest positive integer value
that is available in your operating environment.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">At compilation time, SAS
reads the descriptor portion of each data set and assigns the value of the
NOBS= variable automatically. Thus, you can refer to the NOBS= variable before
the SET statement. The variable is available in the DATA step but is not added
to any output data set.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The NOBS= and POINT=
options are independent of each other.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0224288">Performing a Function Until the Last Observation Is Reached</A></TD>
</TABLE>
<P></DD>

<DT>OPEN=(IMMEDIATE
| DEFER)</DT>
<DD>allows you to delay the opening of any concatenated
SAS data sets until they are ready to be processed.
<P>
<DL>
<DT>IMMEDIATE</DT>
<DD>during the compilation phase, opens all
data sets that are listed in the SET statement. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">When you use the
IMMEDIATE option KEY=, POINT=, and BY statement processing are mutually exclusive. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If a variable on a subsequent
data set is of a different type (character versus numeric, for example) than
that of the same-named variable on the first data set, the DATA step will
stop processing and produce an error message. </TD>
</TABLE>
<P></DD>

<DT>DEFER</DT>
<DD>opens the first data set during the compilation
phase, and opens subsequent data sets during the execution phase. When the
DATA step reads and processes all observations in a data set, it closes the
data set and opens the next data set in the list. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">When you specify
the DEFER option, you cannot use the KEY= statement option, the POINT= statement
option, or the BY statement. These constructs imply either random processing
or interleaving of observations from the data sets, which is not possible
unless all data sets are open. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You can use the
DROP=, KEEP=, or RENAME= data set options to process a set of variables, but
the set of variables that are processed for each data set must be identical.
In most cases, if the set of variables defined by any subsequent data set
differs from that defined by the first data set, SAS prints a warning message
to the log but does not stop execution. Exceptions to this behavior are 
<OL START="1" type="1">
<LI>If a variable on a subsequent data set is of a
different type (character versus numeric, for example) than that of the same-named
variable on the first data set, the DATA step will stop processing and produce
an error message.<P>

<LI>If a variable on a subsequent data set was not
defined by the first data set in the SET statement, but was defined proviously
in the DATA step program, the DATA step will stop processing and produce an
error message. In this case, the value of the variable in previous iterations
may be incorrect because the semantic behavior of SET requires this variable
to be set to missing when processing the first observation of the first data
set.<P>
</OL>
</TD>
</TABLE>
<P></DD>
</DL>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">IMMEDIATE</TD>
</TABLE>
<P></DD>

<DT><A name="z0197310">&#13;</A><A NAME="z0197312"></A>POINT=<B>variable</B></DT>
<DD>specifies a temporary variable whose numeric
value determines which observation is read. POINT= causes the SET statement
to use random (direct) access to read a SAS data set.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">a STOP statement</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You cannot use POINT=
with a BY statement, a WHERE statement, or a WHERE= data set option. In addition,
you cannot use it with transport format data sets, data sets in sequential
format on tape or disk, and SAS/ACCESS views or the SQL procedure views that
read data from external files.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You cannot use POINT=
with KEY=.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You must supply the values
of the POINT= variable. For example, you can use the POINT= variable as the
index variable in some form of the DO statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The POINT= variable is available
anywhere in the DATA step, but it is not added to any new SAS data set.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0224294">Combining One Observation with Many</A>
and <A href="#z0224299">Reading a Subset by Using Direct Access</A></TD>
</TABLE>

<P><DL>
<DT><B><FONT color="FF00007">CAUTION:</FONT></B></DT><DD><B>Continuous loops can occur when
you use the POINT= option.</B>
When you use the
POINT= option, you must include a STOP statement to stop DATA step processing,
programming logic that checks for an invalid value of the POINT= variable,
or both. Because POINT= reads only those observations that are specified in
the DO statement, SAS cannot read an end-of-file indicator as it would if
the file were being read sequentially. Because reading an end-of-file indicator
ends a DATA step automatically, failure to substitute another means of ending
the DATA step when you use POINT= can cause the DATA step to go into a continuous
loop. If SAS reads an invalid value of the POINT= variable, it sets the automatic
variable _ERROR_ to 1. Use this information to check for conditions that cause
continuous DO-loop processing, or include a STOP statement at the end of the
DATA step, or both.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"></DD></DL><P></DD>

<DT><A NAME="z0224285"></A><A name="z0173781">&#13;UNIQUE</A></DT>
<DD>causes a KEY= search always to begin at
the top of the index for the data set that is being read.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">UNIQUE can only
appear with the KEY= argument.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Explanation:</B></TD>
<TD align="left" bgcolor="#F5F5F5">By default, SET
begins searching at the top of the index only when the KEY= value changes.
If the KEY= value does not change on successive executions of the SET statement,
the search begins by following the most recently retrieved observation. In
other words, when consecutive duplicate KEY= values appear, the SET statement
attempts a one-to-one match with duplicate indexed values in the data set
that is being read. If more consecutive duplicate KEY= values are specified
than exist in the data set that is being read, the extra duplicates are treated
as not found.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0224268">Performing a Table-Lookup When the Master File Contains Duplicate Observations</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5">For extensive examples,
see "Examples" in <B>Combining and Modifying SAS Data Sets:
Examples</B>   
.</TD>
</TABLE>
<P></DD>
</DL>


<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290056">Details</A></FONT></B></TD></TR></TABLE>

<BR><H3><A name="z0290057">What SET Does</A></H3>


<P>Each time
the SET statement is executed, SAS reads one observation into the program
data vector.  SET reads all variables and all observations from the input
data sets unless you tell SAS to do otherwise. A SET statement can contain
multiple data sets; a DATA step can contain multiple SET statements. See <B>Combining and Modifying SAS Data Sets: Examples</B>   
.
<BR><H3><A name="z0290058">Uses</A></H3>


<P>The SET statement is
flexible and has a variety of uses in SAS programming.  These uses are determined
by the options and statements that you use with the SET statement.  They include 
<P>
<UL>

<LI>reading observations and variables from existing
SAS data sets for further processing in the DATA step<P>

<LI>concatenating and interleaving data sets, and
performing one-to-one reading of data sets<P>

<LI>reading SAS data sets by using direct access methods.<P>
</UL>

<BR><H3><A name="z0290059">BY Group Processing with SET</A></H3>


<P>Only one BY statement can accompany each SET statement in a DATA step.  The
BY statement should immediately follow the SET statement to which it applies.
 The data sets that are listed in the SET statement must be sorted by the
values of the variables that are listed in the BY statement, or they must
have an appropriate index. SET when it is used with a BY statement interleaves
data sets. The observations in the new data set are arranged by the values
of the BY variable or variables, and within each BY group, by the order of
the data sets in which they occur. See <A href="#z0224314">Interleaving SAS Data Sets</A>   
 for an example of BY group processing with the SET statement. 
<BR><H3><A name="z0290060">Combining SAS Data Sets</A></H3>


<P><A name="z0855774">&#13;Use a single
SET statement with multiple data sets that are specified to concatenate the
specified data sets. That is, the number of observations in the new data set
is the sum of the number of observations in the original data sets, and the
order is all the observations from the first data set followed by all observations
from the second data set, and so on. See </A><A href="#z0224316">Concatenating SAS Data Sets</A>   
 for an example of concatenating data sets.
<P>Use a single SET statement with a BY statement to interleave
the specified data sets. The observations in the new data set are arranged
by the values of the BY variable or variables, and within each BY group, by
the order of the data sets in which they occur. See <A href="#z0224314">Interleaving SAS Data Sets</A>   
 for an example of interleaving data sets.
<P>Use multiple SET statements to perform one-to-one reading
(also called one-to-one matching) of the specified data sets. The new data
set contains all the variables from all the input data sets. The number of
observations in the new data set is the number of observations in the smallest
original data set. If the data sets contain common variables, the values that
are read in from the last data set replace those read in from earlier ones.
See <A href="#z0224294">Combining One Observation with Many</A>, <A href="#z0224260">Performing a Table-Lookup</A>, and
<A href="#z0224268">Performing a Table-Lookup When the Master File Contains Duplicate Observations</A>   
for examples of one-to-one reading of data sets.
<P>For extensive examples, see    
<B>Combining and Modifying SAS Data Sets: Examples</B> 
.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290061">Comparisons</A></FONT></B></TD></TR></TABLE>

<P><A name="z0855778">&#13;</A>
<P>
<UL>

<LI>SET reads an observation from an existing SAS
data set. INPUT reads raw data from an external file or from in-stream data
lines in order to create SAS variables and observations.<P>

<LI>Using the KEY= option with SET enables you to
access observations nonsequentially in a SAS data set according to a value.
 Using the POINT= option with SET enables you to access observations nonsequentially
in a SAS data set according to the observation number.<P>
</UL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290062">Examples</A></FONT></B></TD></TR></TABLE>

<BR><H3> <A name="z0224316">Example 1: Concatenating SAS Data Sets</A> </H3>


<P>If more than one data set name appears in the SET statement, the resulting
output data set is a concatenation of all the data sets that are listed. SAS
reads all observations from the first data set, then all from the second data
set, and so on until all observations from all the data sets have been read.
This example concatenates the three SAS data sets into one output data set
named FITNESS:  



<PRE>data fitness;
   set health exercise well;
run;</PRE>
<BR><H3> <A name="z0224314">Example 2: Interleaving SAS Data Sets</A> </H3>


<P>To interleave two or more SAS data sets, use a BY statement after the SET
statement:  



<PRE>data april;
   set payable recvable;
   by account;
run;</PRE>
<BR><H3> <A name="z0290065">Example 3: Reading a SAS Data Set</A> </H3>


<P>In this DATA step, each observation in the data set NC.MEMBERS is read into
the program data vector.  Only those observations whose value of CITY is 


<CODE><B>Raleigh</B></CODE> are output to the new data set RALEIGH.MEMBERS: 



<PRE>data raleigh.members;
   set nc.members;
   if city='Raleigh';
run;</PRE>
<BR><H3> <A name="z0290068">Example 4: Merging a Single Observation with All Observations in a SAS Data Set</A> </H3>


<P>An observation to be merged into
an exisitng data set can be one that is created by a SAS procedure or another
DATA step.  In this example, the data set AVGSALES has only one observation:



<PRE>data national;
      if _n_=1 then set avgsales;
      set totsales;
run;</PRE>
<BR><H3> <A name="z0290070">Example 5: Reading from the Same Data Set More Than Once</A> </H3>


<P>In this example, SAS treats each SET statement independently;
that is, it reads from one data set as if it were reading from two separate
data sets:  



<PRE>data drugxyz;
   set trial5(keep=sample);
   if sample>2;
   set trial5;
run;</PRE>
<P>For each iteration of the DATA step, the first SET statement
reads one observation.  The next time the first SET statement is executed,
it reads the next observation.  Each SET statement can read different observations
with the same iteration of the DATA step.
<BR><H3> <A name="z0224294">Example 6: Combining One Observation with Many</A> </H3>


<P>You can subset observations from one data set and combine them with observations
from another data set by using direct access methods, as follows:  



<PRE>data south;
   set revenue;
   if region=4;
   set expense point=_n_;
run;</PRE>
<BR><H3> <A name="z0224260">Example 7: Performing a Table-Lookup</A> </H3>


<P>This example illustrates using the KEY= option to perform a table-lookup.
The DATA step reads a primary data set that is named INVTORY and a lookup
data set that is named PARTCODE. It uses the index PARTNO to read PARTCODE
nonsequentially, by looking for a match between the PARTNO value in each data
set. The purpose is to obtain the appropriate description, which is available
only in the variable DESC in the lookup data set, for each part that is listed
in the primary data set: 



<PRE>data combine;
   set invtory(keep=partno instock price);
   set partcode(keep=partno desc)  key=partno;
run;</PRE>
<BR><H3> <A name="z0224268">Example 8: Performing a Table-Lookup When the Master File Contains Duplicate Observations</A> </H3>


<P>This example uses the KEY= option
to perform a table lookup.  The DATA step reads a primary data set that is
named INVTORY, which is indexed on PARTNO, and a lookup data set named PARTCODE.
PARTCODE contains quantities of new stock (variable NEW_STK). The UNIQUE option
ensures that, if there are any duplicate observations in INVTORY, values of
NEW_STK are added only to the first observation of the group:  



<PRE>data combine;
   set partcode(keep=partno new_stk);
   set invtory(keep=partno instock price) 
   key=partno/unique;
   instock=instock+new_stk;
run;</PRE>
<BR><H3> <A name="z0224299">Example 9: Reading a Subset by Using Direct Access</A> </H3>


<P>These statements select a subset of 50 observations from the
data set DRUGTEST by using the POINT= option to access observations directly
by number: 



<PRE>data sample;
   do obsnum=1 to 100 by 2;
      set drugtest point=obsnum;
      if _error_ then abort;
      output;
   end;
   stop;
run;</PRE>
<BR><H3> <A name="z0224288">Example 10: Performing a Function Until the Last Observation Is Reached</A> </H3>


<P>These statements use NOBS= to set the
termination value for DO-loop processing.  The value of the temporary variable
LAST is the sum of the observations in SURVEY1 and SURVEY2:  



<PRE>do obsnum=1 to last by 100;
   set survey1 survey2 point=obsnum nobs=last;
   output;
end;
stop;</PRE>
<BR><H3> <A name="z0224254">Example 11: Writing an Observation Only After All Observations Have Been Read</A> </H3>


<P>This example uses the END= variable LAST
to tell SAS to assign a value to the variable REVENUE and write an observation
only after the last observation of RENTAL has been read:  



<PRE>set rental end=last;
totdays + days;
if last then
   do;
      revenue=totdays*65.78;
      output;
   end;</PRE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><FONT size="5"><A name="z0290078">See Also</A></FONT>
</FONT></B></TD></TR></TABLE>
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>Statements:
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD><A href="z0202968.htm">BY</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0201951.htm">DO</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0146292.htm">INPUT</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0202970.htm">MERGE</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0214597.htm">STOP</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0202975.htm">UPDATE</A></TD></TR></TABLE></TD></TR>
<TR valign="top"><TD></TD><TD>"Rules
for Words and Names" in    
<B>SAS Language Reference: Concepts</B></TD></TR>
<TR valign="top"><TD></TD><TD>"Reading, Modifying, and Combining SAS Data Sets"
in    
<B>SAS Language Reference: Concepts</B></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0201788.htm">Data Set Options</A>
  </TD></TR>
<TR valign="top"><TD></TD></TR>
<TR valign="top"><TD></TD><TD><B>Combining and Modifying SAS Data Sets:
Examples</B></TD></TR></TABLE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0201966.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0289450.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0173782">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>
