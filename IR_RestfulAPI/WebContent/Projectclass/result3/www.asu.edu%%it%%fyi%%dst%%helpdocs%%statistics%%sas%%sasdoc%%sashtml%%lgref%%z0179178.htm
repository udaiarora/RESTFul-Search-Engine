<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Formats : Using Formats </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0309859.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1130997.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z1270373.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SAS Language Reference: Dictionary                                                                                        </FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0179178">Using Formats</A></FONT></H1>


<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Ways to Specify Formats</FONT></B></TD></TR></TABLE>

<P>You
can use formats in the following ways: 
<UL>

<LI>in a PUT statement<P>

<LI>with the PUT, PUTC, or PUTN functions<P>

<LI>with the %SYSFUNC
macro function<P>

<LI>in a FORMAT statement in a DATA step or a PROC step<P>

<LI>in an ATTRIB statement in a DATA step or a PROC
step.<P>
</UL>

<BR><H3>PUT Statement</H3>


<P>The PUT statement with a format after the variable name uses
a format to write data values in a DATA step. For example, this PUT statement
uses the DOLLAR. format to write the numeric value for AMOUNT as a dollar
amount:



<PRE>amount=1145.32;
put amount dollar10.2;</PRE> The DOLLAR<I>w</I>.<I>d</I> format in the PUT statement produces this result:



<PRE>$1,145.32</PRE>See <A href="z0161869.htm">PUT</A>
                                           
 for more information.
<BR><H3>PUT Function</H3>


<P>The PUT function
writes a numeric variable,  a character variable, or a constant with any valid
format and returns the resulting character value. For example, the following
statement converts the value of a numeric variable into a two-character hexadecimal
representation:



<PRE>num=15;
char=put(num,hex2.);</PRE>The PUT function creates a character variable named
CHAR that has a value of 0F. 
<P>The PUT function is useful for converting a numeric value to a character
value. See <A href="z0199354.htm">PUT</A>
                                           
 for more information.
<BR><H3>%SYSFUNC</H3>


<P>The %SYSFUNC
(or %QSYSFUNC) macro function executes SAS functions or user-defined functions
and applies an optional format to the result of the function outside a DATA
step. For example, the following program writes a numeric value in a macro
variable as a dollar amount. 



<PRE> %macro tst(amount);
   %put %sysfunc(putn(&amp;amount,dollar10.2));
 %mend tst;

 %tst (1154.23);</PRE>


For more information, see                         
                  
 <B>SAS Macro Language: Reference</B>. 
<BR><H3>FORMAT Statement</H3>


<P>The FORMAT statement permanently associates a format with a variable.
SAS uses the format to write the values of the variable that you specify.
For example, the following statement in a DATA step associates the COMMA<I>w</I>.<I>d</I> numeric format with the variables
SALES1 through SALES3:



<PRE>format sales1-sales3 comma10.2;</PRE>Because the FORMAT statement permanently associates a format with a
variable, any subsequent DATA step or PROC step uses COMMA10.2 to write the
values of SALES1,  SALES2, and SALES3. See <A href="z0178212.htm">FORMAT</A>                                       
    
 for more information.
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Formats that you specify in a PUT statement behave differently
from those that you associate with a variable in a FORMAT statement. The major
difference is that  formats that are specified  in the PUT statement preserve
leading blanks. If you assign formats with a FORMAT statement prior to a PUT
statement, all leading blanks are trimmed. The result is the same as if you
used the colon (:) format modifier. For details about using the colon (:)
format modifier, see <A href="z0176623.htm">PUT, List</A>.
                                            &nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<BR><H3>ATTRIB Statement</H3>


<P>The ATTRIB statement can also associate a format, as well as
other attributes, with one or more variables. For example, in the following
statement the ATTRIB statement permanently associates the COMMA<I>w</I>.<I>d</I> format with the variables
SALES1 through SALES3:



<PRE>attrib sales1-sales3 format=comma10.2;</PRE>Because the ATTRIB statement permanently associates a format with a
variable, any subsequent DATA step or PROC step uses COMMA10.2 to write the
values of SALES1, SALES2, and SALES3. See <A href="z0179227.htm">ATTRIB</A>                                       
    
 for more information.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Permanent versus Temporary Association</FONT></B></TD></TR></TABLE>

<P>When you specify
a format in a PUT statement, SAS uses the format to write data values during
the DATA step but does not permanently associate the format with a variable.
To permanently associate a format with a variable, use  a FORMAT statement
or an ATTRIB statement in a DATA step.  SAS permanently associates a format
with the variable by modifying the descriptor information in the SAS data
set.  
<P>Using a FORMAT statement or an ATTRIB statement in a PROC step associates
a format with a variable for that PROC step, as well as for any output data
sets that the procedure creates that contain formatted variables. For more
information on using formats in SAS procedures, see the                  
                           
<B>SAS Procedures Guide</B>. 
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">User-Defined Formats</FONT></B></TD></TR></TABLE>

<P>In
addition to the formats that are supplied with base SAS software, you can
create your own formats. In base SAS software, PROC FORMAT allows you to create
your own formats for both character and numeric variables. For more information,
see the FORMAT procedure in the <B>SAS Procedures Guide</B>  
. 
<P>When you execute a SAS program that uses user-defined formats, these
formats should be available. The two ways to make these formats available
are
<P>
<UL>

<LI>to create permanent, not temporary, formats with PROC FORMAT<P>

<LI>to store the source code that creates the formats (the PROC FORMAT
step) with the SAS program that uses them.<P>
</UL>
To create permanent SAS formats, see the FORMAT procedure
in the                                              
 <B>SAS Procedures Guide</B>.                                      
     
<P>If
you execute a program that cannot locate a user-defined format,
the result depends on the setting of the FMTERR system option. If the user-defined
format is not found, then these system options produce these results:
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="TOP" ><B>System Options</B></TH>
  <TH  align="LEFT" valign="TOP" ><B>Results</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">FMTERR </TD>
  
<TD  align="LEFT" valign="TOP">SAS produces an error that causes the current DATA or PROC	step to stop.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NOFMTERR </TD>
  
<TD  align="LEFT" valign="TOP">SAS continues processing and substitutes a default format, usually the
BEST<I>w</I>. or $<I>w.</I> format. </TD>
</TR>

</TABLE>

<BR>Although using NOFMTERR enables SAS to process a variable,
you lose the information that the user-defined format supplies.
<P>To avoid problems, make sure that your program has access to all user-defined
formats that are used. 

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0309859.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1130997.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z1270373.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0179178">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>