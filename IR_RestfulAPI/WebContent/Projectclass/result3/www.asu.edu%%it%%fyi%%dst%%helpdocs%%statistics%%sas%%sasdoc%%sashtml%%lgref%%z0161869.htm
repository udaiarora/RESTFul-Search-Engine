<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Statements : PUT </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0230136.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0176820.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">PUT</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0161869">PUT</A></FONT></H1>

<P><HR><BR><B>Writes lines to the SAS log, to the SAS procedure output file,
or to an external file that is specified in the most recent FILE statement</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Valid:</B></TD>
<TD bgcolor="#CCCCCC" align="left">in a DATA step
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Category:</B></TD>
<TD bgcolor="#CCCCCC" align="left">File-handling
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Type:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Executable
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z0161869.htm#zid-2560"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#zid-2561"><FONT size="2"><B>Without Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0174644"><FONT size="2"><B>Arguments</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0149798"><FONT size="2">Column Pointer Controls</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0150137"><FONT size="2">Line Pointer Controls</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0289930"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0153470"><FONT size="2">When to Use PUT</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0289932"><FONT size="2"><B>Output Styles</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0162702"><FONT size="2">Column Output</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0162675"><FONT size="2">List Output</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0289937"><FONT size="2">Formatted Output</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0163003"><FONT size="2">Named Output</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0174507"><FONT size="2"><B>Using Multiple Output Styles in a Single  PUT Statement</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0289943"><FONT size="2"><B>Pointer Controls</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0162610"><FONT size="2"><B>Using Line-hold Specifiers</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0162158"><FONT size="2"><B>Pointer Location after a Value Is Written</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0162156"><FONT size="2"><B>When the Pointer Goes Past the End of a Line</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0175958"><FONT size="2"><B>Arrays</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0289944"><FONT size="2"><B>Comparisons</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0289945"><FONT size="2"><B>Examples</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0162672"><FONT size="2">Example 1: Using Multiple Output Styles in One PUT Statement</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0162794"><FONT size="2">Example 2: Moving the Pointer within a Page</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0163039"><FONT size="2">Example 3: Moving the Pointer to a New Page</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0162677"><FONT size="2">Example 4: Underlining Text</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0162626"><FONT size="2">Example 5: Holding and Releasing Output Lines</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0161869.htm#z0163001"><FONT size="2">Example 6: Writing the Current Input Record to the Log</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0161869.htm#z0289962"><FONT size="2"><B>See Also</b></FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="zid-2560">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>PUT</B>
&lt;<I>specification(s)</I>&gt;&lt;_ODS_&gt;&lt;@|@@&gt;;
</TD></TR></TABLE>
<BR><H3><A name="zid-2561">Without Arguments</A></H3>

<P><A name="z0855271">&#13;</A>
<P>The PUT statement without arguments is called a <B>null PUT statement</B>.
<DL>
<DT><B>The null PUT
statement</B></DT>
<DD>
<UL>

<LI>writes the current output line to the current
file, even if the current output line is blank.<P>

<LI>releases an output line that is being held by
a previous PUT statement with a trailing @. <P>
</UL>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162610">Using Line-hold Specifiers</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162626">Holding and Releasing Output Lines</A></TD>
</TABLE>
<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0174644">Arguments</A></FONT></B></TD></TR></TABLE>

<P>
<DL>
<DT><I><B>specification</B></I></DT>
<DD>specifies what is written, how it is written,
and where it is written. This can include
<P>
<DL>
<DT><I><B>variable</B></I></DT>
<DD>names the variable whose value is written. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Beginning with Version 7, you can specify column-mapped
Output Delivery System variables in the PUT statement. This functionality
is described briefly here in <A href="#z0440168">_ODS_</A>, but documented more completely in
<A href="z0631236.htm">PUT, _ODS_</A>        
. For more information, see <B>The Complete Guide to the SAS Output Delivery
    System</B>.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR><P></DD>

<DT> (<I><B>variable-list</B></I>)</DT>
<DD>specifies a list of variables whose values
are written.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The (<I>format-list</I>) must follow the (<I>variable-list</I>). </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0175758.htm">PUT, Formatted</A>      </TD>
</TABLE>
<P></DD>

<DT><I><B>'character-string'</B></I></DT>
<DD>specifies a string of text, enclosed in
quotation marks, to write.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">To write a hexadecimal string
in EBCDIC or ASCII, follow the ending quotation mark with an 


<CODE><B>x</B></CODE>.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162675">List Output</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This statement writes
HELLO when the hexadecimal string is converted to ASCII characters:



<PRE>put '68656C6C6F'x;</PRE></TD>
</TABLE>
<P></DD>

<DT><I><B>n</B></I>*</DT>
<DD>specifies to repeat <I>n</I>
times the subsequent character string.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This statement writes
a line of 132 underscores.



<PRE>put 132*'_';</PRE></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162677">Underlining Text</A></TD>
</TABLE>
<P></DD>

<DT><I><B>pointer-control</B></I></DT>
<DD>moves the output pointer to a specified
line or column in the output buffer.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0149798">Column Pointer Controls</A> and
<A href="#z0150137">Line Pointer Controls</A></TD>
</TABLE>
<P></DD>

<DT><I><B>column-specifications</B></I></DT>
<DD>specifies which columns of the output line
the values are written.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162702">Column Output</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162794">Moving the Pointer within a Page</A></TD>
</TABLE>
<P></DD>

<DT><I><B>format.</B></I></DT>
<DD>specifies a format to use when the variable
values are written.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0289937">Formatted Output</A>        </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162672">Using Multiple Output Styles in One PUT Statement</A></TD>
</TABLE>
<P></DD>

<DT>(<I><B>format-list</B></I>)</DT>
<DD>specifies a list of formats to use when
the values of the preceding list of variables are written.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The (<I>format-list</I>) must follow the (<I>variable-list</I>).</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0175758.htm">PUT, Formatted</A>      </TD>
</TABLE>
<P></DD>
<A NAME="z0177250"></A>
<DT><A name="z0855312">&#13;_INFILE_</A></DT>
<DD>writes the last input data record that is
read either from the current input file or from the data lines that follow
a DATELINES statement.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">_INFILE_ is a pseudo-variable
that references the current INPUT buffer. You can use this pseudo-variable
in other SAS statements.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the most recent INPUT
statement uses line-pointer controls to read multiple input data records,
PUT _INFILE_ writes only the record that the input pointer is positioned on.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This PUT statement writes
all the values of the first input data record: 



<PRE>input #3 score #1 name $ 6-23;
put _infile_;</PRE></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0163001">Writing the Current Input Record to the Log</A></TD>
</TABLE>
<P></DD>

<DT>_ALL_</DT>
<DD>writes the values of all variables, which
includes automatic variables, that are defined in the current DATA step by
using named output.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0163003">Named Output</A></TD>
</TABLE>
<P></DD>
</DL>
<P></DD>

<DT><A NAME="z0440168"></A>_ODS_</DT>
<DD>moves data values for all columns (as defined
by the ODS option in the FILE statement) into a special buffer, from which
it is eventually written to  the data component. The ODS option in the FILE
statement defines the structure of the data component that holds the results
of the DATA step.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Use _ODS_ only if
you have previously specified the ODS option in the FILE statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You can use the _ODS_ specification
in conjunction with variable specifications and column pointers, and it can
appear anywhere in a PUT statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">_ODS_ writes data
into a specific column only if a PUT statement has not already specified a
variable for that column with a column pointer. That is, a variable specification
for a column overrides the _ODS_ option.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0631236.htm">PUT, _ODS_</A> and <B>The Complete Guide to the SAS
Output Delivery     System</B></TD>
</TABLE>
<P></DD>

<DT><A name="z0855327">&#13;@|@@</A></DT>
<DD>holds an output line for the execution of
the next PUT statement even across iterations of the DATA step. These line-hold
specifiers are called <B>trailing @</B> and <B>double trailing @</B>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The trailing @ or
double trailing @  must be the last item in the PUT statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Use an @ or @@ to hold the
pointer at its current location. The next PUT statement that executes writes
to the same output line rather than to a new output line.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162610">Using Line-hold Specifiers</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162626">Holding and Releasing Output Lines</A></TD>
</TABLE>
<P></DD>
</DL>

<BR><H3><A name="z0149798">Column Pointer Controls</A></H3>


<DL>
<DT><A name="z0855333">&#13;@<I><B>n</B></I></A></DT>
<DD>moves the pointer to column <I>n</I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">a positive integer</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">@15 moves the pointer
to column 15 before the value of NAME is written:



<PRE>put @15 name $10.;</PRE></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162794">Moving the Pointer within a Page</A> and
<A href="#z0162677">Underlining Text</A></TD>
</TABLE>
<P></DD>

<DT>@<I><B>numeric-variable</B></I></DT>
<DD>moves the pointer to the column given by
the value of <I>numeric-variable</I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">a positive integer</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If <I>n</I>
is not an integer, SAS truncates the decimal portion and uses only the integer
value. If <I>n</I> is zero or negative, the pointer
moves to column 1. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The value of the variable
A moves the pointer to column 15 before the value of NAME is written:



<PRE>a=15;
put @a name $10.;</PRE></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162794">Moving the Pointer within a Page</A></TD>
</TABLE>
<P></DD>

<DT>@(<I><B>expression</B></I>)</DT>
<DD>moves the pointer to the column that is
given by the value of <I>expression</I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">a positive integer</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the value of <I>expression</I> is not an integer, SAS truncates the decimal value
and uses only the integer value. If it is zero, the pointer moves to column
1. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The result of the expression
moves the pointer to column 15 before the value of NAME is written:



<PRE>b=5;
put @(b*3) name $10.;</PRE></TD>
</TABLE>
<P></DD>

<DT><A name="z0855349">&#13;+<I><B>n</B></I></A></DT>
<DD>moves the pointer <I>n</I>
columns.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">a positive integer or
zero</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If <I>n</I>
is not an integer, SAS truncates the decimal portion and uses only the integer
value.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This statement moves
the pointer to column 23, writes a value of LENGTH in  columns 23 through
26,  advances the pointer five columns, and writes the value of WIDTH in columns
32 through 35:



<PRE>put @23 length 4. +5 width 4.;</PRE></TD>
</TABLE>
<P></DD>

<DT>+<I><B>numeric-variable</B></I></DT>
<DD>moves the pointer the number of columns
given by the value of <I>numeric-variable</I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">a positive or negative
integer or zero</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If <I>numeric-variable</I> is not an integer, SAS truncates the decimal value and uses
only the integer value. If <I>numeric-variable</I> is
negative, the pointer moves backward. If the current column position becomes
less than 1, the pointer moves to column 1. If the value is zero, the pointer
does not move. If the value is greater than the length of the output buffer,
the current line is written out and the pointer moves to column 1 on the next
line. </TD>
</TABLE>
<P></DD>

<DT>+(<I><B>expression</B></I>)</DT>
<DD>moves the pointer the number of columns
given by <I>expression</I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><I>expression</I> must result in an integer</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If <I>expression</I> is not an integer, SAS truncates the decimal value and uses
only the integer value. If <I>expression</I> is negative,
the pointer moves backward. If the current column position becomes less than
1, the pointer moves to column 1. If the value is zero, the pointer does not
move. If the value is greater than the length of the output buffer, the current
line is written out and the pointer moves to column 1 on the next line.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162794">Moving the Pointer within a Page</A></TD>
</TABLE>
<P></DD>
</DL>

<BR><H3><A name="z0150137">Line Pointer Controls</A></H3>


<DL>
<DT><A name="z0855363">&#13;#<I><B>n</B></I></A></DT>
<DD>moves the pointer to line <I>n</I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">a positive integer</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The #2 moves the pointer
to the second line before the value of ID is written in columns 3 and 4: 



<PRE>put @12 name $10. #2 id 3-4;</PRE></TD>
</TABLE>
<P></DD>

<DT>#<I><B>numeric-variable</B></I></DT>
<DD>moves the pointer to the line given by the
value of <I>numeric-variable</I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">a positive integer.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the value of <I>numeric-variable</I> is not an integer, SAS truncates the decimal
value and uses only the integer value.  </TD>
</TABLE>
<P></DD>

<DT>#(<I><B>expression</B></I>)</DT>
<DD>moves the pointer to the line that is given
by the value of <I>expression</I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><I>Expression</I> must result in a positive integer.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A name="z0855374">&#13;If the value of <I>expression</I> is not an integer, SAS truncates the decimal value
and uses only the integer value.</A></TD>
</TABLE>
<P></DD>

<DT><B>/</B></DT>
<DD>advances the pointer to column 1 of the
next line.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The values for NAME
and AGE are written on one line, and then the pointer moves to the second
line to write the value of ID in columns 3 and 4: 



<PRE>put name age / id 3-4;</PRE></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0163039">Moving the Pointer to a New Page</A></TD>
</TABLE>
<P></DD>

<DT><A name="z0855379">&#13;OVERPRINT</A></DT>
<DD>causes the values that follow the keyword
OVERPRINT to print on the most recently written output line. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You must direct
the output to a print file.  Set the N= option in the FILE statement to 1
and direct the PUT statements to a print file. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">OVERPRINT has no effect
on lines that are written to a display.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Use OVERPRINT in combination
with column pointer and line pointer controls to overprint text.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This statement overprints
underscores, starting in column 15, which underlines the title:  



<PRE>put @15 'Report Title' overprint
    @15 '____________';</PRE></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0162677">Underlining Text</A></TD>
</TABLE>
<P></DD>

<DT><A name="z0855386">&#13;_BLANKPAGE_</A></DT>
<DD>advances the pointer to the first line of
a new page, even when the pointer is positioned on the first line and the
first column of a new page. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the current output file
contains carriage control characters, _BLANKPAGE_ produces output lines that
contain the appropriate carriage control character. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0163039">Moving the Pointer to a New Page</A></TD>
</TABLE>
<P></DD>

<DT><A name="z0855390">&#13;_PAGE_</A></DT>
<DD>advances the pointer to the first line of
a new page. SAS automatically begins a new page when a line exceeds the current
PAGESIZE= value.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the current output file
is a print file, _PAGE_ produces an output line that contains the appropriate
carriage control character.  _PAGE_ has no effect on a nonprint file.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0163039">Moving the Pointer to a New Page</A></TD>
</TABLE>
<P></DD>
</DL>


<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289930">Details</A></FONT></B></TD></TR></TABLE>

<BR><H3><A name="z0153470">When to Use PUT</A></H3>


<P>Use the PUT statement to write lines to the SAS log,
to the SAS procedure output file, or to an external file. If you do not execute
a FILE statement before the PUT statement in the current iteration of a DATA
step, SAS writes the lines to the SAS log. If you specify the PRINT option
in the FILE statement, SAS writes the lines to the procedure output file.
<P>The PUT statement can write lines that contain variable
values, character strings, and hexadecimal character constants. With specifications
in the PUT statement, you specify what to write, where to write it, and how
to format it.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289932">Output Styles</A></FONT></B></TD></TR></TABLE>

<P>There are
four ways to write variable values with the PUT statement:
<P>
<UL>

<LI>column<P>

<LI>list (simple and
modified)<P>

<LI>formatted<P>

<LI>named.<P>
</UL>
 A single PUT statement may contain any or all of the
available
output styles, depending on how you want to  write lines.



<BR><H3><A name="z0162702">Column Output</A></H3>


<P><A name="z0855401">&#13;With
<B>column output,</B> the column numbers
follow the variable in the PUT statement. These numbers indicate where in
the line to write the value:   


</A>
<PRE>put name 6-15 age 17-19;</PRE>


These
lines are written to the SAS log<FONT size="-1"><A href="#footnote1">(footnote 1)</A></FONT>:



<PRE>----+----1----+----2----+
     Peterson    21
     Morgan      17</PRE>


The PUT statement writes values for NAME and AGE in the specified columns.
See <A href="z0176820.htm">PUT, Column</A>
for more information.
<BR><H3><A name="z0162675">List Output</A></H3>


<P><A name="z0855403">&#13;With
<B>list output,</B> list the variables and character
strings in the PUT statement in the order that you want to write them.  For
example, this PUT statement


</A>
<PRE>put name age;</PRE>


writes the values for
NAME and AGE to the SAS log:   



<PRE>----+----1----+----2----+
Peterson 21
Morgan 17</PRE>


 See <A href="z0176623.htm">PUT, List</A>
for more information.
<BR><H3><A name="z0289937">Formatted Output</A></H3>


<P><A name="z0855404">&#13;With <B>formatted output</B>, specify a
SAS format or a user-written format after the variable name. The format gives
instructions on how to write the variable value. Formats allow you to write
 in a nonstandard form, such as packed decimal, or numbers that contain special
characters such as commas.  For example, this PUT statement 


</A>
<PRE>put name $char10. age 2. +1 date mmddyy10.;</PRE>


writes the values for NAME, AGE, and DATE to the SAS log:   



<PRE>----+----1----+----2----+
Peterson  21 07/18/1999
Morgan    17 11/12/1999</PRE>


Using a pointer control of +1 inserts a blank
space between the values of AGE and DATE.  See <A href="z0175758.htm">PUT, Formatted</A> for more information.
<BR><H3><A name="z0163003">Named Output</A></H3>


<P><A name="z0855405">&#13;With
<B>named output</B>, list the variable name followed
by an equal sign.  For example, this PUT statement


</A>
<PRE>put name= age=;</PRE>


writes the
values for NAME and AGE to the SAS log:   



<PRE>----+----1----+----2----+
name=Peterson age=21
name=Morgan age=17</PRE>


 See <A href="z0174678.htm">PUT, Named</A>
for more information.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0174507">Using Multiple Output Styles in a Single  PUT Statement</A></FONT></B></TD></TR></TABLE>

<P>A PUT statement can combine any or all of the different
output styles. For example,



<PRE>put name 'on ' date mmddyy8. ' weighs '
    startwght +(-1) '.' idno= 40-45;</PRE>


See  <A href="#z0162672">Using Multiple Output Styles in One PUT Statement</A> for an explanation of the lines written
to the SAS log.
<P>When you combine different output styles, it is important
to understand the location of the output pointer after each value is written.
For more information on the pointer location, see <A href="#z0162158">Pointer Location after a Value Is Written</A>.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289943">Pointer Controls</A></FONT></B></TD></TR></TABLE>

<P><A name="z0855408">&#13;As SAS writes values
with the PUT statement, it keeps track of its position with a pointer. The
PUT statement provides three ways to control the movement of the pointer: </A>
<DL>
<DT>column pointer controls </DT>
<DD>reset the pointer's column position when
the PUT statement starts to write the value to the output line. <P></DD>

<DT>line pointer controls </DT>
<DD>reset the pointer's line position when the
PUT statement writes the value to the output line. <P></DD>

<DT>line-hold specifiers</DT>
<DD>hold a line in the output buffer so that
another PUT statement can write to it. By default, the PUT statement releases
the previous line and writes to a new line.<P></DD>
</DL>

<P>With column and line pointer controls, you can specify
an absolute line number or column number to move the pointer or you can specify
a column or line location that is relative to the current pointer position. <A href="#z0161868">Pointer Controls Available in the PUT Statement</A> lists
all pointer controls that are available with the PUT statement. 
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">
<CAPTION align="top"><B><I><A name="z0161868">Pointer Controls Available in the PUT Statement</A></I></B></CAPTION>


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  colspan="2" align="LEFT" valign="BOTTOM" ><B><A name="z0161868">&#13;Pointer Controls </A></B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Relative </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Absolute </B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">column pointer controls</TD>
  
<TD  align="LEFT" valign="TOP">+<B>n</B></TD>
  
<TD  align="LEFT" valign="TOP">@<B>n</B></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP"><BR></TD>
  
<TD  align="LEFT" valign="TOP">+<B>numeric-variable</B></TD>
  
<TD  align="LEFT" valign="TOP">@<B>numeric-variable</B></TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><BR></TD>
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP">+(<B>expression</B>)</TD>
  
<TD  align="LEFT" valign="TOP">@(<B>expression</B>)</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">line pointer controls</TD>
  
<TD  align="LEFT" valign="TOP">/ , _PAGE_ ,<P>_BLANKPAGE_</TD>
  
<TD  align="LEFT" valign="TOP">#<B>n</B><P>#<B>numeric-variable</B><P>#(<B>expression</B>)</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP"><BR></TD>
  
<TD  align="LEFT" valign="TOP"><BR></TD>
  
<TD  align="LEFT" valign="TOP">OVERPRINT</TD>
  
<TD  align="LEFT" valign="TOP">none</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">line-hold specifiers </TD>
  
<TD  align="LEFT" valign="TOP">@</TD>
  
<TD  align="LEFT" valign="TOP">(not applicable)</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD ><BR></TD>
  
<TD  align="LEFT" valign="TOP"><BR></TD>
  
<TD  align="LEFT" valign="TOP">@@</TD>
  
<TD  align="LEFT" valign="TOP">(not applicable)</TD>
</TR>

</TABLE>

<BR>
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Always specify pointer controls before
the variable for which they apply.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P>See <A href="#z0162158">Pointer Location after a Value Is Written</A>
for more information on how SAS determines the pointer position.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0162610">Using Line-hold Specifiers</A></FONT></B></TD></TR></TABLE>

<P><A name="z0855448">&#13;Line-hold
specifiers keep the pointer on the current output line when </A>
<P>
<UL>

<LI>more than one PUT statement writes to the same
output line<P>

<LI>a PUT statement writes values from more than one
observation to the same output line.<P>
</UL>
 Without line-hold specifiers, each PUT statement in a
DATA step writes a new output line. 
<P>In the PUT statement, trailing @ and double trailing
@@ produce the same effect. Unlike the INPUT statement, the PUT statement
does not automatically release a line that is held by a trailing @ when the
DATA step begins a new iteration. SAS releases the current output line that
is held by a trailing @ or double trailing @ when it encounters:
<P>
<UL>

<LI>a PUT statement without a trailing @<P>

<LI>a PUT
statement that uses _BLANKPAGE_ or _PAGE_<P>

<LI>the end of the current line (determined by the
current value of the LRECL= or LINESIZE= option in the FILE statement, if
specified, or the LINESIZE= system option)<P>

<LI>the end of the last iteration of the DATA step.<P>
</UL>

<P>Using a
trailing @ or double trailing @ can cause SAS
to attempt to write past the current line length because the pointer value
is unchanged when the next PUT statement executes.  See <A href="#z0162156">When the Pointer Goes Past the End of a Line</A>.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0162158">Pointer Location after a Value Is Written</A></FONT></B></TD></TR></TABLE>

<P>Understanding the location of the output pointer after a value
is written is important, especially if you combine output styles in a single
PUT statement.  The pointer location after a value is written depends on which
output style you use and whether a character string or a variable is written.
With column or formatted output, the pointer is set to the first column after
the end of the field that is specified in the PUT statement. These two styles
write only variable values.
<P>With list output or named output, the pointer is positioned
in the second column after a variable value because PUT skips a column automatically
after each value is written. However, when a PUT statement uses list output
to write a character string, the pointer is positioned in the first column
after the string. If you do not use a line pointer control or column output
after a character string is written,  add a blank space to the end of the
character string to separate it from the next value.
<P>After an _INFILE_ specification, the pointer is located
in the first column after the record written from the current input file.
<P>When the output pointer is in the upper left corner
of a page, 
<P>
<UL>

<LI>PUT _BLANKPAGE_ writes a blank page and moves
the pointer to the top of the next page.<P>

<LI>PUT _PAGE_ leaves the pointer in the same position.<P>
</UL>

<P>You can
determine the current location of the pointer
by examining the variables that are specified with the COLUMN= option and
the LINE= option in the FILE statement.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0162156">When the Pointer Goes Past the End of a Line</A></FONT></B></TD></TR></TABLE>

<P>SAS does not write an output line that is longer than
the current output line length. The line length of the current output file
is determined by 
<P>
<UL>

<LI>the value of the LINESIZE= option in the current
FILE statement<P>

<LI>the value of the LINESIZE= system option (for
print files) <P>

<LI>the LRECL= option in the current FILE statement
(for nonprint files).<P>
</UL>
You may inadvertently position the pointer beyond the current
line length with one or more of these specifications: 
<P>
<UL>

<LI>a + pointer control with a value that moves the
pointer to a column beyond the current line length<P>

<LI>a column range that exceeds the current line length
(for example, PUT X 90 - 100 when the current line length is 80)<P>

<LI>a variable value or character string that does
not fit in the space that remains on the current output line.<P>
</UL>
By default, when PUT attempts to write past the end of the
current line, SAS withholds the entire item that overflows the current line,
writes the current line, then writes the overflow item on a new line, starting
in column 1. See the FLOWOVER, DROPOVER, and STOPOVER options in the     
   
 statement <A href="z0171874.htm">FILE</A>.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0175958">Arrays</A></FONT></B></TD></TR></TABLE>

<P><A name="z0855471">&#13;You can use the PUT statement to
write an array element. The subscript is any SAS expression that results in
an integer when the PUT statement executes. You can use an array reference
in a <I>numeric-variable</I> construction with a pointer
control if you enclose the reference in parentheses, as shown here:
</A>
<P>
<UL>

<LI>@(<I>array-name</I>{i})<P>

<LI>+(<I>array-name</I>{i})<P>

<LI>#(<I>array-name</I>{i})<P>
</UL>

<P>Use
the array subscript asterisk (*) to write all elements
of a previously defined array to a file. SAS allows single- or multidimensional
arrays, but it does not permit a _TEMPORARY_ array.  Enclose the subscript
in braces, brackets, or parentheses, and print the array using list, column,
formatted, or named output.  With list output, the form of this statement
is



<PRE>PUT <I>array-name</I>{*};</PRE>
 With formatted output, the form of this statement is



<PRE>PUT <I>array-name</I>{*}(<I>format|format.list</I>)</PRE>The format in parentheses follows the array reference.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289944">Comparisons</A></FONT></B></TD></TR></TABLE>

<P><A name="z0855476">&#13;</A>
<P>
<UL>

<LI>The PUT statement writes variable values and character
strings to the SAS log or to an external file while the INPUT statement reads
raw data in external files or data lines entered instream.<P>

<LI>Both the INPUT and the PUT statements use the
trailing @ and double trailing @ line-hold specifiers to hold the current
line in the input or output buffer, respectively. In an INPUT statement, a
double trailing @ holds a line in the input buffer from one iteration of the
DATA step to the next. In a PUT statement, however, a trailing @ has the same
effect as a double trailing @; both hold a line across iterations of the DATA
step.<P>

<LI>Both the PUT and OUTPUT statements create output
in a DATA step. The PUT statement uses an output buffer and writes output
lines to a file, the SAS log, or your display. The OUTPUT statement uses the
program data vector and writes observations to a SAS data set.<P>
</UL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289945">Examples</A></FONT></B></TD></TR></TABLE>

<BR><H3> <A name="z0162672">Example 1: Using Multiple Output Styles in One PUT Statement</A> </H3>


<P>This example uses several output styles in a single
PUT statement:  



<PRE>options yearcutoff= 1920;   

data club1;
   input idno name $ startwght date : date7.;
   put name 'on ' date mmddyy8. ' weighs '
       startwght +(-1) '.' idno= 32-40;
   datalines;
032 David 180 25nov99
049 Amelia 145 25nov99
219 Alan 210 12nov99
;</PRE>


The types of output styles are
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  colspan="2" align="LEFT" valign="BOTTOM" ><B>The values for ...</B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Are written with ...</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">NAME, STARTWGHT</TD>
  
<TD  align="LEFT" valign="TOP">list output</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">DATE</TD>
  
<TD  align="LEFT" valign="TOP">formatted output</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  colspan="2" align="LEFT" valign="TOP">IDNO</TD>
  
<TD  align="LEFT" valign="TOP">named output</TD>
</TR>

</TABLE>

<BR>The PUT statement also uses pointer controls and specifies
both character strings and variable names. 
<P>The program writes the following lines to the SAS log:<FONT size="-1"><A href="#footnote2">(footnote 2)</A></FONT> 



<PRE>----+----1----+----2----+----3----+----4
David on 11/25/99 weighs 180.  idno=1032
Amelia on 11/25/99 weighs 145. idno=1049
Alan on 11/12/99 weighs 210.   idno=1219</PRE>Blank spaces are inserted at
the start and the end of the character strings to change the pointer position.
These spaces separate the value of a variable from the character string. The
+(-1) pointer control  moves the pointer backward to remove the unwanted blank
that occurs between the value of STARTWGHT and the period. For more information
on how to position the pointer, see <A href="#z0162158">Pointer Location after a Value Is Written</A>.
<BR><H3> <A name="z0162794">Example 2: Moving the Pointer within a Page</A> </H3>


<P>These PUT statements show how to use column and line pointer controls to position
the output pointer. 
<P>
<UL>

<LI>To move the pointer to a specific column, use
@ followed by the column number, variable, or expression whose value is that
column number. For example, this statement moves the pointer to column 15
and writes the value of TOTAL SALES using list output:  
<P>
<PRE>put @15 totalsales;</PRE>


This PUT statement
moves the pointer to the value that is specified in  COLUMN and writes the
value of  TOTALSALES with the COMMA6 format:  



<PRE>data _null_;
   set carsales;
   column=15;
   put @column totalsales comma6.;
run;</PRE><P>

<LI>This program shows two techniques to move the
pointer backward:  



<PRE>data carsales;
   input item $10. jan : comma5.
         feb : comma5. mar : comma5.;
   saleqtr1=sum(jan,feb,mar);
/* an expression moves pointer backward */
   put '1st qtr sales for ' item
       'is ' saleqtr1 : comma6. +(-1) '.';
/* a numeric variable with a negative
    value moves pointer backward.      */
   x=-1;
   put '1st qtr sales for ' item
       'is ' saleqtr1 : comma5. +x '.';
   datalines;
trucks         1,382     2,789     3,556
vans           1,265     2,543     3,987
sedans         2,391     3,011     3,658
;</PRE>


Because the value of SALEQTR1 is written with modified list output,
the pointer moves automatically two spaces. For more information, see <A href="z0176623.htm#z0176622">How Modified List Output and Formatted Output Differ</A>. To remove
the unwanted blank that occurs between the value and the period, move the
pointer backward by one space.
<P>The program writes the following lines to the SAS log: 



<PRE>----+----1----+----2----+----3----+----4
st qtr sales for trucks is 7,727.
st qtr sales for trucks is 7,727.
st qtr sales for vans is 7,795.
st qtr sales for vans is 7,795.
st qtr sales for sedans is 9,060.
st qtr sales for sedans is 9,060.</PRE><P>

<LI>This program uses a PUT statement with the / line
pointer control to advance to the next output line:
<PRE>data _null_;
   set carsales end=lastrec;
   totalsales+saleqtr1;
   if lastrec then
     put @2 'Total Sales for 1st Qtr'
         / totalsales 10-15;
run;</PRE>
<P>After the DATA steps calculates TOTALSALES using all
the observations in the CARSALES data set, the PUT statement executes. It
writes a character string beginning in column 2 and moves the next line to
write the value of TOTALSALES in columns 10 through 15:
<PRE>----+----1----+----2----+----3
 Total Sales for 1st Qtr
          24582</PRE><P>
</UL>

<BR><H3> <A name="z0163039">Example 3: Moving the Pointer to a New Page</A> </H3>


<P>This example creates a data set called
STATEPOP, which
contains information from the 1990 U.S. census about the population in metropolitan
and nonmetropolitan areas. It executes the FORMAT procedure to group the 50
states and the District of Columbia into four regions. It then uses the IF
and the PUT statements to control the printed output. 



<PRE>options pagesize=24 linesize=64 nodate pageno=1;

title1;

data statepop;
   input state $ cityp90 ncityp90 region @@;
   label cityp90= '1990 metropolitan population 
                        (million)'
         ncityp90='1990 nonmetropolitan population
                        (million)'
         region=  'Geographic region';
   datalines;
ME    .443    .785  1   NH    .659    .450  1
VT    .152    .411  1   MA   5.788    .229  1
RI    .938    .065  1   CT   3.148    .140  1
NY  16.515   1.475  1   NJ   7.730     .A   1
PA  10.083   1.799  1   DE    .553    .113  2
MD   4.439    .343  2   DC    .607      .   2
VA   4.773   1.414  2   WV    .748   1.045  2
NC   4.376   2.253  2   SC   2.423   1.064  2
GA   4.352   2.127  2   FL  12.023    .915  2
KY   1.780   1.906  2   TN   3.298   1.579  2
AL   2.710   1.331  2   MS    .776   1.798  2
AR   1.040   1.311  2   LA   3.160   1.060  2
OK   1.870   1.276  2   TX  14.166   2.821  2
OH   8.826   2.021  3   IN   3.962   1.582  3
IL   9.574   1.857  3   MI   7.698   1.598  3
WI   3.331   1.561  3   MN   3.011   1.364  3
IA   1.200   1.577  3   MO   3.491   1.626  3
ND    .257    .381  3   SD    .221    .475  3
NE    .787    .791  3   KS   1.333   1.145  3
MT    .191    .608  4   ID    .296    .711  4
WY    .134    .319  4   CO   2.686    .608  4
NM    .842    .673  4   AZ   3.106    .559  4
UT   1.336    .387  4   NV   1.014    .183  4
WA   4.036    .830  4   OR   1.985    .858  4
CA  28.799    .961  4   AK    .226    .324  4
HI    .836    .272  4
;

proc format;
   value regfmt 1='Northeast'
                2='South'
                3='Midwest'
                4='West';
run;

data _null_;
   set statepop;
   by region;
   pop90=sum(cityp90,ncityp90);
   file print;
   put state 1-2 @5 pop90 7.3 ' million';
   if first.region then
      regioncitypop=0;      /* new region */
   regioncitypop+cityp90;
   if last.region then
      do;
         put // '1990 US CENSUS for ' region regfmt.
              / 'Total Urban Population: ' 
                 regioncitypop' million' _page_;
      end;
run;</PRE>




<P>
<B><I>PUT Statement Output for the Northeast Region</I></B><BR>



<TABLE border="1" cellpadding="12" cellspacing="0" bgcolor="#FAFAFA">
<TR>
<TD><PRE>                                                               1
ME    1.228 million
NH    1.109 million
VT    0.563 million
MA    6.017 million
RI    1.003 million
CT    3.288 million
NY   17.990 million
NJ    7.730 million
PA   11.882 million


1990 US CENSUS for Northeast
Total Urban Population: 45.456  million</PRE></TD></TR></TABLE>

<P>
<P>PUT _PAGE_ advances the pointer to line 1 of the new
page when the value of LAST.REGION is 1. The example prints a footer message
before exiting the
page.
<BR><H3> <A name="z0162677">Example 4: Underlining Text</A> </H3>


<P>This example
uses OVERPRINT to underscore a value written by a previous PUT statement:
 



<PRE>data _null_;
   input idno name $ startwght;
   file <I>file-specification</I> print;
   put name 1-10 @15 startwght 3.;
   if startwght > 200 then
     put overprint @15 '___';
   datalines;
032 David 180
049 Amelia 145
219 Alan 210
;</PRE>


The second PUT statement underlines weights above 200 on the output
line the first PUT statement prints.
<P>This PUT statement uses OVERPRINT with both a column
pointer control and a line pointer control:  



<PRE>   put @5 name $8. overprint @5 8*'_'
     / @20 address;</PRE>


The PUT statement writes a NAME value, underlines
it by overprinting eight underscores, and moves the output pointer to the
next line to write an ADDRESS value.
<BR><H3> <A name="z0162626">Example 5: Holding and Releasing Output Lines</A> </H3>


<P>This DATA step demonstrates how to hold and release an output line with a
PUT statement:  



<PRE>data _null_;
   input idno name $ startwght 3.;
   put name @;
   if startwght ne . then
     put @15 startwght;
   else put;
   datalines;
032 David 180
049 Amelia 145
126 Monica
219 Alan 210
;</PRE>


In this example,
<P>
<UL>

<LI>the trailing @ in the first PUT statement holds
the current output line after the value of NAME is written<P>

<LI>if the condition is met in the IF-THEN statement,
the second PUT statement writes the value of STARTWGHT and releases the current
output line<P>

<LI>if the condition is not met, the second PUT never
executes. Instead, the ELSE PUT statement executes. This releases the output
line and positions the output pointer at column 1 in the output buffer.<P>
</UL>

<P>The program writes the following lines to the SAS log: 



<PRE>----+----1----+----2
David         180
Amelia        145
Monica
Alan          210</PRE>
<BR><H3> <A name="z0163001">Example 6: Writing the Current Input Record to the Log</A> </H3>


<P>When a value for ID is less than 1000, PUT _INFILE_ executes
and writes the current input record to the SAS log. The DELETE statement prevents
the DATA step from writing the observation to the TEAM data set.  



<PRE>data team;
   input id team $ score1 score2;
   if id le 1000 then
     do;
       put _infile_;
       delete;
     end;
   datalines;
032 red 180 165
049 yellow 145 124
219 red 210 192
;</PRE>
<P>The program writes the following lines to the SAS log: 



<PRE>----+----1----+----2
219 red 210 192</PRE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><FONT size="5"><A name="z0289962">See Also</A></FONT>
</FONT></B></TD></TR></TABLE>
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>Statements:
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD><A href="z0171874.htm">FILE</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0176820.htm">PUT, Column</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0175758.htm">PUT, Formatted</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0176623.htm">PUT, List</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0174678.htm">PUT, Named</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0631236.htm">PUT, _ODS_</A></TD></TR></TABLE></TD></TR>
<TR valign="top"><TD></TD><TD>System
Options:
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD><A href="z0214613.htm">LINESIZE=</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0218916.htm">PAGESIZE=</A></TD></TR></TABLE></TD></TR></TABLE>

<HR><A name="footnote1"><FONT size="-1">FOOTNOTE 1:&nbsp;&nbsp;</FONT></A>The ruled line is for illustrative purposes only; the PUT statement does not
generate it.&nbsp;<A href="#z0218919"><IMG border="0" src="../common/images/fntarrow.gif" alt="[arrow]"></A>
<P><A name="footnote2"><FONT size="-1">FOOTNOTE 2:&nbsp;&nbsp;</FONT></A>The ruled line is for
illustrative purposes
only; the PUT statement does not generate it.&nbsp;<A href="#r7-the"><IMG border="0" src="../common/images/fntarrow.gif" alt="[arrow]"></A>
<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0230136.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0176820.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0161869">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>