<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Statements : FILE </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1212710.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0631259.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">FILE</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0171874">FILE</A></FONT></H1>

<P><HR><BR><B>Specifies the current output file for PUT statements</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Valid:</B></TD>
<TD bgcolor="#CCCCCC" align="left">in a DATA step
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Category:</B></TD>
<TD bgcolor="#CCCCCC" align="left">File-handling
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Type:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Executable
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z0171874.htm#zid-2335"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0171874.htm#z0171867"><FONT size="2"><B>Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0171874.htm#z0289616"><FONT size="2"><B>Options</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0171874.htm#z0289617"><FONT size="2"><B>Host Options</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0171874.htm#z0289618"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0172275"><FONT size="2">Overview</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0289619"><FONT size="2">Updating an External File in Place</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z1010343"><FONT size="2">Accessing the Contents of the Output Buffer</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0171874.htm#z0289620"><FONT size="2"><B>Comparisons</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0171874.htm#z0289621"><FONT size="2"><B>Examples</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0220948"><FONT size="2">Example 1: Executing Statements When a New Page Is Begun</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0220952"><FONT size="2">Example 2: Determining New Page by Lines Left on the Current Page</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0220954"><FONT size="2">Example 3: Arranging the Contents of an Entire Page</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0220942"><FONT size="2">Example 4: Identifying the Current Output File</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0220945"><FONT size="2">Example 5: Dynamically Changing the Current Output File</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0220950"><FONT size="2">Example 6: When the Output Line Exceeds the Line Length of the Output File</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0171874.htm#z0220956"><FONT size="2">Example 7: Reading Data and Writing Text Through a TCP/IP Socket</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0171874.htm#z0289645"><FONT size="2"><B>See Also</b></FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="zid-2335">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>FILE</B> <I>file-specification</I>
&lt;<I>options</I>&gt; &lt;<I>host-options</I>&gt;;
</TD></TR></TABLE><A name="zid-2336">&#13;</A>
<P><A name="z0852671">&#13;</A>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0171867">Arguments</A></FONT></B></TD></TR></TABLE>

<P>
<DL>
<DT><I>file-specification</I></DT>
<DD>identifies an external file that the DATA
step uses to write output from a PUT statement.   <I>File-specification</I> can have these forms:

<P>
<DL>
<DT>'<I>external-file</I>'</DT>
<DD>specifies the physical name of an external
file, which is enclosed in quotation marks.  The physical name is the name
by which the operating environment  recognizes the file.<P></DD>

<DT><I>fileref</I></DT>
<DD>specifies the  fileref of an external file. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You must have previously
associated <I>fileref</I> with an external file in a
FILENAME statement or function, or in an appropriate operating environment
command. There is only one exception to this rule: when you use the FILEVAR=
option, the fileref is simply a placeholder.</TD>
</TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See
Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0211297.htm">FILENAME</A></TD>
</TABLE>
<P></DD>

<DT><I>fileref(file)</I></DT>
<DD>specifies a fileref that is previously assigned
to an external file that is an aggregate grouping of files. Follow the fileref
with the name of a file or member, which is enclosed in parentheses. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You must previously
associate <I>fileref</I> with an external file in a
FILENAME statement or function, or in an appropriate operating environment
command.</TD>
</TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See
Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0211297.htm">FILENAME</A></TD>
</TABLE>

<P>
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;Different
operating
environments call an aggregate grouping of files by different names, such
as a directory, a MACLIB, or a partitioned data set. For details, see the
SAS documentation for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><P></DD>

<DT><A name="z0852687">&#13;LOG</A></DT>
<DD>is a reserved fileref that directs the output
that is produced by any PUT statements to the SAS log.
<P>At the beginning of each execution of a DATA step, the
fileref that indicates where the PUT statements write is automatically set
to LOG. Therefore, the first PUT statement in a DATA step always writes to
the SAS log, unless it is preceded by a FILE statement that specifies otherwise.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Because output lines are
by default written to the SAS log, use a FILE LOG statement to restore the
default action or to specify additional FILE statement options.</TD>
</TABLE>
<P></DD>

<DT><A name="z0852691">&#13;PRINT</A></DT>
<DD>is a reserved fileref that directs the output
that is produced by any PUT statements to the same print file as the output
that is produced by SAS procedures.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">When you write to
a print file, the value of the N= option must be either 1 or PAGESIZE.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">When PRINT is the fileref,
SAS uses carriage control characters and writes the output with the characteristics
of a print file.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5">A complete discussion
of print files in "DATA Step Processing" in  
<B>SAS Language Reference:
Concepts</B>.</TD>
</TABLE>

<P>
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;The carriage
control
characters that are written to a file can be specific to the operating environment.
For details, see the SAS documentation for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><P></DD>
</DL>
<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289616">Options</A></FONT></B></TD></TR></TABLE>

<P>
<DL>
<DT><A name="z0852699">&#13;BLKSIZE=<I>block-size</I></A></DT>
<DD>specifies the block size of the output file.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Depends on your operating
environment.</TD>
</TABLE>

<P>
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;The
default value of
the block size is dependent on the operating environment. For details,  see
the SAS documentation for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><P></DD>

<DT><A name="z0852704">&#13;COLUMN=<I>variable</I></A></DT>
<DD>specifies a variable that SAS automatically
sets to the current column location of the pointer.  This variable, like automatic
variables, is not written to the data set.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Alias:</B></TD>
<TD align="left" bgcolor="#F5F5F5">COL=</TD>
</TABLE>
<P></DD>

<DT><A NAME="z0343251"></A>DELIMITER= '<I>quoted
string</I>'
| <I>character_variable</I></DT>
<DD>specifies an alternate delimiter (other
than blank) to be used for LIST output. It is ignored for other types of output
(formatted, column, named).
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Alias:</B></TD>
<TD align="left" bgcolor="#F5F5F5">DLM</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Even though a character
string or character variable is accepted, only the first character of the
string or variable is used as the output delimiter. This differs from INFILE
DELIMITER= processing.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Output that contains
embedded delimiters requires the DSD option.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The delimiter can be used
with the colon (:) modifier (modified LIST output).</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See
Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0343246">DSD</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0220977"></A><A name="z0173967">&#13;DROPOVER</A></DT>
<DD>discards data items that exceed the output
line length (as specified by the LINESIZE= or LRECL= options in the FILE statement).
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">FLOWOVER</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Explanation:</B></TD>
<TD align="left" bgcolor="#F5F5F5">By default, data
that exceed the current line length are written on a new line. When you specify
DROPOVER, SAS drops (or ignores) an entire item when there is not enough space
in the current line to write it. When this occurs, the column pointer remains
positioned after the last value that is written in the current line. Thus,
the PUT statement may write other items in the current output line if they
fit in the space that remains or if the column pointer is repositioned. When
a data item is dropped, the DATA step continues normal execution (_ERROR_=0).
At the end of the DATA step, a message is printed for each file from which
data were lost.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Use DROPOVER when you want
the DATA step to continue executing if the PUT statement attempts to write
past the current line length, but you do not want the data item that exceeds
the line length to be written on a new line.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0180480">FLOWOVER</A> and
<A href="#z0180482"> STOPOVER</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0343246"></A>DSD</DT>
<DD>enables you to write data items that contains
embedded delimiters to LIST output. It is ignored for other types of output
(formatted, column, named). Any data item that contains the specified delimiter
is quoted with the double quotation mark (") as it is output. Any double
quotation marks that are embedded in the data item are promoted. For example,
the data item, <I>Dad"s</I>, is written as <I>"Dad" "s"</I> in LIST output.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you specify DSD,
the default delimiter is assumed to be the comma (,). Specify the DELIMITER=
option if you want to use a different delimiter.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">By default, data items that
do not contain the specified delimiter are not quoted. However, you can use
the tilde (~) modifier to force any data item to be quoted, even if it contains
no embedded delimiter.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See
Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0343251">DELIMITER=</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0180484"></A><A name="z0852731">&#13;FILENAME=<I>variable</I></A></DT>
<DD>defines a character variable, whose name
you supply, that SAS sets to the value of the physical name of the file currently
open for PUT statement output. The physical name is the name by which the
operating environment  recognizes the file. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This variable, like automatic
variables, is not written to the data set.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Use a LENGTH statement to
make the variable length long enough to contain the value of the physical
filename if it is longer than eight characters (the default length of a character
variable).</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0699156">FILEVAR=</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220942">Identifying the Current Output File</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0699156"></A><A name="z0852737">&#13;FILEVAR=<I>variable</I></A></DT>
<DD>defines a variable whose change in value
causes the FILE statement to close the current output file and open a new
one the next time the FILE statement executes. The next PUT statement that
executes writes to the new file that is specified as the value of the FILEVAR=
variable. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The value of a FILEVAR=
variable is expressed as a character string that contains a physical filename.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">When you use the
FILEVAR= option, the <I>file-specification</I> is just
a placeholder, not an actual filename or a fileref that has been previously-assigned
to a file. SAS uses this placeholder for reporting processing information
to the SAS log. It must conform to the same rules as a fileref.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This variable, like automatic
variables, is not written to the data set.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If any of the physical filenames
is longer than eight characters (the default length of a character variable),
assign the FILEVAR= variable a longer length with another statement, such
as a LENGTH statement or an INPUT statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0180484">FILENAME=</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220945">Dynamically Changing the Current Output File</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0180480"></A><A name="z0852744">&#13;FLOWOVER</A></DT>
<DD>causes data that exceed the current line
length to be written on a new line. When a PUT statement attempts to write
beyond the maximum allowed line length (as specified by the LINESIZE= option
in the FILE statement), the current output line is written to the file and
the data item that exceeds the current line length is written to a new line.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">FLOWOVER</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the PUT statement
contains a trailing @, the pointer is positioned after the data item on the
new line, and the next PUT statement writes to that line. This process continues
until the end of the input data is reached or until a PUT statement without
a trailing @ causes the current line to be written to the file.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220977">DROPOVER</A> and
<A href="#z0180482"> STOPOVER</A></TD>
</TABLE>
<P></DD>

<DT>FOOTNOTES | NOFOOTNOTES</DT>
<DD>controls whether currently defined footnotes
are printed.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Alias:</B></TD>
<TD align="left" bgcolor="#F5F5F5">FOOTNOTE | NOFOOTNOTE</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">In order to print
footnotes in a DATA step report, you must set the FOOTNOTE option in the FILE
statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">NOFOOTNOTES</TD>
</TABLE>
<P></DD>

<DT><A name="z0852753">&#13;</A><A NAME="z0197909"></A>HEADER=<I>label</I></DT>
<DD>defines a statement label that identifies
a group of SAS statements that you want to execute each time SAS begins a
new output page.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The first statement
after the label must be an executable statement. Thereafter you can use any
SAS statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Use the HEADER=
option only when you write to print files.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">To prevent the statements
in this group from executing with each iteration of the DATA step, use two
RETURN statements: one precedes the label and the other appears as the last
statement in the group.</TD>
</TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220948">Executing Statements When a New Page Is Begun</A></TD>
</TABLE>
<P></DD>

<DT><A name="z0852759">&#13;LINE=<I>variable</I></A></DT>
<DD>defines a variable whose value is the current
relative line number within the group of lines available to the output pointer.
You supply the variable name; SAS automatically assigns the value.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">1 to the value that is
specified by the N= option or with the #<B>n</B> line pointer control.
If neither is specified, the LINE= variable has a value of 1.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This variable, like automatic
variables, is not written to the data set.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The value of the LINE= variable
is set at the end of PUT statement execution to the number of the next available
line.</TD>
</TABLE>
<P></DD>

<DT><A NAME="z0220985"></A><A name="z0852764">&#13;LINESIZE=<I>line-size</I></A></DT>
<DD>sets the maximum number of columns per line
for reports and the maximum record length for data files.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Alias:</B></TD>
<TD align="left" bgcolor="#F5F5F5">LS=</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The default LINESIZE=
value is determined by one of two options:
<P>
<UL>

<LI>the LINESIZE= system option when you write to
a print file (a file that contains carriage control characters) or to the
SAS log.<P>

<LI>the LRECL= option in the FILE statement when you
write to a nonprint file.<P>
</UL>
</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">From 64 to the maximum
logical record length that is allowed for a specific file in your operating
environment. For details, see the SAS documentation for your operating
environment.
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;The
highest value allowed for LINESIZE= is dependent on your
operating environment. &nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If a PUT statement
tries to write a line that is longer than the value that is specified by the
LINESIZE= option, the action that is taken is determined by whether FLOWOVER,
DROPOVER, or STOPOVER is in effect. By default (FLOWOVER), SAS writes the
line as two or more separate records.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Comparisons:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A name="z0852773">&#13;LINESIZE= tells SAS
how much of the line to use. LRECL= specifies
the physical record length of the file.</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220980">LRECL=</A>,
<A href="#z0220977">DROPOVER</A>, <A href="#z0180480">FLOWOVER</A>,  and 
<A href="#z0180482">STOPOVER</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220950">When the Output Line Exceeds the Line Length of the Output File</A></TD>
</TABLE>
<P></DD>

<DT><A name="z0852776">&#13;LINESLEFT=<I>variable</I></A></DT>
<DD>defines a variable whose value is the number
of lines left on the current page. You supply the variable name; SAS assigns
that variable the value of the number of lines left on the current page. The
value of the LINESLEFT= variable is set at the end of PUT statement execution.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Alias:</B></TD>
<TD align="left" bgcolor="#F5F5F5">LL=</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This variable, like automatic
variables, is not written to the data set.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220952">Determining New Page by Lines Left on the Current Page</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0220980"></A><A name="z0852781">&#13;LRECL=<I>logical-record-length</I></A></DT>
<DD>specifies the logical record length of the
output file.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you omit the LRECL=
option, SAS chooses a value based on the operating environment's file
characteristics.</TD>
</TABLE>

<P>
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;Values
for <I>logical-record-length</I> are dependent on the operating environment.
For details, see the SAS documentation for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom">
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Comparisons:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A name="z0852786">&#13;LINESIZE= tells SAS
how much of the line to use; LRECL= specifies
the physical line length of the file.</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220985">LINESIZE=</A>,
<A href="#z0220987">PAD</A>, and
<A href="#z0220989">PAGESIZE=</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0220997"></A><A name="z0852788">&#13;MOD</A></DT>
<DD>writes the output lines after any existing
lines in the file.  
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">OLD</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">MOD is not accepted
under all operating environments. 
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;For details, see the SAS documentation for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See
Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220991">OLD</A></TD>
</TABLE>
<P></DD>

<DT>N=<I>available-lines</I></DT>
<DD>specifies the number of lines that you want
available to the output pointer in the current iteration of the DATA step. <I>Available-lines</I> can be expressed as a number (<I>n</I>) or as the keyword
PAGESIZE or PS.
<P>
<DL>
<DT><I>n</I></DT>
<DD>specifies the number of lines that are available
to the output pointer.  The system can move back and forth between the number
of lines that are specified while composing them before moving on to the next
set.<P></DD>

<DT>PAGESIZE</DT>
<DD>specifies that the entire page is available
to the output pointer.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Alias:</B></TD>
<TD align="left" bgcolor="#F5F5F5">PS</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">N=PAGESIZE is valid
only when output is sent to a print file.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the current output
file is a print file, <I>available-lines</I> must have
a value of either 1 or PAGESIZE.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interactions:</B></TD>
<TD align="left" bgcolor="#F5F5F5">There are two ways
to control the number of lines available to the output pointer:
<P>
<UL>

<LI>the N= option<P>

<LI>the #<I>n</I>
line pointer
control in a PUT statement.<P>
</UL>
</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you omit the
N= option and no # pointer controls are used, one line is available; that
is, by default, N=1. If N= is not used but there are # pointer controls, N=
is assigned the highest value that is specified for a # pointer control in
any PUT statement in the current DATA step.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Setting N=PAGESIZE enables
you to compose a page of multiple columns one column at a time.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220954">Arranging the Contents of an Entire Page</A></TD>
</TABLE>
<P></DD>
</DL>
<P></DD>
<A NAME="z0224865"></A>
<DT><A name="z0852809">&#13;NBYTE=<I>variable</I></A></DT>
<DD>specifies the name of a variable that contains
the number of bytes to write to a file when you write data in stream record
format (RECFM=S in the FILENAME statement). By default, the number of bytes
that are read is equal to the actual LRECL value of the file. NBYTE= is used
with the SOCKET and FTP access methods only.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If the number of bytes to
be read is set to -1, the FTP and SOCKET access methods return the number
of bytes that are currently available in the input buffer.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220956">Reading Data and Writing Text Through a TCP/IP Socket</A> </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See also:</B></TD>
<TD align="left" bgcolor="#F5F5F5">the <A href="z0178980.htm#z0229899">RECFM= option</A> in the FILENAME-FTP
statement </TD>
</TABLE>
<P></DD>

<DT>ODS &lt; = (<I>ODS suboptions</I>)
></DT>
<DD>specifies to use the Output Delivery System
to format the output from a DATA step. It defines the structure of the data
component and binds that component to a table definition to produce an output
object. ODS sends this object to all open ODS destinations, each of which
formats the object appropriately. For information on the <I>ODS
suboptions</I>, see <A href="z0631259.htm#z0630800">ODS Suboptions</A>.
For general information on the Output Delivery System, see<B>The Complete
Guide to the SAS Output Delivery     System</B>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you omit the ODS
suboptions, the DATA step uses a default table definition (base.datastep.table)
that is stored in the SASHELP data library. This definition defines two generic
columns: one for character variables, and one for numeric variables. ODS associates
each variable in the DATA step with one of these columns and displays the
variables in the order in which they are defined in the DATA step.
<P>Without suboptions, the default table definition uses
the variable's label as its column header. If no label exists, the definition
uses the variable's name as the column header.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The ODS option is
valid only when you use the fileref PRINT in the FILE statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You cannot use the
_FILE_=, FILEVAR=, HEADER=, and PAD options with the ODS option.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The DELIMITER= and
DSD options have no effect on the ODS option. The FOOTNOTES|NOFOOTNOTES, LINESIZE,
PAGESIZE, and TITLES | NOTITLES options only have an effect on the listing
destination. </TD>
</TABLE>
<P></DD>

<DT><A NAME="z0220991"></A><A name="z0852821">&#13;OLD</A></DT>
<DD>replaces the previous contents of the file.
 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">OLD</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">OLD is not accepted
under all operating environments.  
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;For details, see the SAS documentation for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See
Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220997">MOD</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0220987"></A><A name="z0852827">&#13;PAD
| NOPAD</A></DT>
<DD>controls whether records written to an external
file are padded with blanks to the length that is specified in the LRECL=
option.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">NOPAD is the default
when writing to a variable-length file; PAD is the default when writing to
a fixed-length file.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">PAD provides a quick way
to create fixed-length records in a variable-length file.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See
Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0220980">LRECL=</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0220989"></A><A name="z0852832">&#13;PAGESIZE=<I>value</I></A></DT>
<DD>sets the number of lines per page for your
reports.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Alias:</B></TD>
<TD align="left" bgcolor="#F5F5F5">PS=</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">the value of the PAGESIZE=
system option.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The value may range from
15 to 32767.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If any TITLE statements
are currently defined, the lines they occupy are included in counting the
number of lines for each page.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">After the value of the PAGESIZE=
option is reached, the output pointer advances to line 1 of a new page.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See
Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0218916.htm">PAGESIZE=</A></TD>
</TABLE>
<P></DD>

<DT><A NAME="z0221002"></A><A name="z0852840">&#13;PRINT | NOPRINT</A></DT>
<DD>controls whether carriage control characters
are placed in the output lines.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">When you write to
a print file, the value of the N= option must be either 1 or PAGESIZE.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The PRINT option is not
necessary if you are using fileref
PRINT.</TD>
</TABLE>

<P>
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;The
carriage control
characters that are written to a file can be specific to the operating environment.
For details, see the SAS documentation for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><P></DD>

<DT><A name="z0852846">&#13;RECFM=<I>record-format</I></A></DT>
<DD>specifies the record format of the output
file.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Range:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Values are dependent on
the operating
environment.</TD>
</TABLE>

<P>
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;Values
for <I>record-format</I><B></B> are dependent on the operating environment.
For details, see the SAS documentation for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><P></DD>

<DT><A NAME="z0180482"></A><A name="z0852851">&#13;STOPOVER</A></DT>
<DD>stops processing the DATA step immediately
if a PUT statement attempts to write a data item that exceeds the current
line length. In such a case, SAS discards the data item that exceeds the current
line length, writes the portion of the line that was built before the error
occurred, and issues an error message.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">FLOWOVER</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0180480">FLOWOVER</A> and
<A href="#z0220977">DROPOVER</A></TD>
</TABLE>
<P></DD>

<DT><A name="z0852855">&#13;TITLES | NOTITLES</A></DT>
<DD>controls the printing of the current title
lines on the pages of print files.  When NOTITLES is omitted, or when TITLES
is specified, SAS prints any titles that are currently defined.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Alias:</B></TD>
<TD align="left" bgcolor="#F5F5F5">TITLE | NOTITLE</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Default:</B></TD>
<TD align="left" bgcolor="#F5F5F5">TITLES</TD>
</TABLE>
<P></DD>

<DT>_FILE_=<I>variable</I></DT>
<DD>names a character variable that references
the current output buffer of this FILE statement. You can use the variable
in the same way as any other variable, even as the target of an assignment.
The variable is automatically retained and initialized to blanks. Like automatic
variables, the _FILE_= variable is not written to the data set. 
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><I>variable </I> cannot be a previously defined variable. Make sure that the
_FILE_= specification is the first occurrence of this variable in the DATA
step. Do not set or change the length of _FILE_= variable with the LENGTH
or ATTRIB statements.  However, you can attach a format to this variable with
the ATTRIB or FORMAT statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Interaction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The maximum length
of this character variable is the logical record length (LRECL) for the specified
FILE statement. However, SAS does not open the file to know the LRECL until
prior to the execution phase. Therefore, the designated size for this variable
during the compilation phase is 32,767.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Modification of this variable
directly modifies the FILE statement's current output buffer. Any subsequent
PUT statement for this FILE statement outputs the contents of the modified
buffer. The _FILE_= variable accesses only the current output buffer of the
specified FILE statement even if you use the N= option to specify multiple
output buffers.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">To access the contents of
the output buffer in another statement without using the _FILE_= option, use
the automatic variable _FILE_. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Main Discussion:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z1010343">Accessing the Contents of the Output Buffer</A></TD>
</TABLE>
<P></DD>
</DL>
  
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289617">Host Options</A></FONT></B></TD></TR></TABLE>

<P>
<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;For
descriptions of host-specific options on the FILE statement, see the SAS documentation
for your operating environment.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom">

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289618">Details</A></FONT></B></TD></TR></TABLE>

<BR><H3><A name="z0172275">Overview</A></H3>


<P>By default, PUT
statement output is written to the SAS log. Use the FILE statement to route
this output to either the same external file to which procedure output is
written or to a different external file. You can indicate whether or not carriage
control characters should be added to the file. See the <A href="#z0221002">PRINT | NOPRINT option </A>.
<P>You can use the
FILE statement in conditional (IF-THEN)
processing because it is executable. You can also use multiple FILE statements
to write to more than one external file in a single DATA step.

<P><B>Operating Environment Information:</B>&nbsp;&nbsp;&nbsp;Using the FILE
statement requires host-specific information.
See the SAS documentation for your operating environment before you use this
statement.&nbsp;&nbsp;<img border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom">
<P>You can now use the Output Delivery System with the
FILE statement to write DATA step results. This functionality is briefly discussed
here. For details, see <A href="z0631259.htm">FILE, ODS</A>.
For further information, see <B>The Complete Guide to the SAS Output Delivery
    System</B>.
<BR><H3><A name="z0289619">Updating an External File in Place</A></H3>


<P>You can use the FILE statement with the INFILE and PUT statements to update
an external file in place, updating either an entire record or only selected
fields within a record. Follow these guidelines: 
<P>
<UL>

<LI>Always place the INFILE statement first.<P>

<LI>Specify the same fileref
or physical filename
in the INFILE and FILE statements.<P>

<LI>Use options that are common to both the FILE and
INFILE statements in the INFILE statement. (Any such options that are used
in the FILE statement are ignored.)<P>

<LI>Use the SHAREBUFFERS option in the INFILE statement
to allow the FILE and INFILE statements to use the same buffer, which saves
CPU time and enables you to update individual fields instead of entire records.<P>
</UL>

<BR><H3><A name="z1010343">Accessing the Contents of the Output Buffer</A></H3>


<P>In addition to the _FILE_= variable, you can use the automatic
_FILE_ variable to reference the contents of the current output buffer for
the most recent execution of the FILE statement. This character variable is
automatically retained and initialized to blanks. Like other automatic variable,
_FILE_ is not written to the data set.
<P>When you specify the _FILE_= option in a FILE statement
then this variable is also indirectly referenced by the automatic  _FILE_
  variable. If the automatic _FILE_ variable is present and you omit _FILE_=
in a particular FILE statement, then SAS creates an internal _FILE_= variable
for that FILE statement. Otherwise, SAS does not create  the _FILE_= variable
for a particular FILE. 
<P>During execution and at the point of reference, the
maximum length of this character variable is the maximum length of the current
_FILE_= variable.  However, because _FILE_ merely references other variables
whose lengths are not known until prior to the execution phase, the designated
length is 32,767 during the compilation phase. For example, if you assign
_FILE_ to a new variable whose length is undefined, the  default length of
the new variable is 32,767. You can not use the LENGTH statement and the ATTRIB
statement to set or override the length of _FILE_. You can use the FORMAT
statement and the ATTRIB statement to assign a format to _FILE_.
<P>Like other SAS variables, you can update the _FILE_
variable. The two methods are 
<DL>
<DT> 
_FILE_ = &lt; <I>'quoted string'</I>| <I>character
expression</I>&gt;</DT>
<DD>This assignment statement updates the contents
of the current output buffer and sets the buffer length to the length of <I>'quoted string'</I> or <I>character expression</I>.
However, this does not affect the PUT statement's current column pointer.
The next PUT statement for this FILE statement will begin to update the buffer
at column 1 or at the last known location when trailing @ is used in the PUT
statement. For example, 



<PRE>file print;
_file_='_FILE_';
put 'This is PUT';</PRE>outputs 


<CODE><B>This is PUT</B></CODE> while       



<PRE>file print;
_file_='This is from FILE, oh yeah';
put @14 'both';</PRE>outputs 


<CODE><B>This is from both,
oh yeah</B></CODE>.<P></DD>

<DT>a PUT statement</DT>
<DD>The PUT statement will update the _FILE_
variable because the PUT statement formats data in the output buffer and _FILE_
points to that buffer. However, by default SAS clears the output buffers after
a PUT statement executes and outputs the current record (or N= block of records).
Therefore, if you wish to examine or further modify the contents of _FILE_
before it is output include a trailing @ or @@ in any PUT statement (when
N=1). For other values of N=, use a trailing @ or @@ in any PUT statement
where the last line pointer location is on the last record of the record block
. In the following code when N=1         



<PRE>file ABC;
put 'Something' @;
Y=trim(_file_)||' is here';
file ABC; 
put 'Nothing' ; 
y=trim(_file_)||' is here';
put y;</PRE> Y is first assigned 


<CODE><B>Something
is here</B></CODE> then Y is assigned 


<CODE><B>is here</B></CODE>. <P></DD>
</DL>
Any modification of the
_FILE_ directly modifies the current output buffer for the current FILE statement.
 The execution of any subsequent PUT statements for this FILE statement will
output the contents of the modified buffer.
<P>_FILE_ only accesses the contents of the current output
buffer for a FILE statement, even when you use the N= option to specify multiple
buffers. You can access all the N= buffers, but you must use a PUT statement
with the # line pointer control to make the desired buffer the current output
buffer.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289620">Comparisons</A></FONT></B></TD></TR></TABLE>

<P>
<P>
<UL>

<LI><A name="z0852871">&#13;The FILE statement specifies the <B>output</B> file for
PUT statements. The INFILE statement specifies the <B>input</B> file
for INPUT statements.</A><P>

<LI>Both the FILE and INFILE statements allow you
to use options that provide SAS with additional information about the external
file being used.<P>

<LI>In the Program Editor, Log, and Output windows,
the FILE command specifies an external file and writes the contents of the
window to the file.<P>
</UL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289621">Examples</A></FONT></B></TD></TR></TABLE>

<BR><H3> <A name="z0220948">Example 1: Executing Statements When a New Page Is Begun</A> </H3>


<P>This DATA step illustrates how to use the HEADER= option:

<P>
<UL>

<LI><B>Write a report.</B> Use DATA _NULL_ to
write a report rather than create a data set.



<PRE>data _null_;
   set sprint;
   by dept;</PRE><P>

<LI><B>Route output to the standard print file.
Point to the header information.</B> The PRINT fileref routes output to
the same location as procedure output. HEADER= points to the label that precedes
the statements that create the header for each page:



<PRE>   file print header=newpage;</PRE><P>

<LI><B>Start a new page for each department:</B>



<PRE>   if first.dept then put _page_;
      put @22 salesrep @34 salesamt;</PRE><P>

<LI><B>Write a header on each page.</B> These
statements execute each time a new page is begun. RETURN is necessary before
the label and as the final statement in a labeled group:



<PRE>   return;
      newpage:
         put @20 'Sales for 1989' /
             @20 dept=;
         return;
   run;</PRE><P>
</UL>
 
<BR><H3> <A name="z0220952">Example 2: Determining New Page by Lines Left on the Current Page</A> </H3>


<P>This DATA step demonstrates using the LINESLEFT= option
to determine where the page break should occur, according to the number of
lines left on the current page. 
<P>
<UL>

<LI><B>Write a report.</B> Use DATA _NULL_ to
write a report rather than create a data set:
<PRE>data _null_;
   set info;</PRE><P>

<LI><B>Route output to the standard print file.</B> The PRINT fileref routes output to the same location as procedure
output. LINESLEFT indicates that the variable REMAIN contains the number of
lines left on the current page:
<PRE>   file print linesleft=remain pagesize=20;
      put @5 name @30 phone 
          @35 bldg @37 room;</PRE><P>

<LI> <B>Begin a new page when there are fewer than
7 lines left on the current page.</B> Under this condition, PUT _PAGE_
begins a new page and positions the pointer at line 1:
<PRE>   if remain&lt;7 then put _page_ ;
   run;</PRE><P>
</UL>

<BR><H3> <A name="z0220954">Example 3: Arranging the Contents of an Entire Page</A> </H3>


<P>This example shows use of N=PAGESIZE in a DATA step to produce
a two-column telephone book listing, each column containing a name and a phone
number: 
<P>
<UL>

<LI><B>Create a report and write it to a print
file.</B> Use DATA _NULL_ to write a report rather than create a data set.
PRINT writes carriage control characters to the output file. N=PAGESIZE makes
the entire page available to the output pointer:
<PRE>data _null_;
   file '<I>external-file</I>' print n=pagesize;</PRE><P>

<LI><B>Specify the columns for the report.</B>
This DO loop iterates twice on each DATA step iteration. The COL value is
1 on the first iteration and 40 on the second:
<PRE>   do col=1, 40;</PRE><P>

<LI><B>Write 20 lines of data.</B> This DO loop
iterates 20 times to write 20 lines in column 1. When finished, the outer
loop sets COL equal to 40, and this DO loop iterates 20 times again, writing
20 lines of data in the second column. The values of LINE and COL, which are
set and incremented by the DO statements, control where the PUT statement
writes the values of NAME and PHONE on the page:
<PRE>   do line=1 to 20;
      set info;
      put #line @col name $20. +1 phone 4.;
   end;</PRE><P>

<LI><B>After composing 2 columns of data, write
the page.</B> This END statement ends the outer DO loop. The PUT _PAGE_
writes the current page and moves the pointer to the top of a new page:
<PRE>   end;
      put _page_;
   run;</PRE><P>
</UL>
   
<BR><H3> <A name="z0220942">Example 4: Identifying the Current Output File</A> </H3>


<P>This DATA step causes a file identification message
to print in the log and assigns the value of the current output file to the
variable MYOUT. The PUT statement, demonstrating the assignment of the proper
value to MYOUT, writes the value of that variable to the output file:
<PRE>data _null_;
   length myout $ 200;
   file <I>file-specification</I> filename=myout;
   put myout=;
   stop;
run;</PRE>
<P>The PUT statement writes a line to the current output
file that contains the physical name of the file:
<PRE>MYOUT=<I>your-output-file</I></PRE>
<BR><H3> <A name="z0220945">Example 5: Dynamically Changing the Current Output File</A> </H3>


<P>This DATA step uses the FILEVAR= option to dynamically
change the currently opened output file to a new physical file. 
<P>
<UL>

<LI><B>Write a report. Create a long character
variable.</B> Use DATA _NULL_ to write a report rather than create a data
set. The LENGTH statement creates a variable with length long enough to contain
the name of an external file:
<PRE>data _null_;
   length name $ 200;</PRE><P>

<LI><B>Read an in-stream data line and assign a
value to the NAME variable:</B>
<PRE>   input name $;</PRE><P>

<LI><B>Close the current output file and open a
new one when the NAME variable changes.</B> The <I>file-specification</I> is just a place holder; it can be any valid SAS name:
<PRE>   file <I>file-specification</I> filevar=name mod;
      date = date();</PRE><P>

<LI><B>Append a log record to currently open output
file:</B>  
<PRE>   put 'records updated ' date date.;</PRE><P>

<LI><B>Supply the names of the external files:</B>  
<PRE>datalines;
<I>external-file-1</I>
<I>external-file-2</I>
<I>external-file-3</I>
;</PRE><P>
</UL>

<BR><H3> <A name="z0220950">Example 6: When the Output Line Exceeds the Line Length of the Output File</A> </H3>


<P>Because the combined lengths of the variables
are longer than the output line (80 characters), this PUT statement automatically
writes three separate records:  



<PRE>file <I>file-specification</I> linesize=80;
   put name $ 1-50 city $ 71-90 state $ 91-104;</PRE>
<P>The value of NAME appears in the first record, CITY
begins in the first column of the second record, and STATE in the first column
of the third record.
<BR><H3> <A name="z0220956">Example 7: Reading Data and Writing Text Through a TCP/IP Socket</A> </H3>


<P>This example shows reading raw data from a file through
a TCP/IP socket.  The NBYTE= option is used in the INFILE statement:



<PRE>/* Start this first as the server */

   filename serve socket ':5205' server 
            recfm=s 
            lrecl=25 blocksize=2500;

data _null_;
   nb=25;
   infile serve nbyte=nb;
   input text $char25.;
   put _all_;
run;</PRE>
<P>This example shows writing text to a file through a
TCP/IP socket:



<PRE>/* While the server test is running,*/ 
/*continue with this as the client. */

filename client socket "&amp;hstname:5205" 
         recfm=s
         lrecl=25 blocksize=2500;

data _null_;
   file client;
   put '<I>Some text to length 25...</I>';
run;</PRE>


  
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><FONT size="5"><A name="z0289645">See Also</A></FONT>
</FONT></B></TD></TR></TABLE>
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>Statements:
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD><A href="z0631259.htm">FILE, ODS</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0211297.htm">FILENAME</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0146932.htm">INFILE</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0201974.htm">LABEL</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0161869.htm">PUT</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0201969.htm">RETURN</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0220968.htm">TITLE</A></TD></TR></TABLE></TD></TR></TABLE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z1212710.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0631259.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0171874">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>