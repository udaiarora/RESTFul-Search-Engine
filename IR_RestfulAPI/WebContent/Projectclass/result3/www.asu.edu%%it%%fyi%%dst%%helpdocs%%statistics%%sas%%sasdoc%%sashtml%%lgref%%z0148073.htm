<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Statements : INPUT, Formatted </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0148066.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0144370.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">INPUT, Formatted</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0148073">INPUT, Formatted</A></FONT></H1>

<P><HR><BR><B>Reads input values with specified informats and assigns them to
the corresponding SAS variables</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Valid</B></TD>
<TD bgcolor="#CCCCCC" align="left">in a DATA step
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Category:</B></TD>
<TD bgcolor="#CCCCCC" align="left">File-handling
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Type:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Executable
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z0148073.htm#zid-2410"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0148073.htm#zid-2411"><FONT size="2"><B>Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0148073.htm#z0148156"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0148073.htm#z0289791"><FONT size="2">When to Use Formatted Input</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0148073.htm#z0289792"><FONT size="2">Missing Values</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0148073.htm#z0289793"><FONT size="2">Reading Variable-Length Records</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0148073.htm#z0148113"><FONT size="2">How to Group Variables and Informats</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0148073.htm#z0289798"><FONT size="2">How to Store Informats</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0148073.htm#z0289799"><FONT size="2"><B>Comparisons</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0148073.htm#z0289800"><FONT size="2"><B>Examples</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0148073.htm#z0148152"><FONT size="2">Example 1: Formatted Input with Pointer Controls</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0148073.htm#z0148159"><FONT size="2">Example 2: Using Informat Lists</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0148073.htm#z0289804"><FONT size="2"><B>See Also</b></FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="zid-2410">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>INPUT</B> &lt;<I>pointer-control</I>&gt; <I>variable
informat.</I> &lt;@ | @@&gt;;
</TD></TR></TABLE>
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>INPUT</B>&lt;<I>pointer-control</I>&gt;
(<I>variable-list</I>) (<I>informat-list</I>) 
<BR>&lt;@ | @@&gt;; 
</TD></TR></TABLE>
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>INPUT</B>
&lt;<I>pointer-control</I>&gt;
(<I>variable-list</I>) (&lt;<I>n</I>*&gt; <I>informat.</I>) 
<BR>&lt;@ | @@&gt;;
</TD></TR></TABLE>
<BR><H3><A name="zid-2411">Arguments</A></H3>

<P><A name="z0853886">&#13;</A>
<DL>
<DT><B><B><I>pointer-control</I></B></B></DT>
<DD>moves the input pointer to a specified line
or column in the input buffer.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0146292.htm#z0146301">Column Pointer Controls</A> and
<A href="z0146292.htm#z0146303">Line Pointer Controls</A></TD>
</TABLE>
<P></DD>

<DT><B><B><I>variable</I></B></B></DT>
<DD>names a variable that is assigned input
values.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Requirement:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The (<B><I>variable-list</I></B>) is followed by an (<B><I>informat-list</I></B>).</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0148152">Formatted Input with Pointer Controls</A></TD>
</TABLE>
<P></DD>

<DT><B>(<B><I>variable-list</I></B>)</B></DT>
<DD>specifies a list of variables that are assigned
input values.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0148113">How to Group Variables and Informats</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0148159">Using Informat Lists</A></TD>
</TABLE>
<P></DD>

<DT><B><B><I>informat.</I></B></B></DT>
<DD>specifies a SAS informat to use to read
the variable values.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">Decimal points  in the actual
input values override decimal specifications in a numeric informat.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0309877.htm"> Informats</A>  </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0148152">Formatted Input with Pointer Controls</A></TD>
</TABLE>
<P></DD>

<DT><B>(<B><I>informat-list</I></B>)</B></DT>
<DD>specifies a list of informats to use to
read the values for the preceding list of variables
<P>In the INPUT statement, (<B><I>informat-list</I></B>) can include

<P>
<DL>
<DT><B><I><B><I>informat.</I></B></I></B></DT>
<DD>specifies an informat to use to read the
variable values.<P></DD>

<DT><B><I><B><I>pointer-control</I></B></I></B></DT>
<DD>specifies one of these pointer controls
to use to position a value: @, #, /, or +.<P></DD>

<DT><B><I><B><I>n</I></B></I></B>*</DT>
<DD>specifies to repeat <B><I><B>n</B></I></B> times the next informat in an informat list.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Example:</B></TD>
<TD align="left" bgcolor="#F5F5F5">This  statement uses
the 7.2 informat to read GRADES1, GRADES2, and GRADES3 and the 5.2 informat
to read GRADES4 and GRADES5:



<PRE>input (grades1-grades5)(3*7.2, 2*5.2);</PRE></TD>
</TABLE>
<P></DD>
</DL>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The (<B><I>informat-list</I></B>) must follow the (<B><I>variable-list</I></B>).</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0148113">How to Group Variables and Informats</A></TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Featured
in:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="#z0148159">Using Informat Lists</A></TD>
</TABLE>
<P></DD>

<DT><B><A name="z0853916">&#13;@</A></B></DT>
<DD>holds an input record for the execution
of the next INPUT statement within the same iteration of the DATA step. This
line-hold specifier is called <I><B>trailing @</B></I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The trailing @ must
be the last item in the INPUT statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The trailing @ prevents
the next INPUT statement from automatically releasing the current input record
and reading the next record into the input buffer. It is useful when you need
to read from a record multiple times. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0146292.htm#z0146300">Using Line-Hold Specifiers</A></TD>
</TABLE>
<P></DD>

<DT><B><A name="z0853921">&#13;@@</A></B></DT>
<DD>holds an input record for the execution
of the next INPUT statement across iterations of the DATA step. This line-hold
specifier is called <I><B>double trailing @</B></I>.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The double trailing
@ must be the last item in the INPUT statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">The  double trailing @ is
useful when each input line contains values for several observations.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See:</B></TD>
<TD align="left" bgcolor="#F5F5F5"><A href="z0146292.htm#z0146300">Using Line-Hold Specifiers</A></TD>
</TABLE>
<P></DD>
</DL>


<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0148156">Details</A></FONT></B></TD></TR></TABLE>

<BR><H3><A name="z0289791">When to Use Formatted Input</A></H3>


<P>With formatted input, an informat follows a variable name and defines how
SAS reads the values of this variable. An informat gives the data type and
the field width of an input value. Informats also read data that are stored
in nonstandard form, such as packed decimal, or numbers that contain special
characters such as commas.<FONT size="-1"><A href="#footnote1">(footnote 1)</A></FONT> See   
<A href="z1131331.htm">Definition</A>
for descriptions of SAS informats.
<P>Simple formatted input requires that the variables be
in the same order as their corresponding values in the input data. You can
use pointer controls to read variables in any order. For more information,
see <A href="z0146292.htm">INPUT</A>.
<BR><H3><A name="z0289792">Missing Values</A></H3>


<P> Generally,
SAS represents missing values in formatted input with a single period for
a numeric value and with blanks for a character value. The informat that you
use with formatted input determines how SAS interprets a blank. For example,
$CHAR.<I>w</I> reads the blanks as part of the value,
whereas BZ.<I>w</I> converts a blank to zero.  
<BR><H3><A name="z0289793">Reading Variable-Length Records</A></H3>


<P>By default, SAS uses the <A href="z0146932.htm#z0167074">FLOWOVER
option </A> to read varying-length data records.
If the record contains fewer values than expected, the INPUT statement reads
the values from the next data record. To read  varying-length data. you may
need to use the <A href="z0146932.htm#z0166997">TRUNCOVER option</A>  in the INFILE statement. For more
information, see <A href="z0146932.htm#z0167150">Reading Past the End of a Line</A>.
<BR><H3><A name="z0148113">How to Group Variables and Informats</A></H3>


<P>When the input values are arranged in a pattern, you can group the informat
list. A grouped informat list consists of two lists: 
<P>
<UL>

<LI>the names of the variables to read enclosed in
parentheses<P>

<LI>the corresponding informats separated by either
blanks or commas and enclosed in parentheses.<P>
</UL>

<P>Informat lists can make an INPUT statement shorter because
the informat list is recycled until all variables are read and the numbered
variable names can be used in abbreviated form. This avoids listing the individual
variables.
<P>For example, if the values for the five variables SCORE1
through SCORE5 are stored as four columns per value without intervening blanks,
this INPUT statement reads the values:  



<PRE>input (score1-score5) (4. 4. 4. 4. 4.);</PRE>


However, if you specify more variables than informats, the INPUT statement
reuses the informat list to read the remaining variables. A shorter version
of the previous statement is



<PRE>input (score1-score5) (4.);</PRE>
<P>You can use as many informat lists as necessary in an
INPUT statement, but do not nest the informat lists. After all the values
in the variable list are read, the INPUT statement ignores any directions
that remain in the informat list. In this example the value of X is read with
the 2. informat :  



<PRE>data test;
   input (x y z) (2.,+1);
   datalines;
2 24 36
0 20 30
   ;</PRE>


The +1 column pointer control moves the pointer forward one column
after X is read. The value of Y is read with the 2. informat. Again, the +1
column pointer moves the pointer forward one column. Then, the value of Z
is read with the 2. informat.  For the third iteration, the INPUT statement
ignores the +1 pointer control.
<P>The <I>n</I>*  modifier in an
informat list specifies to repeat  the next informat <I>n</I>
times. For example,



<PRE>input (name score1-score5) ($10. 5*4.);</PRE>
<BR><H3><A name="z0289798">How to Store Informats</A></H3>


<P>The informats that you specify in the INPUT statement are not stored with
the SAS data set. Informats that you specify with the INFORMAT or ATTRIB statement
are permanently stored. Therefore, you can read a data value with a permanently
stored informat in a later DATA step without having to specify the informat
or use PROC FSEDIT to enter data in the correct format.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289799">Comparisons</A></FONT></B></TD></TR></TABLE>

<P>When a variable is read with formatted
input, the pointer movement is similar to that of column input. The pointer
moves the length that the informat specifies and stops at the next column.
 To read data with informats that are not aligned in columns, use <B>modified
list input</B>. This allows you to take advantage of the scanning feature
in list input. See <A href="z0144370.htm#z0148116">When to Use List Input</A>.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0289800">Examples</A></FONT></B></TD></TR></TABLE>

<BR><H3> <A name="z0148152">Example 1: Formatted Input with Pointer Controls</A> </H3>


<P>This INPUT statement uses informats and pointer controls:  



<PRE>data sales;
   infile <I>file-specification</I>;
   input item $10. +5 jan comma5. +5 feb comma5. 
         +5 mar comma5.;
run;</PRE>


It can read these input data records: 



<PRE>----+----1----+----2----+----3----+----4
trucks         1,382     2,789     3,556
vans           1,265     2,543     3,987
sedans         2,391     3,011     3,658</PRE>The value for ITEM is read from the first 10 columns in a record. The
pointer stops in column 11. The trailing blanks are discarded and the value
of ITEM is written to the program data vector. Next, the pointer moves five
columns to the right before the INPUT statement uses the COMMA5. informat
to read the value of JAN. This informat uses five as the  field width to read
numeric values that contain a comma. Once again, the pointer moves five columns
to the right before the INPUT statement uses the COMMA5. informat to read
the values of FEB and MAR.
<BR><H3> <A name="z0148159">Example 2: Using Informat Lists</A> </H3>


<P>This
INPUT statement uses the character informat $10. to read the values of the
variable NAME and uses the numeric informat 4. to read the values of the five
variables SCORE1 through SCORE5:  



<PRE>data scores;
   input (name score1-score5) ($10. 5*4.);
   datalines;
Whittaker 121 114 137 156 142
Smythe    111 97  122 143 127
;</PRE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><FONT size="5"><A name="z0289804">See Also</A></FONT>
</FONT></B></TD></TR></TABLE>
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>Statements:
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD><A href="z0146292.htm">INPUT</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0144370.htm">INPUT, List</A></TD></TR></TABLE></TD></TR></TABLE>

<HR><A name="footnote1"><FONT size="-1">FOOTNOTE 1:&nbsp;&nbsp;</FONT></A>See   
<B>SAS Language Reference: Concepts</B> for information on  standard
and nonstandard data values.&nbsp;<A href="#z1dard"><IMG border="0" src="../common/images/fntarrow.gif" alt="[arrow]"></A>
<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0148066.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0144370.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0148073">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>