<HTML>
<HEAD>
<TITLE>RESET Statement</TITLE>
<LINK REL="STYLESHEET" TYPE="text/css" HREF="../sas.css">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<A NAME="netflowreset">&#13;</A>
<!--Navigation Panel-->
<TABLE BORDER="0" CELLPADDING="0">
<TR VALIGN="TOP">
  <TD ALIGN="CENTER">
  <A NAME="topofpage" HREF="index.htm">
  <IMG BORDER="0" SRC="../../common/images/cont1.gif" ALT="Chapter Contents" WIDTH="99" HEIGHT="16"><BR><FONT SIZE="-2">Chapter Contents</FONT></A></TD>
  <TD ALIGN=CENTER>
  <A HREF="sect29.htm"><IMG BORDER="0" SRC="../../common/images/prev1.gif" ALT="Previous" WIDTH="99" HEIGHT="16"><BR><FONT SIZE="-2">Previous</FONT></A></TD>
  <TD ALIGN=CENTER>
  <A HREF="sect31.htm"><IMG BORDER="0" SRC="../../common/images/next1.gif" ALT="Next" WIDTH="99" HEIGHT="16"><BR><FONT SIZE="-2">Next</FONT></A></TD>
</TR>
</TABLE>
<TABLE BGCOLOR="#CCCC99" WIDTH="100%" CELLPADDING=4>
<TR>
  <TD VALIGN=MIDDLE CLASS="chaphead"><I><FONT SIZE="2">The NETFLOW Procedure</FONT></I></TD>
</TR>
</TABLE><BR>
<P><!--End of Navigation Panel-->
<H2>RESET Statement</H2>
<A NAME="idxnet0963">&#13;</A><A NAME="idxnet0964">&#13;</A><A NAME="idxnet0965">&#13;</A><A NAME="idxnet0966">&#13;</A><A NAME="idxnet0967">&#13;</A><A NAME="idxnet0968">&#13;</A><DL><DD><B CLASS="ssbeleven">RESET</B> <I CLASS="ssieleven"> options <SPAN CLASS="ssbeleven"><B>;</B></SPAN></I></DL>
<DL><DD><B CLASS="ssbeleven">SET</B> <I CLASS="ssieleven"> options <SPAN CLASS="ssbeleven"><B>;</B></SPAN></I></DL><BR>The RESET statement is used to change options after PROC NETFLOW
has started execution. Any of the following options can appear in the
<A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement.
<BR><BR>Another name for the RESET statement is SET. You can use SET when you
are resetting options and RESET when you are setting options for the 
first time.
<BR><BR>The following options
fall roughly into five categories:
<UL>
<LI>
output data set specifications
<LI>
options that indicate conditions
under which
optimization is to  be halted temporarily, giving you an
opportunity to use PROC NETFLOW interactively
<LI>
options that control aspects of the
operation of the Network Primal Simplex
optimization
<LI>
options that control the pricing strategies of the
Network Simplex optimizer
<LI>
miscellaneous options
</UL>
<BR><BR>If you want to examine the setting of any options, use the <A HREF="sect35.htm#netflowshow">SHOW</A>
statement.
<A NAME="idxnet0969">&#13;</A><A NAME="idxnet0970">&#13;</A>If you are interested in looking at only those options that fall
into a particular category, the <A HREF="sect35.htm#netflowshow">SHOW</A> statement has options that enable
you to do this.
<BR><BR>The execution of PROC NETFLOW has three stages.
<A NAME="idxnet0971">&#13;</A><A NAME="idxnet0972">&#13;</A>In stage zero the problem data are read from the
<A HREF="sect15.htm#netflownodedata">NODEDATA</A>= <A HREF="sect15.htm#netflowarcdata">ARCDATA</A>= and <A HREF="sect15.htm#netflowcondata">CONDATA</A>= data sets.
<A NAME="idxnet0973">&#13;</A><A NAME="idxnet0974">&#13;</A><A NAME="idxnet0975">&#13;</A><A NAME="idxnet0976">&#13;</A><A NAME="idxnet0977">&#13;</A><A NAME="idxnet0978">&#13;</A>If a warm start is not available, an initial basic feasible solution
is found.
<A NAME="idxnet0979">&#13;</A><A NAME="idxnet0980">&#13;</A><A NAME="idxnet0981">&#13;</A><A NAME="idxnet0982">&#13;</A>Some options of the
<A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement control what occurs in stage zero.
By the time the first RESET statement is processed,
stage zero has already been completed.
<BR><BR>In the first stage, an optimal solution to the network flow
problem neglecting any side constraints is found.
The primal and dual solutions for this relaxed problem can
be saved in the <A HREF="sect15.htm#netflowarcout">ARCOUT</A>= data set and the <A HREF="sect15.htm#netflownodeout">NODEOUT</A>= data set, respectively.
<A NAME="idxnet0983">&#13;</A><A NAME="idxnet0984">&#13;</A><A NAME="idxnet0985">&#13;</A><A NAME="idxnet0986">&#13;</A>In the second stage, the side constraints are examined and
some initializations occur.
Some preliminary work is also needed to commence optimization that
considers the constraints.
An optimal solution to the network flow
problem with side constraints is found. The primal and dual
solutions for this side-constrained problem are saved in the
<A HREF="sect15.htm#netflowconout">CONOUT</A>= data set and the <A HREF="sect15.htm#netflowdualout">DUALOUT</A>= data set, respectively.
<A NAME="idxnet0987">&#13;</A><A NAME="idxnet0988">&#13;</A><A NAME="idxnet0989">&#13;</A><A NAME="idxnet0990">&#13;</A>Many options in the RESET statement have the same name except
that they  have as a
suffix the numeral 1 or 2.
Such options have much the same purpose, but option1 controls what
occurs during the first stage when optimizing the network
neglecting any side constraints and option2 controls what occurs
in the second stage when PROC NETFLOW is performing constrained
optimization.
<BR><BR>Some options can be turned off by the option prefixed by the word
<EM>NO</EM> . For example, <A HREF="sect30.htm#netflowfeasp1">FEASIBLEPAUSE1</A> may have been specified in a
RESET statement and in a later RESET statement, you can
specify <A HREF="sect30.htm#netflownofeasp1">NOFEASIBLEPAUSE1</A>.
In a later RESET statement, you can respecify <A HREF="sect30.htm#netflowfeasp1">FEASIBLEPAUSE1</A> and,
in this way, toggle this option.
<BR><BR>The options available with the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement are summarized
by purpose in <A HREF="sect30.htm#nettset">Table 4.20</A>.
<BR><BR><A NAME="idxnet0991">&#13;</A><A NAME="idxnet0992">&#13;</A><A NAME="idxnet0993">&#13;</A><A NAME="idxnet0994">&#13;</A><A NAME="idxnet0995">&#13;</A><A NAME="idxnet0996">&#13;</A><A NAME="idxnet0997">&#13;</A><A NAME="idxnet0998">&#13;</A><BR><BR></P><A NAME="nettset"><SPAN CLASS="ssften"><B>Table 4.20:</B> Functional Summary, RESET statement: PROC NETFLOW</SPAN></A>
<BR><BR><TABLE COLS=3 FRAME=ABOVE RULES=GROUPS CELLPADDING=5 CELLSPACING=0 BGCOLOR="#F0F0F0" BORDER=1><COL ALIGN=JUSTIFY><COL><COL>
<TBODY>
<TR VALIGN="TOP"><TD BGCOLOR="#BBBBBB" ><B>
                      <FONT COLOR="#003399" FACE="Verdana, Helvetica, Helv"><SPAN CLASS="ssbthirteen"><B>Description</B></SPAN></FONT></B>
                      </TD>
                     <TD BGCOLOR="#BBBBBB"  ALIGN=LEFT NOWRAP><B>
                      <FONT COLOR="#003399" FACE="Verdana, Helvetica, Helv"><SPAN CLASS="ssbthirteen"><B>Statement</B></SPAN></FONT></B>
                      </TD>
                     <TD BGCOLOR="#BBBBBB"  ALIGN=LEFT NOWRAP><B>
                      <FONT COLOR="#003399" FACE="Verdana, Helvetica, Helv"><SPAN CLASS="ssbthirteen"><B>Option</B></SPAN></FONT></B>
                      </TD>
                     </TR><TBODY>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP COLSPAN=2><B>Output Data Set Options</B></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">unconstrained solution data set</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect15.htm#netflowarcout">ARCOUT</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">unconstrained solution data set</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect15.htm#netflownodeout">NODEOUT</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">constrained solution data set</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect15.htm#netflowconout">CONOUT</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">constrained solution data set</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect15.htm#netflowdualout">DUALOUT</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP COLSPAN=2><B>Stop Optimization Options</B></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">pause after stage 1. Don't start stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowendpause1">ENDPAUSE1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">pause when feasible - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowfeasp1">FEASIBLEPAUSE1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">pause when feasible - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowtwo1">FEASIBLEPAUSE2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">maximum number of iterations - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowmaxit1">MAXIT1</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">maximum number of iterations - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowtwo1">MAXIT2</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowendpause1">ENDPAUSE1</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownoendpause1">NOENDPAUSE1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowfeasp1">FEASIBLEPAUSE1</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownofeasp1">NOFEASIBLEPAUSE1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowtwo1">FEASIBLEPAUSE2</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowtwo1">NOFEASIBLEPAUSE2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">pause every <A HREF="sect30.htm#netflowpause1">PAUSE1</A> iterations - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpause1">PAUSE1</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">pause every <A HREF="sect30.htm#netflowtwo1">PAUSE2</A> iterations - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowtwo1">PAUSE2</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP COLSPAN=2><B>Simplex Options</B></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">Use Big M instead of twophase - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowone1">BIGM1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">Use Big M instead of twophase - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowtwo2">BIGM2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">anti-cycling option</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowone2">CYCLEMULT1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">interchange first eligible nonkey 
with leaving key variable</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowintfirst">INTFIRST</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">invert working basis matrix (2-dim) 
every <A HREF="sect30.htm#netflowinvfreq">INVFREQ</A>= iterations</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowinvfreq">INVFREQ</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">maximum number of L row operations allowed 
before refactorization done instead of 
factor column update</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowmaxl">MAXL</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">maximum number fo LU factor column 
updates, otherwise refactorize</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowmluu">MAXLUUPDATES</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">anticycling option</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowone2">MINBLOCK1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">first eligible leaving variable used, 
otherwise best is used</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowlratio1">LRATIO1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">first eligible leaving variable used, 
otherwise best is used</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowlratio2">LRATIO2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">otherwise best is used</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowintfirst">INTFIRST</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownointfirst">NOINTFIRST</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowlratio1">LRATIO1</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownolratio1">NOLRATIO1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowlratio2">LRATIO2</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownolratio2">NOLRATIO2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowone2">PERTURB1</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowone2">NOPERTURB1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">anti-cycling option</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowone2">PERTURB1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">re-factorize working basis matrix every 
<A HREF="sect30.htm#netflowrefactfreq">REFACTFREQ</A>= iterations</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowrefactfreq">REFACTFREQ</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">use twophase instead of Big M - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowone1">TWOPHASE1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">use twophase instead of Big M - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowtwo2">TWOPHASE2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">pivot element selection parameter</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowuuuuu">U</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">zero tolerance - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowzero1">ZERO1</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">zero tolerance - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowzero2">ZERO2</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">zero tolerance - real number comparisons</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowzerotol">ZEROTOL</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP COLSPAN=2><B>Pricing Options</B></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">calculate dual values every <A HREF="sect30.htm#netflowpricing">DUALFREQ</A>= 
iterations after major iterations</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">DUALFREQ</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">pricing strategy - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">PRICETYPE1</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">pricing strategy - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">PRICETYPE2</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">used when <A HREF="sect30.htm#netflowpricing">P1SCAN</A>=PARTIAL</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">P1NPARTIAL</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">how nonbasis variables 
(<A HREF="sect30.htm#netflowpricing">PRICETYPE1</A>=NOQ) or 
queue candidates 
(<A HREF="sect30.htm#netflowpricing">PRICETYPE1</A>=Q) are scanned</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">P1SCAN</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">used when <A HREF="sect30.htm#netflowpricing">P2SCAN</A>=PARTIAL</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">P2NPARTIAL</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">how nonbasis variables 
(<A HREF="sect30.htm#netflowpricing">PRICETYPE2</A>=NOQ) or 
queue candidates 
(<A HREF="sect30.htm#netflowpricing">PRICETYPE2</A>=Q) are scanned</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">P2SCAN</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">initial queue size - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">QSIZE1</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">initial queue size - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">QSIZE2</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">used when <A HREF="sect30.htm#netflowpricing">Q1FILLSCAN</A>=PARTIAL</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">Q1FILLNPARTIAL</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">how candidates are scanned when filling 
queue - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">Q1FILLSCAN</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">used when <A HREF="sect30.htm#netflowpricing">Q2FILLSCAN</A>=PARTIAL</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">Q2FILLNPARTIAL</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">how candidates are scanned when filling 
queue - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">Q2FILLSCAN</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">queue size reduction factor</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">REDUCEQSIZE1</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">queue size reduction factor</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">REDUCEQSIZE2</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">when the queue are refreshed - stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">REFRESHQ1</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">when the queue are refreshed - stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpricing">REFRESHQ2</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP COLSPAN=2><B>Miscellaneous Options</B></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">output complete basis information to 
<A HREF="sect15.htm#netflowarcout">ARCOUT</A> and <A HREF="sect15.htm#netflownodeout">NODEOUT</A> data sets</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowfuture1">FUTURE1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">output complete basis information to 
<A HREF="sect15.htm#netflowconout">CONOUT</A> and <A HREF="sect15.htm#netflowdualout">DUALOUT</A> data sets</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowfuture2">FUTURE2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">turn off infeasibility or optimality flags 
as more optimization is to be done</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowmoreopt">MOREOPT</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowfuture1">FUTURE1</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownofuture1">NOFUTURE1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowfuture2">FUTURE2</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownofuture2">NOFUTURE2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowscratch">SCRATCH</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownoscratch">NOSCRATCH</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowztol1">ZTOL1</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownoztol1">NOZTOL1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">negates <A HREF="sect30.htm#netflowztol2">ZTOL2</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflownoztol2">NOZTOL2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">do not do stage 1 optimization. 
Do stage 2 optimization</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowscratch">SCRATCH</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">display this number of similar SAS log 
messages, suppress the rest</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowverbose">VERBOSE</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">use zero tolerance- stage 1</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowztol1">ZTOL1</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">use zero tolerance- stage 2</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowztol2">ZTOL2</A></TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP COLSPAN=2><B>Interior Point algorithm Options</B></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">allowed amount of dual infeasibility</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowtoldinf">TOLDINF</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">allowed amount of primal infeasibility</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowtolpinf">TOLPINF</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">cut-off tolerance for Cholesky factorization</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowcholtinytol">CHOLTINYTOL</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">density threshold for Cholesky processing</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowdensethr">DENSETHR</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">maximum number of Interior Point algorithm iterations</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowmaxiterb">MAXITERB</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">Primal-Dual (Duality) gap tolerance</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpdgaptol">PDGAPTOL</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">step-length multiplier</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowpdstepmult">PDSTEPMULT</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">preprocessing type</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowreset">RESET</A></TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP><A HREF="sect30.htm#netflowprsltype">PRSLTYPE</A>=</TD></TR>
<TR VALIGN="TOP"><TD BGCOLOR="#DDDDDD">&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD><TD BGCOLOR="#DDDDDD" ALIGN=LEFT NOWRAP>&#160;</TD></TR></TBODY>
</TABLE>

<BR><BR><H3><I>Output Data Set Specifications</I></H3>
In a RESET statement,
you can specify an <A HREF="sect15.htm#netflowarcout">ARCOUT</A>= data set, a <A HREF="sect15.htm#netflownodeout">NODEOUT</A>= data set, a <A HREF="sect15.htm#netflowconout">CONOUT</A>= data set,
or a <A HREF="sect15.htm#netflowdualout">DUALOUT</A>= data set.
<A NAME="idxnet0999">&#13;</A><A NAME="idxnet1000">&#13;</A><A NAME="idxnet1001">&#13;</A><A NAME="idxnet1002">&#13;</A><A NAME="idxnet1003">&#13;</A><A NAME="idxnet1004">&#13;</A><A NAME="idxnet1005">&#13;</A><A NAME="idxnet1006">&#13;</A>You are advised to specify these output data sets early because if
you make a syntax error when using PROC NETFLOW interactively or,
for some other reason, PROC NETFLOW encounters or does something
unexpected, these data sets will contain
information about the solution that was
reached.
If you had specified the <A HREF="sect30.htm#netflowfuture1">FUTURE1</A> or <A HREF="sect30.htm#netflowfuture2">FUTURE2</A> option in a
RESET statement, PROC NETFLOW may be able to resume optimization
in a subsequent run.
<A NAME="idxnet1007">&#13;</A><A NAME="idxnet1008">&#13;</A><A NAME="idxnet1009">&#13;</A><A NAME="idxnet1010">&#13;</A>You can turn off these current output data set specifications
by specifying ARCOUT=NULL, NODEOUT=NULL, CONOUT=NULL, or DUALOUT=NULL.
<BR><BR>If PROC
NETFLOW is outputting observations to an output data set and
you want this to stop,
press the keys used to stop SAS procedures.
PROC NETFLOW waiys, if necessary, and then executes the next
statement.
<BR><BR><DL>
<DT CLASS="ssbten"><B CLASS="ssbten">ARCOUT=<SPAN CLASS="ssiten"><I>SAS-data-set</I></SPAN></B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">AOUT=<SPAN CLASS="ssiten"><I>SAS-data-set</I></SPAN></B></DT>
<DD CLASS="sasop"><A NAME="idxnet0696">&#13;</A><A NAME="idxnet0697">&#13;</A><A NAME="idxnet0698">&#13;</A><A NAME="idxnet0699">&#13;</A><A NAME="idxnet0700">&#13;</A><A NAME="idxnet0701">&#13;</A>names the output data set that receives all information concerning
arc and nonarc variables, including flows and
and other information concerning the current solution and
the supply and demand information.
The current solution is the latest solution found by the
optimizer when the optimization
neglecting side constraints is halted or the unconstrained optimum
is reached.
<BR><BR>You can specify an ARCOUT= data set in any RESET
statement before the unconstrained optimum is found (even at
commencement).
Once the unconstrained optimum has been reached, use the <A HREF="sect34.htm#netflowsave">SAVE</A> statement
to produce observations in an ARCOUT= data set.
<A NAME="idxnet0702">&#13;</A><A NAME="idxnet0703">&#13;</A>Once optimization that considers constraints starts, you are will not
unable to obtain an ARCOUT= data set. Instead, use a
<A HREF="sect15.htm#netflowconout">CONOUT</A>= data set to get the current solution.
<A NAME="idxnet0704">&#13;</A><A NAME="idxnet0705">&#13;</A>See the <A HREF="sect43.htm#netflowarcconout">&#34;ARCOUT= and CONOUT= Data Sets&#34;</A> section for more information.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">CONOUT=<SPAN CLASS="ssiten"><I>SAS-data-set</I></SPAN></B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">COUT=<SPAN CLASS="ssiten"><I>SAS-data-set</I></SPAN></B></DT>
<DD CLASS="sasop"><A NAME="idxnet0706">&#13;</A><A NAME="idxnet0707">&#13;</A><A NAME="idxnet0708">&#13;</A><A NAME="idxnet0709">&#13;</A><A NAME="idxnet0710">&#13;</A><A NAME="idxnet0711">&#13;</A>names the output data set that contains the primal solution
obtained after optimization considering
side constraints reaches the optimal solution.
You can specify a CONOUT= data set in any RESET
statement before the constrained optimum is found (even at
commencement or while optimizing neglecting constraints).
Once the constrained optimum has been reached, or during stage 2
optimization,
use the <A HREF="sect34.htm#netflowsave">SAVE</A> statement
to produce observations in a CONOUT= data set.
<A NAME="idxnet0712">&#13;</A><A NAME="idxnet0713">&#13;</A>See the <A HREF="sect43.htm#netflowarcconout">&#34;ARCOUT= and CONOUT= Data Sets&#34;</A> section for more information.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">DUALOUT=<SPAN CLASS="ssiten"><I>SAS-data-set</I></SPAN></B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">DOUT=<SPAN CLASS="ssiten"><I>SAS-data-set</I></SPAN></B></DT>
<DD CLASS="sasop"><A NAME="idxnet0714">&#13;</A><A NAME="idxnet0715">&#13;</A><A NAME="idxnet0716">&#13;</A><A NAME="idxnet0717">&#13;</A><A NAME="idxnet0718">&#13;</A><A NAME="idxnet0719">&#13;</A>names the output data set that contains the dual solution
obtained after doing optimization that considering
side constraints reaches the optimal solution.
You can specify a DUALOUT= data set in any RESET
statement before the constrained optimum is found (even at
commencement or while optimizing neglecting constraints).
Once the constrained optimum has been reached, or during stage
2 optimization,
use the <A HREF="sect34.htm#netflowsave">SAVE</A> statement
to produce observations in a DUALOUT= data set.
<A NAME="idxnet0720">&#13;</A><A NAME="idxnet0721">&#13;</A>See the <A HREF="sect43.htm#netflownodedualout">&#34;NODEOUT= and DUALOUT= Data Sets&#34;</A> section for more information.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">NODEOUT=<SPAN CLASS="ssiten"><I>SAS-data-set</I></SPAN></B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">NOUT=<SPAN CLASS="ssiten"><I>SAS-data-set</I></SPAN></B></DT>
<DD CLASS="sasop"><A NAME="idxnet0722">&#13;</A><A NAME="idxnet0723">&#13;</A><A NAME="idxnet0724">&#13;</A><A NAME="idxnet0725">&#13;</A><A NAME="idxnet0726">&#13;</A><A NAME="idxnet0727">&#13;</A>names the output data set that receives all information about nodes
(supply/demand and nodal dual variable values) and other information
concerning the unconstrained optimal solution.
<BR><BR>You can specify a NODEOUT= data set in any RESET
statement before the unconstrained optimum is found (even at
commencement).
Once the unconstrained optimum has been reached, or during stage 1
optimization,
use the <A HREF="sect34.htm#netflowsave">SAVE</A> statement
to produce observations in a NODEOUT= data set.
<A NAME="idxnet0728">&#13;</A><A NAME="idxnet0729">&#13;</A>Once optimization that considers constraints starts, you will not
be able to obtain a NODEOUT= data set.
Instead use a <A HREF="sect15.htm#netflowdualout">DUALOUT</A>= data set to get the current solution.
<A NAME="idxnet0730">&#13;</A><A NAME="idxnet0731">&#13;</A>See the <A HREF="sect43.htm#netflownodedualout">&#34;NODEOUT= and DUALOUT= Data Sets&#34;</A> section for more information.
<BR><BR></DD>
</DL>
<H3><I>Options to Halt Optimization</I></H3>
The following options indicate conditions
when optimization is to be halted. You then have
a chance to use PROC NETFLOW interactively.
If the NETFLOW procedure
is optimizing and you want optimization to halt immediately,
press the CTRL-BREAK key combination used to stop SAS procedures.
Doing this is equivalent to PROC NETFLOW
finding that some prespecified condition of the current solution
under which optimization should stop has occurred.
<BR><BR>If optimization does halt, you may need to change the conditions
for when optimization should stop again.
For example, if the number
of iterations exceeded <A HREF="sect30.htm#netflowtwo1">MAXIT2</A>,
use the RESET statement to specify a larger value
for the <A HREF="sect30.htm#netflowtwo1">MAXIT2</A>= option before the next <A HREF="sect33.htm#netflowrun">RUN</A> statement.
<A NAME="idxnet1011">&#13;</A><A NAME="idxnet1012">&#13;</A>Otherwise, PROC
NETFLOW will immediately find that the number of iterations
still exceeds <A HREF="sect30.htm#netflowtwo1">MAXIT2</A>= and halt
without doing any additional optimization.
<BR><BR><DL>
<DT CLASS="ssbten"><A NAME="netflowendpause1"><B CLASS="ssbten">ENDPAUSE1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0732">&#13;</A><A NAME="idxnet0733">&#13;</A><A NAME="idxnet0734">&#13;</A>indicates that PROC NETFLOW will pause
after the unconstrained optimal solution has been obtained and
information about this solution has been output to the current 
<A HREF="sect15.htm#netflowarcout">ARCOUT</A>= data set, <A HREF="sect15.htm#netflownodeout">NODEOUT</A>= data set, or both. 
<A NAME="idxnet0735">&#13;</A><A NAME="idxnet0736">&#13;</A><A NAME="idxnet0737">&#13;</A><A NAME="idxnet0738">&#13;</A>The procedure then executes the
next statement, or waits if no subsequent statement has been
specified.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">FEASIBLEPAUSE1</B></DT>
<DT CLASS="ssbten"><A NAME="netflowfeasp1"><B CLASS="ssbten">FP1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0739">&#13;</A><A NAME="idxnet0740">&#13;</A><A NAME="idxnet0741">&#13;</A><A NAME="idxnet0742">&#13;</A><A NAME="idxnet0743">&#13;</A><A NAME="idxnet0744">&#13;</A>indicates that unconstrained optimization should stop once a
feasible solution is reached. PROC NETFLOW checks for feasibility
every 10 iterations. A solution is feasible if there are no
artificial arcs having nonzero flow assigned to be conveyed
through them.
The presence of
artificial arcs with nonzero flows means that the current solution
does not satisfy all the nodal flow
conservation constraints implicit in network problems.
<A NAME="idxnet0745">&#13;</A><A NAME="idxnet0746">&#13;</A></DD><DT CLASS="ssbten"><A NAME="netflowmaxit1"><B CLASS="ssbten">MAXIT1=<SPAN CLASS="ssiten"><I>m</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0747">&#13;</A><A NAME="idxnet0748">&#13;</A><A NAME="idxnet0749">&#13;</A>specifies the maximum number of Primal Simplex iterations PROC NETFLOW
is to perform in stage 1.
The default value for the MAXIT1= option is 1000.
If MAXIT1= iterations are performed and you want to
continue unconstrained optimization, reset MAXIT1= to
a number larger than the
number of iterations already performed
and issue another <A HREF="sect33.htm#netflowrun">RUN</A> statement.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">NOENDPAUSE1</B></DT>
<DT CLASS="ssbten"><A NAME="netflownoendpause1"><B CLASS="ssbten">NOEP1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0750">&#13;</A><A NAME="idxnet0751">&#13;</A><A NAME="idxnet0752">&#13;</A><A NAME="idxnet0753">&#13;</A><A NAME="idxnet0754">&#13;</A><A NAME="idxnet0755">&#13;</A>negates the <A HREF="sect30.htm#netflowendpause1">ENDPAUSE1</A> option.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">NOFEASIBLEPAUSE1</B></DT>
<DT CLASS="ssbten"><A NAME="netflownofeasp1"><B CLASS="ssbten">NOFP1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0756">&#13;</A><A NAME="idxnet0757">&#13;</A><A NAME="idxnet0758">&#13;</A><A NAME="idxnet0759">&#13;</A><A NAME="idxnet0760">&#13;</A><A NAME="idxnet0761">&#13;</A>negates the <A HREF="sect30.htm#netflowfeasp1">FEASIBLEPAUSE1</A> option.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowpause1"><B CLASS="ssbten">PAUSE1=<SPAN CLASS="ssiten"><I>p</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0762">&#13;</A><A NAME="idxnet0763">&#13;</A><A NAME="idxnet0764">&#13;</A>indicates that PROC NETFLOW will halt unconstrained optimization and
pause when the
remainder of the number of stage 1 iterations divided by
he value of the PAUSE1= option is zero.
If present, the next statement is executed; if not,
the procedure waits for the next statement to be specified.
The default value for PAUSE1= is 999999.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">FEASIBLEPAUSE2</B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">FP2</B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">NOFEASIBLEPAUSE2</B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">NOFP2</B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">PAUSE2=<SPAN CLASS="ssiten"><I>p</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowtwo1"><B CLASS="ssbten">MAXIT2=<SPAN CLASS="ssiten"><I>m</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0765">&#13;</A><A NAME="idxnet0766">&#13;</A><A NAME="idxnet0767">&#13;</A><A NAME="idxnet0768">&#13;</A><A NAME="idxnet0769">&#13;</A><A NAME="idxnet0770">&#13;</A><A NAME="idxnet0771">&#13;</A><A NAME="idxnet0772">&#13;</A><A NAME="idxnet0773">&#13;</A><A NAME="idxnet0774">&#13;</A><A NAME="idxnet0775">&#13;</A><A NAME="idxnet0776">&#13;</A><A NAME="idxnet0777">&#13;</A><A NAME="idxnet0778">&#13;</A><A NAME="idxnet0779">&#13;</A><A NAME="idxnet0780">&#13;</A><A NAME="idxnet0781">&#13;</A><A NAME="idxnet0782">&#13;</A>are the stage 2 constrained optimization counterparts of the
options described previously and having as a suffix the numeral 1.
<BR><BR></DD>
</DL>
<H3><I>Options Controlling the Network Simplex Optimization</I></H3>
<DL>
<DT CLASS="ssbten"><B CLASS="ssbten">BIGM1</B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">NOTWOPHASE1</B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">TWOPHASE1</B></DT>
<DT CLASS="ssbten"><A NAME="netflowone1"><B CLASS="ssbten">NOBIGM1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0783">&#13;</A><A NAME="idxnet0784">&#13;</A><A NAME="idxnet0785">&#13;</A><A NAME="idxnet0786">&#13;</A><A NAME="idxnet0787">&#13;</A><A NAME="idxnet0788">&#13;</A><A NAME="idxnet0789">&#13;</A><A NAME="idxnet0790">&#13;</A><A NAME="idxnet0791">&#13;</A><A NAME="idxnet0792">&#13;</A><A NAME="idxnet0793">&#13;</A><A NAME="idxnet0794">&#13;</A>BIGM1 indicates that the &#34;big-M&#34; approach to optimization is
used. Artificial variables are treated like real arcs, slacks,
surpluses and nonarc variables. Artificials have very expensive
costs. BIGM1 is the default.
<BR><BR>TWOPHASE1 indicates that the two-phase approach is used instead of
the big-M approach.
At first, artificial variables are the only variables to have 
nonzero objective function coefficients. An artificial's objective
function coefficient is temporarily set to 1 and PROC NETFLOW minimizes.
When all artificial
variables have zero value, PROC NETFLOW has found a feasible solution,
and phase 2 commences. Arcs and
nonarc variables have their real costs and objective function
coefficients.
<BR><BR>Before all artificial variables are driven to have zero value, you
can toggle between the big-M and the two-phase approaches by specifying
BIGM1 or TWOPHASE1 in a RESET statement. The option NOTWOPHASE1 is synonymous
with BIGM1, and NOBIGM1 is synonymous with TWOPHASE1.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">CYCLEMULT1=<SPAN CLASS="ssiten"><I>c</I></SPAN></B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">MINBLOCK1=<SPAN CLASS="ssiten"><I>m</I></SPAN></B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">NOPERTURB1</B></DT>
<DT CLASS="ssbten"><A NAME="netflowone2"><B CLASS="ssbten">PERTURB1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0795">&#13;</A><A NAME="idxnet0796">&#13;</A><A NAME="idxnet0797">&#13;</A><A NAME="idxnet0798">&#13;</A><A NAME="idxnet0799">&#13;</A><A NAME="idxnet0800">&#13;</A><A NAME="idxnet0801">&#13;</A><A NAME="idxnet0802">&#13;</A><A NAME="idxnet0803">&#13;</A><A NAME="idxnet0804">&#13;</A><A NAME="idxnet0805">&#13;</A><A NAME="idxnet0806">&#13;</A>In an effort to reduce the number of iterations performed when the
problem is highly degenerate, PROC NETFLOW has in stage 1 optimization
adopted an algorithm outlined in Ryan and Osborne 1988.
<BR><BR>If the number of consecutive degenerate pivots (those with no 
progress toward the optimum) performed equals the value of the CYCLEMULT1= option times
the number of nodes, the arcs that were &#34;blocking&#34; (can leave the
basis) are added to a list. In subsequent iterations, of the arcs
that now can leave the basis, the one chosen to leave is an arc on
the list of arcs that could have left in the previous iteration.
In other words, perference is given to arcs that &#34;block&#34; many iterations.
After several iterations, the list is cleared.
<BR><BR>If the number of blocking arcs is less than the value of the MINBLOCK1= option, a list is 
not kept. Otherwise, if PERTURB1 is specified, the arc flows are
perturbed by a random quantity, so that arcs on the list that block
subsequent iterations are chosen to leave the basis randomly.
Although perturbation often pays off, it is computationally
expensive. 
Periodically, PROC NETFLOW has to clear out the lists and un-perturb
the solution.
You can specify NOPERTURB1 to prevent perturbation occuring.
<BR><BR>Defaults are CYCLEMULT1=0.15, MINBLOCK1=2, and NOPERTURB1.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowlratio1"><B CLASS="ssbten">LRATIO1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0807">&#13;</A><A NAME="idxnet0808">&#13;</A><A NAME="idxnet0809">&#13;</A>specifies the type of ratio test to use in determining
which arc leaves the basis in stage 1.
In some iterations, more than one arc is eligible to leave the basis.
Of those arcs that can leave the
basis, the leaving arc is the first encountered by the algorithm
if the LRATIO1 option is specified.
Specifying the LRATIO1 option can decrease the chance of cycling but can
increase solution times.
The alternative to the LRATIO1 option is the <A HREF="sect30.htm#netflownolratio1">NOLRATIO1</A> option, which
is the default.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowlratio2"><B CLASS="ssbten">LRATIO2</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0810">&#13;</A><A NAME="idxnet0811">&#13;</A><A NAME="idxnet0812">&#13;</A>specifies the type of ratio test to use in determining
what leaves the basis in stage 2.
In some iterations, more than one arc, constraint slack, surplus,
or nonarc variable is eligible to leave the basis.
If the LRATIO2 option is specified, the leaving arc, constraint slack, surplus,
or nonarc variable is the one that is eligible to leave the
basis first encountered by the algorithm.
Specifying the LRATIO2 option can decrease the chance of cycling but can
increase solution times.
The alternative to the LRATIO2 option is the <A HREF="sect30.htm#netflownolratio2">NOLRATIO2</A> option, which
is the default.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflownolratio1"><B CLASS="ssbten">NOLRATIO1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0813">&#13;</A><A NAME="idxnet0814">&#13;</A><A NAME="idxnet0815">&#13;</A>specifies the type of ratio test to use in determining
which arc leaves the basis in stage 1.
If the NOLRATIO1 option is specified, of those arcs
that can leave the
basis, the leaving arc
has the minimum (maximum) cost if the leaving
arc is to be nonbasic with flow capacity equal to its
capacity (lower flow bound).
If more than one
possible leaving arc has the minimum (maximum) cost, the
first such arc encountered is chosen.
Specifying the NOLRATIO1 option can decrease solution times,  but can
increase the chance of cycling.
The alternative to the NOLRATIO1 option is the <A HREF="sect30.htm#netflowlratio1">LRATIO1</A> option.
The NOLRATIO1 option is the default.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflownolratio2"><B CLASS="ssbten">NOLRATIO2</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0816">&#13;</A><A NAME="idxnet0817">&#13;</A><A NAME="idxnet0818">&#13;</A>specifies the type of ratio test to use in determining
which arc leaves the basis in stage 2.
If the NOLRATIO2 option is specified, the leaving arc, constraint slack, surplus,
or nonarc variable is the one eligible to leave the
basis with the minimum (maximum) cost or objective function coefficient
if the leaving
arc, constraint slack or nonarc variable is to be nonbasic with
flow or value equal to its capacity or upper value bound
(lower flow or value bound), respectively.
If several possible leaving arcs,
constraint slacks, surpluses, or nonarc variables
have the minimum (maximum) cost or objective function coefficient,
then the  first encountered is chosen.
Specifying the NOLRATIO2 option can decrease solution times, but
can increase the chance of cycling.
The alternative to the NOLRATIO2 option is the <A HREF="sect30.htm#netflowlratio2">LRATIO2</A> option.
The NOLRATIO2 option is the default.
<BR><BR></DD>
</DL>
<H3><I>Options Applicable to Constrained Optimization</I></H3>
The <A HREF="sect30.htm#netflowinvfreq">INVFREQ</A>= option is relevant only if <A HREF="sect15.htm#netflowinvd2d">INVD_2D</A> is specified in
the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement; that is,  the inverse of the working basis
matrix is being
stored and processed as a two-dimensional array.
The <A HREF="sect30.htm#netflowrefactfreq">REFACTFREQ</A>=, 
<A HREF="sect30.htm#netflowuuuuu">U</A>= , <A HREF="sect30.htm#netflowmluu">MAXLUUPDATES</A>=, and
<A HREF="sect30.htm#netflowmaxl">MAXL</A>= options are relevant if
the <A HREF="sect15.htm#netflowinvd2d">INVD_2D</A> option is not specified in
the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement; that is, if the working basis
matrix is <B>LU</B>  factored.
<BR><BR><A NAME="idxnet1013">&#13;</A><A NAME="idxnet1014">&#13;</A><A NAME="idxnet1015">&#13;</A><A NAME="idxnet1016">&#13;</A><A NAME="idxnet1017">&#13;</A><A NAME="idxnet1018">&#13;</A><A NAME="idxnet1019">&#13;</A><A NAME="idxnet1020">&#13;</A><A NAME="idxnet1021">&#13;</A><A NAME="idxnet1022">&#13;</A><A NAME="idxnet1023">&#13;</A><A NAME="idxnet1024">&#13;</A><A NAME="idxnet1025">&#13;</A><A NAME="idxnet1026">&#13;</A><DL>
<DT CLASS="ssbten"><B CLASS="ssbten">BIGM2</B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">NOTWOPHASE2</B></DT>
<DT CLASS="ssbten"><B CLASS="ssbten">TWOPHASE2</B></DT>
<DT CLASS="ssbten"><A NAME="netflowtwo2"><B CLASS="ssbten">NOBIGM2</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0819">&#13;</A><A NAME="idxnet0820">&#13;</A><A NAME="idxnet0821">&#13;</A><A NAME="idxnet0822">&#13;</A><A NAME="idxnet0823">&#13;</A><A NAME="idxnet0824">&#13;</A><A NAME="idxnet0825">&#13;</A><A NAME="idxnet0826">&#13;</A><A NAME="idxnet0827">&#13;</A><A NAME="idxnet0828">&#13;</A><A NAME="idxnet0829">&#13;</A><A NAME="idxnet0830">&#13;</A>are the stage 2 constrained optimization counterparts of the
options <A HREF="sect30.htm#netflowone1">BIGM1</A>,<BR>
<A HREF="sect30.htm#netflowone1">NOTWOPHASE1</A>, <A HREF="sect30.htm#netflowone1">TWOPHASE1</A>, and <A HREF="sect30.htm#netflowone1">NOBIGM1</A>.
<BR><BR>The TWOPHASE2 option is often better than the BIGM2 option when the problem has many side
constraints.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowinvfreq"><B CLASS="ssbten">INVFREQ=<SPAN CLASS="ssiten"><I>r</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0831">&#13;</A><A NAME="idxnet0832">&#13;</A><A NAME="idxnet0833">&#13;</A>recalculates the working basis matrix
inverse whenever <SPAN CLASS="mathfont"><I>n</I></SPAN> iterations have been performed where <SPAN CLASS="mathfont"><I>n</I></SPAN> is the value of the INVFREQ= option.
Although a relatively expensive task,
it is prudent to do as roundoff errors
accumulate, especially affecting the elements of this matrix inverse.
The default is INVFREQ=50.
The INVFREQ= option should be used only if the <A HREF="sect15.htm#netflowinvd2d">INVD_2D</A> option is specified in
the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement.
<A NAME="idxnet0834">&#13;</A><A NAME="idxnet0835">&#13;</A></DD><DT CLASS="ssbten"><A NAME="netflowintfirst"><B CLASS="ssbten">INTFIRST</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0836">&#13;</A><A NAME="idxnet0837">&#13;</A><A NAME="idxnet0838">&#13;</A>In some iterations, it is found that what must
leave the basis is an arc that is part of the spanning tree
representation of the network part of the basis, 
(called a <EM>a key</EM> arc).
It is
necessary to interchange another basic arc not part of the tree
(called a <EM>nonkey arc</EM> )
with the tree arc that leaves to permit the basis update
to be performed efficiently.
Specifying the INTFIRST option indicates that of the nonkey arcs eligible to be
swapped with the leaving key arc, the one chosen to do so is the first
encountered by the algorithm.
If the INTFIRST option is not
specified, all such arcs are examined and the one with the best
cost is chosen.
<BR><BR>The terms <EM>key</EM>  and <EM>nonkey</EM>  are used
because the algorithm used by PROC NETFLOW
for network optimization considering side constraints,
(GUB-based, Primal Partitioning, or Factorization)
is a variant of an algorithm
originally developed to solve linear programming problems with
generalized upper bounding constraints. The terms
<EM>key</EM>  and <EM>nonkey</EM>  were coined
then.
The STATUS SAS variable in the <A HREF="sect15.htm#netflowarcout">ARCOUT</A>= 
and <A HREF="sect15.htm#netflowconout">CONOUT</A>= data sets and the
STATUS column in tables produced when <A HREF="sect28.htm#netflowprint">PRINT</A> statements are
processed indicate whether basic arcs are key or nonkey.
Basic nonarc variables are always nonkey.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowmaxl"><B CLASS="ssbten">MAXL=<SPAN CLASS="ssiten"><I>m</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0839">&#13;</A><A NAME="idxnet0840">&#13;</A><A NAME="idxnet0841">&#13;</A>If the working basis matrix is <B>LU</B>  factored,
<B>U</B>  is an upper triangular
matrix and <B>L</B>  is a lower triangular matrix corresponding to
a sequence of
elementary matrix
row operations required to change the working basis
matrix into <B>U</B> .
<B>L</B>  and <B>U</B>  enable
substitution techniques to be used to solve the
linear systems of the Simplex algorithm.
Among other things, the <B>LU</B>  processing
strives to keep the number of
<B>L</B>  elementary matrix row operation matrices small.
A buildup in the number of these could indicate that fill-in
is becoming excessive and the computations involving
<B>L</B>  and <B>U</B>  will
be hampered.
Refactorization should be performed to restore
<B>U</B>  sparsity and reduce <B>L</B>  information.
When the number of <B>L</B>  matrix
row operations exceeds the value of the MAXL= option, a
refactorization is done rather than one or more updates.
The default value for MAXL= is 10 times the number of side constraints.
The MAXL= option should not be used if <A HREF="sect15.htm#netflowinvd2d">INVD_2D</A> is specified in
the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement.
<A NAME="idxnet0842">&#13;</A><A NAME="idxnet0843">&#13;</A></DD><DT CLASS="ssbten"><B CLASS="ssbten">MAXLUUPDATES=<SPAN CLASS="ssiten"><I>m</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowmluu"><B CLASS="ssbten">MLUU=<SPAN CLASS="ssiten"><I>m</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0844">&#13;</A><A NAME="idxnet0845">&#13;</A><A NAME="idxnet0846">&#13;</A><A NAME="idxnet0847">&#13;</A><A NAME="idxnet0848">&#13;</A><A NAME="idxnet0849">&#13;</A>In some iterations, PROC NETFLOW must either perform a series of single
column updates or a complete refactorization of the working basis matrix.
More than one column of the working basis
matrix must change before the next Simplex iteration can begin.
The single column updates can often be done faster than
a complete refactorization,
especially if few updates are necessary, the working basis
matrix is sparse, or a refactorization has been performed recently.
If the number of columns that must change is less than
the value specified in the MAXLUUPDATES= option,
the updates are attempted; otherwise, a refactorization is done.
Refactorization also occurs
if the sum of the number of columns that must be changed and
the number of <B>LU</B>  updates done since the last refactorization
exceeds the value of the <A HREF="sect30.htm#netflowrefactfreq">REFACTFREQ</A>= option.
The MAXLUUPDATES= option should not be used if the <A HREF="sect15.htm#netflowinvd2d">INVD_2D</A> option is specified in
the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement.
<A NAME="idxnet0850">&#13;</A><A NAME="idxnet0851">&#13;</A>In some iterations, a series of single column updates are not able
to complete the changes required for a working basis matrix because,
ideally, all columns should change at once.
If the update cannot be completed,
PROC NETFLOW performs a refactorization.
The default value is 5.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflownointfirst"><B CLASS="ssbten">NOINTFIRST</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0852">&#13;</A><A NAME="idxnet0853">&#13;</A><A NAME="idxnet0854">&#13;</A>indicates that of the arcs eligible to be
swapped with the leaving arc, the one chosen to do so has the best cost.
See the <A HREF="sect30.htm#netflowintfirst">INTFIRST</A> option.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">REFACTFREQ=<SPAN CLASS="ssiten"><I>r</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowrefactfreq"><B CLASS="ssbten">RFF=<SPAN CLASS="ssiten"><I>r</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0855">&#13;</A><A NAME="idxnet0856">&#13;</A><A NAME="idxnet0857">&#13;</A><A NAME="idxnet0858">&#13;</A><A NAME="idxnet0859">&#13;</A><A NAME="idxnet0860">&#13;</A>specifies the maximum number of
<B>L</B>  and <B>U</B>  updates between
refactorization of the working basis matrix
to reinitialize <B>LU</B>  factors.
In most iterations, one or several
Bartels-Golub updates can be performed.
<A NAME="idxnet0861">&#13;</A><A NAME="idxnet0862">&#13;</A>An update is performed
more quickly than a complete refactorization. However, after
a series of updates, the sparsity of the <B>U</B>  factor is degraded.
A refactorization is necessary to regain sparsity and to make
subsequent computations and updates more efficient.
The default value is 50.
The REFACTFREQ= option should not be used if <A HREF="sect15.htm#netflowinvd2d">INVD_2D</A> is specified in
the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement.
<A NAME="idxnet0863">&#13;</A><A NAME="idxnet0864">&#13;</A></DD><DT CLASS="ssbten"><A NAME="netflowuuuuu"><B CLASS="ssbten">U=<SPAN CLASS="ssiten"><I>u</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0865">&#13;</A><A NAME="idxnet0866">&#13;</A><A NAME="idxnet0867">&#13;</A>controls the choice of pivot
during <B>LU</B>  decomposition or Bartels-Golub update.
<A NAME="idxnet0868">&#13;</A><A NAME="idxnet0869">&#13;</A>When searching for a pivot, any element less than the value of the U= option times
the
largest element in its matrix row is excluded, or matrix
rows are interchanged to improve numerical stability.
The U= option should have values on or between <A HREF="sect30.htm#netflowzero2">ZERO2</A> and 1.0.
Decreasing the value of the
U= option biases the algorithm toward maintaining
sparsity at the expense of numerical stability and vice-versa.
Reid 1975 suggests that the value of 0.01 is acceptable and this
is the default for the U= option.
This option should not be used if <A HREF="sect15.htm#netflowinvd2d">INVD_2D</A> is specified in
the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement.
<A NAME="idxnet0870">&#13;</A><A NAME="idxnet0871">&#13;</A></DD>
</DL>
<H3><I><A NAME="netflowpricing">Pricing Strategy Options</A></I></H3>
There are three main types of pricing strategies
<UL>
<LI> PRICETYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=NOQ
<LI> PRICETYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=BLAND
<LI> PRICETYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=Q
</UL>
The one
that usually performs better than the others is PRICETYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=Q,
so this is the default.
<BR><BR>Because the pricing strategy takes a lot of computational
time, you should experiment with the following options
to find the optimum specification.
These options influence how the pricing step of the Simplex
iteration is performed.
See the <A HREF="sect47.htm#netflowpricstrategies">&#34;Pricing Strategies&#34;</A> section for further information).
<BR><BR><DL>
<DT><DD>
PRICETYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=BLAND or PTYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=BLAND
<DT><DD>
PRICETYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=NOQ or PTYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=NOQ
<UL>
<LI> P<SPAN CLASS="mathfont"><I>x</I></SPAN>SCAN=BEST
<LI> P<SPAN CLASS="mathfont"><I>x</I></SPAN>SCAN=FIRST
<LI> P<SPAN CLASS="mathfont"><I>x</I></SPAN>SCAN=PARTIAL and P<SPAN CLASS="mathfont"><I>x</I></SPAN>NPARTIAL=<SPAN CLASS="ssiten"><I>p</I></SPAN>
</UL>
<DT><DD>
PRICETYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=Q or PTYPE<SPAN CLASS="mathfont"><I>x</I></SPAN>=Q<BR>QSIZE<SPAN CLASS="mathfont"><I>x</I></SPAN>=<SPAN CLASS="ssiten"><I>q</I></SPAN> or Q<SPAN CLASS="mathfont"><I>x</I></SPAN>=<SPAN CLASS="ssiten"><I>q</I></SPAN> <BR>REFRESHQ<SPAN CLASS="mathfont"><I>x</I></SPAN>=<SPAN CLASS="ssiten"><I>r </I></SPAN><BR>REDUCEQSIZE<SPAN CLASS="mathfont"><I>x</I></SPAN>=<SPAN CLASS="ssiten"><I>r </I></SPAN> <BR>REDUCEQ<SPAN CLASS="mathfont"><I>x</I></SPAN>=<SPAN CLASS="ssiten"><I>r</I></SPAN>
<UL>
<LI> P<SPAN CLASS="mathfont"><I>x</I></SPAN>SCAN=BEST
<LI> P<SPAN CLASS="mathfont"><I>x</I></SPAN>SCAN=FIRST
<LI> P<SPAN CLASS="mathfont"><I>x</I></SPAN>SCAN=PARTIAL and P<SPAN CLASS="mathfont"><I>x</I></SPAN>NPARTIAL=<SPAN CLASS="ssiten"><I>p</I></SPAN>
<LI> Q<SPAN CLASS="mathfont"><I>x</I></SPAN>FILLSCAN=BEST
<LI> Q<SPAN CLASS="mathfont"><I>x</I></SPAN>FILLSCAN=FIRST
<LI> Q<SPAN CLASS="mathfont"><I>x</I></SPAN>FILLSCAN=PARTIAL and Q<SPAN CLASS="mathfont"><I>x</I></SPAN>FILLNPARTIAL=<SPAN CLASS="ssiten"><I>q </I></SPAN>
</UL></DL>
For stage 2 optimization, you can specify P2SCAN=ANY.
P2SCAN=ANY is used in conjunction with the DUALFREQ= option.
<A NAME="idxnet1027">&#13;</A><A NAME="idxnet1028">&#13;</A><A NAME="idxnet1029">&#13;</A><A NAME="idxnet1030">&#13;</A><A NAME="idxnet1031">&#13;</A><A NAME="idxnet1032">&#13;</A><A NAME="idxnet1033">&#13;</A><A NAME="idxnet1034">&#13;</A><A NAME="idxnet1035">&#13;</A><A NAME="idxnet1036">&#13;</A><A NAME="idxnet1037">&#13;</A><A NAME="idxnet1038">&#13;</A><A NAME="idxnet1039">&#13;</A><A NAME="idxnet1040">&#13;</A><A NAME="idxnet1041">&#13;</A><A NAME="idxnet1042">&#13;</A><A NAME="idxnet1043">&#13;</A><A NAME="idxnet1044">&#13;</A><A NAME="idxnet1045">&#13;</A><A NAME="idxnet1046">&#13;</A><H3><I>Miscellaneous Options</I></H3>
<DL>
<DT CLASS="ssbten"><A NAME="netflowfuture1"><B CLASS="ssbten">FUTURE1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0872">&#13;</A><A NAME="idxnet0873">&#13;</A><A NAME="idxnet0874">&#13;</A>signals that PROC NETFLOW must output extra observations to
the <A HREF="sect15.htm#netflownodeout">NODEOUT</A>= and <A HREF="sect15.htm#netflowarcout">ARCOUT</A>= data sets.
These observations contain information about the
solution
found by doing optimization
neglecting any side constraints.
These two data sets then can
be used as the <A HREF="sect15.htm#netflownodedata">NODEDATA</A>=
and <A HREF="sect15.htm#netflowarcdata">ARCDATA</A>= data sets, respectively,
in subsequent
PROC NETFLOW runs with the <A HREF="sect15.htm#netflowwarm">WARM</A> option specified.
See the <A HREF="sect54.htm#netflowwarmstarts">&#34;Warm Starts&#34;</A> section.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowfuture2"><B CLASS="ssbten">FUTURE2</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0875">&#13;</A><A NAME="idxnet0876">&#13;</A><A NAME="idxnet0877">&#13;</A>signals that PROC NETFLOW must output extra observations to
the <A HREF="sect15.htm#netflowdualout">DUALOUT</A>= and <A HREF="sect15.htm#netflowconout">CONOUT</A>= data sets.
These observations contain information about the
solution
found by optimization that considers side constraints.
These two data sets  then can
be used as the <A HREF="sect15.htm#netflownodedata">NODEDATA</A>= data set (also called the <A HREF="sect15.htm#netflownodedata">DUALIN</A>= data set)
and the <A HREF="sect15.htm#netflowarcdata">ARCDATA</A>= data sets, respectively,
in subsequent
PROC NETFLOW runs with the <A HREF="sect15.htm#netflowwarm">WARM</A> option specified.
See the <A HREF="sect54.htm#netflowwarmstarts">&#34;Warm Starts&#34;</A> section.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowmoreopt"><B CLASS="ssbten">MOREOPT</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0878">&#13;</A><A NAME="idxnet0879">&#13;</A><A NAME="idxnet0880">&#13;</A>The MOREOPT option turns off all optimality and infeasibility flags that may
have been raised. Unless this is done, PROC NETFLOW will not do any
optimization when a <A HREF="sect33.htm#netflowrun">RUN</A> statement is specified.
<BR><BR>If PROC NETFLOW determines that the problem is infeasible, it will not
do any more optimization unless you specify MOREOPT in a RESET
statement. At the same time, you can try resetting options 
(particularly zero tolerances) in the hope that the infeasibility
was raised incorrectly.
<BR><BR>Consider the following example:
<PRE>
   proc netflow
      nodedata=noded         /* supply and demand data   */ 
      arcdata=arcd1          /* the arc descriptions     */
      condata=cond1          /* the side constraints     */
      conout=solution;       /* output the solution      */
   run;
   /* Netflow states that the problem is infeasible.     */
   /* You suspect that the zero tolerance is too large   */
   reset zero2=1.0e-10 moreopt;
   run;
   /* Netflow will attempt more optimization.            */
   /* After this, if it reports that the problem is      */
   /* infeasible, the problem really might be infeasible */
</PRE>

<BR><BR>If PROC NETFLOW finds an optimal solution, you might want to do 
additional optimization to confirm that an optimum has really been
reached.
Specify the MOREOPT option in a RESET
statement. Reset options, but, in this case,
tighten zero tolerances.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflownofuture1"><B CLASS="ssbten">NOFUTURE1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0881">&#13;</A><A NAME="idxnet0882">&#13;</A><A NAME="idxnet0883">&#13;</A>negates the <A HREF="sect30.htm#netflowfuture1">FUTURE1</A> option.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflownofuture2"><B CLASS="ssbten">NOFUTURE2</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0884">&#13;</A><A NAME="idxnet0885">&#13;</A><A NAME="idxnet0886">&#13;</A>negates the <A HREF="sect30.htm#netflowfuture2">FUTURE2</A> option.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflownoscratch"><B CLASS="ssbten">NOSCRATCH</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0887">&#13;</A><A NAME="idxnet0888">&#13;</A><A NAME="idxnet0889">&#13;</A>negates the <A HREF="sect30.htm#netflowscratch">SCRATCH</A> option.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflownoztol1"><B CLASS="ssbten">NOZTOL1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0890">&#13;</A><A NAME="idxnet0891">&#13;</A><A NAME="idxnet0892">&#13;</A>indicates that the majority of tests for roundoff error should
not be done.
Specifying the NOZTOL1 option
and obtaining the same optimal solution as when the the NOZTOL1 
option is not specified
in the <A HREF="sect15.htm#netflownetflow">PROC NETFLOW</A> statement
(or the <A HREF="sect30.htm#netflowztol1">ZTOL1</A> option is specified), verifies that the zero tolerances
were not too high.
Roundoff error checks that are critical to the successful
functioning of PROC NETFLOW
and any related readjustments are always done.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflownoztol2"><B CLASS="ssbten">NOZTOL2</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0893">&#13;</A><A NAME="idxnet0894">&#13;</A><A NAME="idxnet0895">&#13;</A>indicates that the majority of tests for roundoff error
are not to be done during an
optimization that considers side constraints.
The reasons for specifying the NOZTOL2 option are the same as those for
specifying the <A HREF="sect30.htm#netflownoztol1">NOZTOL1</A> option for stage 1 optimization (see the <A HREF="sect30.htm#netflownoztol1">NOZTOL1</A> option).
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowscratch"><B CLASS="ssbten">SCRATCH</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0896">&#13;</A><A NAME="idxnet0897">&#13;</A><A NAME="idxnet0898">&#13;</A>specifies that you do not want PROC
NETFLOW to enter or continue stage 1 of
the algorithm.
Rather than specify RESET SCRATCH, you can use
the <A HREF="sect19.htm#netflowconopt">CONOPT</A> statement.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowverbose"><B CLASS="ssbten">VERBOSE=<SPAN CLASS="ssiten"><I>v</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0899">&#13;</A><A NAME="idxnet0900">&#13;</A><A NAME="idxnet0901">&#13;</A>limits the number of similar messages that are displayed on the SAS log.
<BR><BR>For example, when reading the <A HREF="sect15.htm#netflowarcdata">ARCDATA</A>= data set,
PROC NETFLOW might have cause to issue the following message many times:
<PRE>
ERROR: The HEAD list variable value in obs i in the ARCDATA is
       missing, - the TAIL list variable value of this obs
       is nonmissing. This is an incomplete arc specification.
</PRE>
If there are lots of observations that have this fault,
messages that are similar are issued for only the first VERBOSE=
such observations.
After the <A HREF="sect15.htm#netflowarcdata">ARCDATA</A>= data set has been read, PROC NETFLOW will issue the message:
<PRE>
NOTE: More messages similar to the ones immediately above
      could have been issued but were suppressed as
      VERBOSE= v.
</PRE>
<BR><BR>If observations in the <A HREF="sect15.htm#netflowarcdata">ARCDATA</A>= data set have this error, PROC NETFLOW stops
and you have to fix the data. 
Imagine that this error is only a warning and PROC NETFLOW proceeded to
other operations such as reading the <A HREF="sect15.htm#netflowcondata">CONDATA</A>= data set.
If PROC NETFLOW finds there are numerous errors when reading that data set,
the number of messages issued to the SAS log are also limited
by the VERBOSE= option.
<BR><BR>If you have a problem with a large number of side
constraints and for some reason you stop stage 2 optimization
early, PROC NETFLOW indicates that constraints are disobeyed
by the current solution.
Specifying VERBOSE=<SPAN CLASS="ssiten"><I>v</I></SPAN> allows at most <SPAN CLASS="ssiten"><I>v</I></SPAN> 
disobeyed constraints to be written to the log.
If there are more, these are not displayed.
<BR><BR>When PROC NETFLOW finishes and messages have been suppressed, 
the message
<PRE>
NOTE: To see all messages, specify VERBOSE=v.
</PRE>
is issued. The value of <SPAN CLASS="ssiten"><I>v</I></SPAN> is the smallest value that should be 
specified for the VERBOSE= option so that <EM>all</EM> messages are displayed if
PROC NETFLOW is run again with the same data and everything else except
that the VERBOSE= option is unchanged. No messages are suppressed.
<BR><BR>The default value for the VERBOSE= option is 12.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">ZERO1=<SPAN CLASS="ssiten"><I>z</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowzero1"><B CLASS="ssbten">Z1=<SPAN CLASS="ssiten"><I>z</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0902">&#13;</A><A NAME="idxnet0903">&#13;</A><A NAME="idxnet0904">&#13;</A><A NAME="idxnet0905">&#13;</A><A NAME="idxnet0906">&#13;</A><A NAME="idxnet0907">&#13;</A>specifies the zero tolerance level in stage 1.
If the <A HREF="sect30.htm#netflownoztol1">NOZTOL1</A> option is not specified, values within <SPAN CLASS="mathfont"><I>z</I></SPAN> of zero are set to 0.0,
where <SPAN CLASS="mathfont"><I>z</I></SPAN> is the value of the ZERO1= option.
Flows close to the lower flow bound or capacity of arcs are
reassigned those exact values.
Two values are deemed to be close if one is within
<SPAN CLASS="mathfont"><I>z</I></SPAN> of the other.
The default value for the ZERO1= option is 0.000001.
Any value specified for the ZERO1= option that is <SPAN CLASS="mathfont">&#60;0.0</SPAN> or <SPAN CLASS="mathfont">&#62;0.0001</SPAN> is invalid.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">ZERO2=<SPAN CLASS="ssiten"><I>z</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowzero2"><B CLASS="ssbten">Z2=<SPAN CLASS="ssiten"><I>z</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0908">&#13;</A><A NAME="idxnet0909">&#13;</A><A NAME="idxnet0910">&#13;</A><A NAME="idxnet0911">&#13;</A><A NAME="idxnet0912">&#13;</A><A NAME="idxnet0913">&#13;</A>specifies the zero tolerance level in stage 2.
If the <A HREF="sect30.htm#netflownoztol2">NOZTOL2</A> option is not specified, values within <SPAN CLASS="mathfont"><I>z</I></SPAN> of zero are set to 0.0,
where <SPAN CLASS="mathfont"><I>z</I></SPAN> is the value of the ZERO2= option.
Flows close to the lower flow bound or capacity of arcs are
reassigned those exact values.
If there are nonarc variables,
values close to the lower or upper value bound of nonarc variables are
reassigned those exact values.
Two values are deemed to be close if one is within <SPAN CLASS="mathfont"><I>z</I></SPAN>
of the other.
The default value for the ZERO2= option is 0.000001.
Any value specified for the ZERO2= option that is <SPAN CLASS="mathfont">&#60;0.0</SPAN> or <SPAN CLASS="mathfont">&#62;0.0001</SPAN> is invalid.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowzerotol"><B CLASS="ssbten">ZEROTOL=<SPAN CLASS="ssiten"><I>z</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0914">&#13;</A><A NAME="idxnet0915">&#13;</A><A NAME="idxnet0916">&#13;</A>specifies the zero tolerance used when PROC NETFLOW must compare
any real number with another real number, or zero.
For example, if <SPAN CLASS="mathfont"><I>x</I></SPAN> and <SPAN CLASS="mathfont"><I>y</I></SPAN> are real numbers, then for <SPAN CLASS="mathfont"><I>x</I></SPAN> to be 
considered greater than <SPAN CLASS="mathfont"><I>y</I></SPAN>, <SPAN CLASS="mathfont"><I>x</I></SPAN> must be at least <SPAN CLASS="mathfont"><I>y</I>+<I>ZEROTOL</I></SPAN>
The ZEROTOL= option is used throughout any PROC NETFLOW run.
<BR><BR>ZEROTOL=z controls the way PROC NETFLOW performs all double
precision comparisons; that is whether a double precision number
is equal to, not equal to, greater than (or equal to), or less 
than (or equal to) zero or some other double precision number.
A double precision number is deemed to be the same as another 
such value if the absolute differences between them is less than 
or equal to the value of the ZEROTOL= option.
<BR><BR>The default value for the ZEROTOL= option is 1.0E-14. You can specify 
the ZEROTOL= option in the NETFLOW or RESET statement. Valid values
for the ZEROTOL= option must be <SPAN CLASS="mathfont">&#62;0.0</SPAN> and <SPAN CLASS="mathfont">&#60;0.0001</SPAN>. Do not
specify a value too close to zero as this defeats the
purpose of the ZEROTOL= option. Neither should the value be too large, as
comparisons might be incorrectly performed.
<BR><BR>The ZEROTOL= option is different from the <A HREF="sect30.htm#netflowzero1">ZERO1</A>= and <A HREF="sect30.htm#netflowzero2">ZERO2</A>= options in that
<A HREF="sect30.htm#netflowzero1">ZERO1</A>= and <A HREF="sect30.htm#netflowzero2">ZERO2</A>= options work when determining whether optimality has
been reached whether an entry in the updated column in the
ratio test of the simplex method is zero, whether a flow is
the same as the arc's capacity or lower bound or whether the value
of a nonarc variable is at a bound. The ZEROTOL= option is used in all other 
general double precision number comparisons.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowztol1"><B CLASS="ssbten">ZTOL1</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0917">&#13;</A><A NAME="idxnet0918">&#13;</A><A NAME="idxnet0919">&#13;</A>indicates that all tests for roundoff error are performed during
stage 1 optimization.
Any alterations are carried out.
The opposite of the ZTOL1 option is the <A HREF="sect30.htm#netflownoztol1">NOZTOL1</A> option.
<BR><BR></DD><DT CLASS="ssbten"><A NAME="netflowztol2"><B CLASS="ssbten">ZTOL2</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0920">&#13;</A><A NAME="idxnet0921">&#13;</A><A NAME="idxnet0922">&#13;</A>indicates that all tests for roundoff error are performed during
stage 2 optimization.
Any alterations are carried out.
The opposite of the ZTOL2 option is the <A HREF="sect30.htm#netflownoztol2">NOZTOL2</A> option.
<BR><BR></DD>
</DL>
<H3><I>Interior Point Algorithm Options</I></H3>
<A NAME="idxnet1047">&#13;</A><A NAME="idxnet1048">&#13;</A><DL>
<DT CLASS="ssbten"><A NAME="netflowintpoint"><B CLASS="ssbten">INTPOINT</B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0923">&#13;</A><A NAME="idxnet0924">&#13;</A>indicates that the Interior Point algorithm is to be used.
The INTPOINT option must be specified if you want the Interior Point
algorithm to be used for solving network problems, 
otherwise the Simplex algorithm is used instead.
For Linear Programming problems (problems with no network
component), PROC NETFLOW must use the Interior Point algorithm,
so you need not specify the INTPOINT option.
<A NAME="idxnet0925">&#13;</A><A NAME="idxnet0926">&#13;</A></DD><DT CLASS="ssbten"><B CLASS="ssbten">TOLDINF=<SPAN CLASS="ssiten"><I>t</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowtoldinf"><B CLASS="ssbten">RTOLDINF=<SPAN CLASS="ssiten"><I>t</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0927">&#13;</A><A NAME="idxnet0928">&#13;</A><A NAME="idxnet0929">&#13;</A><A NAME="idxnet0930">&#13;</A>specifies the allowed amount of dual infeasibility.
In the <A HREF="sect60.htm#netflowipad">&#34;Interior Point Algorithmic Details&#34;</A> section, the vector 
<A HREF="sect60.htm#netflowinfeasc"><SPAN CLASS="mathfont"><I>infeas</I><SUB><I>c</I></SUB></SPAN></A> is
defined. If all elements of this vector are <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq7.gif"
 ALT="\leq"> <SPAN CLASS="ssiten"><I>t</I></SPAN>,
the solution is deemed feasible.
<A HREF="sect60.htm#netflowinfeasc"><SPAN CLASS="mathfont"><I>infeas</I><SUB><I>c</I></SUB></SPAN></A> is replaced by a zero vector, which makes computations faster.
This option is the dual equivalent to the <A HREF="sect30.htm#netflowtolpinf">TOLPINF</A>= option.
Valid values for <SPAN CLASS="ssiten"><I>t</I></SPAN> are between <SPAN CLASS="mathfont">1.0<I>E</I>-12</SPAN> and <SPAN CLASS="mathfont">1.0<I>E</I>-1</SPAN>. The default is <SPAN CLASS="mathfont">1.0<I>E</I>-7</SPAN>.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">TOLPINF=<SPAN CLASS="ssiten"><I>t</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowtolpinf"><B CLASS="ssbten">RTOLPINF=<SPAN CLASS="ssiten"><I>t</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0931">&#13;</A><A NAME="idxnet0932">&#13;</A><A NAME="idxnet0933">&#13;</A><A NAME="idxnet0934">&#13;</A>specifies the allowed amount of primal infeasibility.
This option is the dual equivalent to the <A HREF="sect30.htm#netflowtoldinf">TOLDINF</A>= option.
In the <A HREF="sect60.htm#netflowipad">&#34;Interior Point Algorithmic Details&#34;</A> section, the vector 
<A HREF="sect60.htm#netflowinfeasb"><SPAN CLASS="mathfont"><I>infeas</I><SUB><I>b</I></SUB></SPAN></A> is
defined. If all elements of this vector are <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq7.gif"
 ALT="\leq"> <SPAN CLASS="ssiten"><I>t</I></SPAN>,
the solution is deemed feasible.
<A HREF="sect60.htm#netflowinfeasb"><SPAN CLASS="mathfont"><I>infeas</I><SUB><I>b</I></SUB></SPAN></A> is replaced by a zero vector, which makes computations faster.
Increasing the value of the TOLPINF= option too much can lead to instability, but a modest increase can give the algorithm added
flexibility and decrease the iteration count.
Valid values for <SPAN CLASS="ssiten"><I>t</I></SPAN> are between <SPAN CLASS="mathfont">1.0<I>E</I>-12</SPAN> and <SPAN CLASS="mathfont">1.0<I>E</I>-1</SPAN>. The default is <SPAN CLASS="mathfont">1.0<I>E</I>-7</SPAN>.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">CHOLTINYTOL=<SPAN CLASS="ssiten"><I>c</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowcholtinytol"><B CLASS="ssbten">RCHOLTINYTOL=<SPAN CLASS="ssiten"><I>c</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0935">&#13;</A><A NAME="idxnet0936">&#13;</A><A NAME="idxnet0937">&#13;</A><A NAME="idxnet0938">&#13;</A>specifies the cut-off tolerance for Cholesky factorization of the 
<A HREF="sect60.htm#netflowaat"><IMG WIDTH="64" HEIGHT="19" ALIGN="BOTTOM" BORDER="0"
 SRC="images/neteq8.gif"
 ALT="A \Theta A^{-1}"></A>.
If a diagonal value drops below <SPAN CLASS="ssiten"><I>c</I></SPAN>, the row is essentially
treated as dependent and is ignored in the factorization.
Valid values for <SPAN CLASS="ssiten"><I>c</I></SPAN> are between <SPAN CLASS="mathfont">1.0<I>E</I>-30</SPAN> and <SPAN CLASS="mathfont">1.0<I>E</I>-6</SPAN>.
The defualt value is <SPAN CLASS="mathfont">1.0<I>E</I>-8</SPAN>.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">DENSETHR=<SPAN CLASS="ssiten"><I>d</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowdensethr"><B CLASS="ssbten">RDENSETHR=<SPAN CLASS="ssiten"><I>d</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0939">&#13;</A><A NAME="idxnet0940">&#13;</A><A NAME="idxnet0941">&#13;</A><A NAME="idxnet0942">&#13;</A>specifies the density threshold for Cholesky processing.
When the <A HREF="sect60.htm#netflowsymbolic">symbolic factorization</A> 
encounters a column of L that
has DENSETHR= proportion of nonzeros and the
remaining part of L is at least 12 x 12, the remainder of L is
treated as dense. In practice, the lower right
part of the Cholesky triangular factor L is quite dense and it can be
computationally more efficient to
treat it as 100% dense.
The default value for <SPAN CLASS="ssiten"><I>d</I></SPAN> is 0.7.
A specification of <SPAN CLASS="ssiten"><I>d</I></SPAN><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq1.gif"
 ALT="\le">0.0 causes all dense processing;
<SPAN CLASS="ssiten"><I>d</I></SPAN><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq2.gif"
 ALT="\ge">1.0 causes all sparse processing.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">MAXITERB=<SPAN CLASS="ssiten"><I>m</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowmaxiterb"><B CLASS="ssbten">IMAXITERB=<SPAN CLASS="ssiten"><I>m</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0943">&#13;</A><A NAME="idxnet0944">&#13;</A><A NAME="idxnet0945">&#13;</A><A NAME="idxnet0946">&#13;</A>specifies the maximum number of iterations of the IPBM algorithm that can be performed.
The default value for <SPAN CLASS="ssiten"><I>m</I></SPAN> is 100.
One of the most remarkable aspects of the Interior Point algorithm is that
for most problems, it usually needs to do less than 50 iterations,
<EM>no matter the size of the problem</EM>.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">PDGAPTOL=<SPAN CLASS="ssiten"><I>p</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowpdgaptol"><B CLASS="ssbten">RPDGAPTOL=<SPAN CLASS="ssiten"><I>p</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0947">&#13;</A><A NAME="idxnet0948">&#13;</A><A NAME="idxnet0949">&#13;</A><A NAME="idxnet0950">&#13;</A>specifies the Primal-Dual gap or 
<A HREF="sect60.htm#netflowdualgap">Duality gap</A> tolerance.
<A HREF="sect60.htm#netflowdualgap">Duality gap</A> is defined in the <A HREF="sect60.htm#netflowipad">&#34;Interior Point Algorithmic Details&#34;</A> section.
If the  relative gap (<SPAN CLASS="mathfont"><I>duality gap</I>/(<I>c</I><SUP><I>T</I></SUP> <I>x</I>)</SPAN>) between the primal and dual objectives is smaller the the value
of the PDGAPTOL= option and both the primal and dual problems are feasible, 
then PROC NETFLOW stops optimization with a solution that is deemed optimal.
Valid values for <SPAN CLASS="ssiten"><I>p</I></SPAN> are between <SPAN CLASS="mathfont">1.0<I>E</I>-12</SPAN> and <SPAN CLASS="mathfont">1.0<I>E</I>-1</SPAN>.
the default is <SPAN CLASS="mathfont">1.0<I>E</I>-7</SPAN>.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">PDSTEPMULT=<SPAN CLASS="ssiten"><I>p</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowpdstepmult"><B CLASS="ssbten">RPDSTEPMULT=<SPAN CLASS="ssiten"><I>p</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0951">&#13;</A><A NAME="idxnet0952">&#13;</A><A NAME="idxnet0953">&#13;</A><A NAME="idxnet0954">&#13;</A>specifies the step-length multiplier.
The maximum feasible step-length chosen by the 
Primal-Dual with Predictor-Corrector algorithm is multiplied 
by the value of the PDSTEPMULT= option.
This number must be less than 1 to avoid moving beyond the barrier.
An actual step-length greater than 1 indicates numerical difficulties.
Valid values for <SPAN CLASS="ssiten"><I>p</I></SPAN> are between 0.01 and 0.999999.
The default value is 0.99995.
<BR><BR>In the <A HREF="sect60.htm#netflowipad">&#34;Interior Point Algorithmic Details&#34;</A> section, the solution of the next iteration is obtained
by moving along a <A HREF="sect60.htm#netflowdirection">direction</A> 
from the current iterations solution.<BR>
<IMG WIDTH="414" HEIGHT="37" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq9.gif"
 ALT="(x^{k+1}, y^{k+1}, s^{k+1}) = (x^k, y^k, s^k) + \alpha 
(\Delta x^k, \Delta y^k, \Delta s^k)"><BR><BR>Let <IMG WIDTH="351" HEIGHT="37" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq10.gif"
 ALT="\alpha = Min_i\{\alpha : x^k_i + \alpha \Delta x = 0 |
s^k_i + \alpha \Delta s = 0\}">.If <IMG WIDTH="48" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq11.gif"
 ALT="\alpha \leq 1">, then <IMG WIDTH="34" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="images/neteq12.gif"
 ALT="\alpha = "><SPAN CLASS="ssiten"><I>p</I></SPAN><IMG WIDTH="15" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="images/neteq13.gif"
 ALT="\alpha">.<IMG WIDTH="15" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="images/neteq13.gif"
 ALT="\alpha"> is a value as large as possible but <IMG WIDTH="46" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq14.gif"
 ALT="\leq 1.0"> and not so
large that a <SPAN CLASS="mathfont"><I>x</I><SUP><I>k</I>+1</SUP><SUB><I>i</I></SUB></SPAN> or <SPAN CLASS="mathfont"><I>s</I><SUP><I>k</I>+1</SUP><SUB><I>i</I></SUB></SPAN> of some variable <SPAN CLASS="mathfont"><I>i</I></SPAN>
is not &#34;too close&#34; to zero.
<BR><BR></DD><DT CLASS="ssbten"><B CLASS="ssbten">PRSLTYPE=<SPAN CLASS="ssiten"><I>p</I></SPAN></B></DT>
<DT CLASS="ssbten"><A NAME="netflowprsltype"><B CLASS="ssbten">IPRSLTYPE=<SPAN CLASS="ssiten"><I>p</I></SPAN></B></A></DT>
<DD CLASS="sasop"><A NAME="idxnet0955">&#13;</A><A NAME="idxnet0956">&#13;</A><A NAME="idxnet0957">&#13;</A><A NAME="idxnet0958">&#13;</A><A NAME="idxnet0959">&#13;</A><A NAME="idxnet0960">&#13;</A><A NAME="idxnet0961">&#13;</A><A NAME="idxnet0962">&#13;</A>Preprocessing the Linear Programming problem often succeeds
in allowing some variables and constraints to be temporarily eliminated
from the LP that must be solved.
This reduces the solution time
and possibly also the chance that the optimizer will
run into numerical differculties.
The task of preprocessing is inexpensive to do.
<BR><BR>You control how much preprocessing to do by specifying the
PRSLTYPE= <SPAN CLASS="ssiten"><I>p</I></SPAN>, where <SPAN CLASS="ssiten"><I>p</I></SPAN> can be -1, 0, 1, 2, or 3.
<DL>
<DT>-1
<DD>do not perform preprocessing. 
For most problems, specifying PRSLTYPE= -1 is <EM>not</EM> recommended.
<DT>0
<DD>Given upper and lower bounds on each variable, the
greatest and least contribution to the row activity
of each variable is computed. If these are within the
limits set by the upper and lower bounds on the row
activity, then the row is redundant and can be discarded.
Try to tighten the bounds on any of the variables it can.
For example, if all coefficients in a constraint are positive and all variables
have zero lower bounds, then the row's smallest
contribution is zero. If the rhs value of this constraint is zero,
then if the constraint type is <SPAN CLASS="mathfont">=</SPAN> or <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq7.gif"
 ALT="\leq">,all the variables in that constraint can be fixed
to zero. These variables and the constraint can be removed.
If the constraint type is <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq15.gif"
 ALT="\geq">, the constraint is redundant.
If the rhs is negative and the constraint is <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="images/neteq7.gif"
 ALT="\leq">, the
problem is infeasible.
If just one variable in a row is not fixed, use
the row to impose an implicit upper or lower bound on the
variable and then eliminate the row.
The preprocessor also tries to tighten the bounds on 
constraint right hand sides.
PRSLTYPE=0 is the default.
<DT>1
<DD>When there are exactly two unfixed variables with
coefficients in an equality constraint, solve for one in
terms of the other. The problem will have one less variable.
The new matrix will have at least two fewer coefficients and
one less constraint. In other constraints where both
variables appear, two coefs are combined into one.
type=0 reductions are also done.
<DT>2
<DD>It may be possible to determine that an equality
constraint is not constraining a variable. That is, if
all variables are nonnegative, then x - SUM yi = 0 does
not constrain x, since it must be nonnegative if all the
yi's are nonnegative. In this case, eliminate x by
subtracting this equation from all others containing x.
This is useful when the only other entry for x is in the
objective function. Perform this reduction if there is
at most one other nonobjective coefficient. type=0
reductions are also done.
<DT>3
<DD>All possible reductions are performed.
</DL><BR>Preprocessing is iterative. As variables are fixed and eliminated,
and constraints are found to be redundant and they too are eliminated,
and as variable bounds s and constraint right hand sides are tightened,
the LP to be optimized is modified to reflect these changes.
Another iteration of preprocessing of the modified LP 
may reveal more variables and
constraints that can be eliminated.
<BR><BR></DD>
</DL><P>
<!--Navigation Panel-->
<TABLE BORDER="0" CELLPADDING="0">
<TR VALIGN="TOP">
  <TD ALIGN="CENTER">
  <A HREF="index.htm">
  <IMG BORDER="0" SRC="../../common/images/cont1.gif" ALT="Chapter Contents" WIDTH="99" HEIGHT="16"><BR><FONT SIZE="-2">Chapter Contents</FONT></A></TD>
  <TD ALIGN=CENTER>
  <A HREF="sect29.htm"><IMG BORDER="0" SRC="../../common/images/prev1.gif" ALT="Previous" WIDTH="99" HEIGHT="16"><BR><FONT SIZE="-2">Previous</FONT></A></TD>
  <TD ALIGN=CENTER>
  <A HREF="sect31.htm"><IMG BORDER="0" SRC="../../common/images/next1.gif" ALT="Next" WIDTH="99" HEIGHT="16"><BR><FONT SIZE="-2">Next</FONT></A></TD>
  <TD ALIGN=CENTER>
  <A HREF="#topofpage">
  <IMG BORDER="0" SRC="../../common/images/top1.gif" ALT="Top" WIDTH="99" HEIGHT="16"><BR><FONT SIZE="-2">Top</FONT></A></TD>
</TR>
</TABLE>
<P><!--End of Navigation Panel-->
<P><FONT SIZE="1"><A HREF="../../common/images/copyrite.htm">Copyright &copy; 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>
