<HTML>
<!-- This page produced Mon Jul 19 13:58:41 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Statements : RETAIN </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0201991.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0201969.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">RETAIN</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0214163">RETAIN</A></FONT></H1>

<P><HR><BR><B>Causes a variable that is created by an INPUT or assignment statement
to retain its value from one iteration of the DATA step to the next</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Valid:</B></TD>
<TD bgcolor="#CCCCCC" align="left">in a DATA step
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Category:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Information
</TD></TR>
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>Type:</B></TD>
<TD bgcolor="#CCCCCC" align="left">Declarative
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z0214163.htm#zid-2599"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0214163.htm#z0290016"><FONT size="2"><B>Without Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0214163.htm#z0290017"><FONT size="2"><B>Arguments</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0214163.htm#z0290018"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0214163.htm#z0290019"><FONT size="2">Default DATA Step Behavior</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0214163.htm#z0290020"><FONT size="2">Assigning Initial Values</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0214163.htm#z0290021"><FONT size="2">Redundancy</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0214163.htm#z0290022"><FONT size="2"><B>Comparisons</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0214163.htm#z0290023"><FONT size="2"><B>Examples</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0214163.htm#z0290024"><FONT size="2">Example 1: Basic Usage</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0214163.htm#z0290030"><FONT size="2">Example 2: Overview of the RETAIN Operation</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0214163.htm#z0290033"><FONT size="2">Example 3: Selecting One Value from a Series of Observations</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0214163.htm#z0290035"><FONT size="2"><B>See Also</b></FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="zid-2599">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>RETAIN </B>&lt;<I>element-list(s)</I>
&lt;<I>initial-value(s)</I> | 
<BR>(<I>initial-value-1</I>) | (<I>initial-value-list-1</I>) &gt;
<BR> &lt; . . . <I>element-list-n</I>
&lt;<I>initial-value-n</I> | 
<BR>(<I>initial-value-n</I> ) | (<I>initial-value-list-n</I>)&gt;&gt;&gt;;
</TD></TR></TABLE><A name="zid-2600">&#13;</A>
<P><A name="z0855599">&#13;</A>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290016">Without Arguments</A></FONT></B></TD></TR></TABLE>

<P>If you do not specify an argument, the
RETAIN statement causes the values of all variables that are created with
INPUT or assignment statements to be retained from one iteration of the DATA
step to the next.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290017">Arguments</A></FONT></B></TD></TR></TABLE>

<P>
<DL>
<DT><I>element-list</I></DT>
<DD>specifies variable names, variable lists,
or array names whose values you want retained.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you specify _ALL_, _CHAR_,
or _NUMERIC_, only the variables that are defined before the RETAIN statement
are affected.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If a variable name is specified <B>only</B> in the RETAIN statement and you do not specify an initial value,
the variable is <B>not</B> written to the data set, and a note stating
that the variable is uninitialized is written to the SAS log. If you specify
an initial value, the variable <B>is</B> written to the data set.</TD>
</TABLE>
<P></DD>

<DT><I>initial-value</I></DT>
<DD>specifies an initial value, numeric or character,
for one or more of the preceding elements.
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you omit <I>initial-value</I>, the initial value is missing. <I>Initial-value</I> is assigned to all
the elements that precede
it in the list. All members of a variable list, therefore, are given the same
initial value.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>See Also:</B></TD>
<TD align="left" bgcolor="#F5F5F5">(<I>initial-value</I>) and
(<I>initial-value-list</I>)</TD>
</TABLE>
<P></DD>

<DT>(<I>initial-value</I>)</DT>
<DD>specifies an initial value, numeric or character,
for a single preceding element or for the first in a list of preceding elements.<P></DD>

<DT>(<I>initial-value-list</I>)</DT>
<DD>specifies an initial value, numeric or character,
for individual elements in the preceding list. SAS matches the first value
in the list with the first variable in the list of elements, the second value
with the second variable, and so on.
<P>Element values are enclosed in quotation marks. To specify
one or more initial values directly, use the following format: 
<P>(<I>initial-value(s)</I>) 
<P>To specify an iteration factor
and nested sublists for
the initial values, use the following format: 
<P>&lt;<I>constant-iter-value</I>*>
&lt;(><I>constant value</I> | <I>constant-sublist</I>&lt;)>
<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Restriction:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If you specify both
an <I>initial-value-list</I> and an <I>element-list</I>, then <I>element-list</I> must be listed
before <I>initial-value-list</I> in the RETAIN statement.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You can separate initial
values by blank spaces or commas.</TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">You can assign initial values
to both variables and temporary data elements. </TD>
<TR valign="top">
<TD align="left" bgcolor="#F5F5F5" width="95" nowrap><B>Tip:</B></TD>
<TD align="left" bgcolor="#F5F5F5">If there are more variables
than initial values, the remaining variables are assigned an initial value
of missing and SAS issues a warning message.</TD>
</TABLE>
<P></DD>
</DL>


<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290018">Details</A></FONT></B></TD></TR></TABLE>

<BR><H3><A name="z0290019">Default DATA Step Behavior</A></H3>


<P>Without a RETAIN statement, SAS automatically sets variables that are assigned
values by an INPUT or assignment statement to missing before each iteration
of the DATA step.
<BR><H3><A name="z0290020">Assigning Initial Values</A></H3>


<P>Use a RETAIN statement to specify initial values for individual variables,
a list of variables, or members of an array. If a value appears in a RETAIN
statement, variables that appear before it in the list are set to that value
initially. (If you assign different initial values to the same variable by
naming it more than once in a RETAIN statement, SAS uses the last value.)
You can also use RETAIN to assign an initial value other than the default
value of 0 to a variable whose value is assigned by a sum statement.
<BR><H3><A name="z0290021">Redundancy</A></H3>


<P>It is redundant
to name any of these items in a RETAIN statement, because their values are
automatically retained from one iteration of the DATA step to the next: 
<P>
<UL>

<LI>variables that are read with a SET, MERGE, MODIFY
or UPDATE statement<P>

<LI>a variable whose value is assigned in a sum statement<P>

<LI>the automatic variables _N_, _ERROR_, _I_,
_CMD_,
and _MSG_<P>

<LI>variables that are created by the END= or IN=
option in the SET, MERGE, MODIFY, or UPDATE statement or by options that create
variables in the FILE and INFILE statements<P>

<LI>data elements that are specified in a temporary
array<P>

<LI>array elements that are initialized in the ARRAY
statement<P>

<LI>elements of an array that have assigned initial
values to any or all of the elements on the ARRAY statement.<P>
</UL>

<P>You can, however, use a RETAIN statement to assign an
initial value to any of the previous items, with the exception of _N_ and
_ERROR_.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290022">Comparisons</A></FONT></B></TD></TR></TABLE>

<P><A name="z0855633">&#13;The RETAIN statement specifies
variables whose values are <B>not set to missing</B> at the beginning
of each iteration of the DATA step. The KEEP statement specifies variables
that are to be included in any data set that is being created.</A>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0290023">Examples</A></FONT></B></TD></TR></TABLE>

<BR><H3> <A name="z0290024">Example 1: Basic Usage</A> </H3>


<P>
<P>
<UL>

<LI>This RETAIN statement retains the values of variables
MONTH1 through MONTH5 from one iteration of the DATA step to the next:  
<P>
<PRE>retain month1-month5;</PRE><P>

<LI>This RETAIN statement retains the values of nine
variables and sets their initial values:  
<P>
<PRE>retain month1-month5 1 year 0 a b c 'XYZ';</PRE>
<P>The values of MONTH1 through MONTH5 are set initially
to 1; YEAR is set to 0; variables A, B, and C are each set to the character
value 
<P><CODE><B>XYZ</B></CODE>.<P>

<LI>This RETAIN statement assigns the initial value
1 to the variable MONTH1 only:  
<P>
<PRE>retain month1-month5 (1);</PRE>
<P>Variables MONTH2 through MONTH5 are set to missing initially.<P>

<LI>This RETAIN statement retains the values of all
variables that are defined earlier in the DATA step but not those defined <I>afterwards</I>:  
<P>
<PRE>retain _all_;</PRE><P>

<LI>Both of these statements assign initial values
to VAR1 through VAR4: 
<P>
<UL>

<LI>
<PRE>retain var1-var4 (1 2 3 4);</PRE><P>

<LI>
<PRE>retain var1-var4 (1,2,3,4);</PRE><P>
</UL>
<P>
</UL>

<BR><H3> <A name="z0290030">Example 2: Overview of the RETAIN Operation</A> </H3>


<P>This example shows how to use variable names and array names as elements in
the RETAIN statement and shows assignment of initial values with and without
parentheses:



<PRE>data _null_;
   array City{3} $ City1-City3;
   array cp{3} Citypop1-Citypop3;
   retain Year Taxyear 1999 City ' ' 
          cp (10000,50000,100000);
   file <I>file-specification</I> print;
   put 'Values at beginning of DATA step:' 
       / @3 _all_ /;
   input Gain;
   do i=1 to 3;
      cp{i}=cp{i}+Gain;
   end;
   put 'Values after adding Gain to city populations:'
       / @3 _all_;
   datalines;
5000
10000
;</PRE>
<P>The initial values assigned by RETAIN are as follows: 
<P>
<UL>

<LI>Year and Taxyear are assigned the initial value
1999.<P>

<LI>City1, City2, and City3 are assigned missing values.<P>

<LI>Citypop1 is assigned the value
10000.<P>

<LI>Citypop2 is assigned 50000.<P>

<LI>Citypop3 is assigned
100000.<P>
</UL>

<P>Here are the lines written by the PUT statements:  



<PRE>Values at beginning of DATA step:
  City1=  City2=  City3=  Citypop1=10000 
  Citypop2=50000 Citypop3=100000
Year=1999 Taxyear=1999 Gain=. i=. 
_ERROR_=0 _N_=1

Values after adding GAIN to city populations:
  City1=  City2=  City3=  Citypop1=15000 
  Citypop2=55000 Citypop3=105000
Year=1999 Taxyear=1999 Gain=5000 i=4 
_ERROR_=0 _N_=1
Values at beginning of DATA step:
  City1=  City2=  City3=  Citypop1=15000 
  Citypop2=55000 Citypop3=105000
Year=1999 Taxyear=1999 Gain=. i=. 
_ERROR_=0 _N_=2

Values after adding GAIN to city populations:
  City1=  City2=  City3=  Citypop1=25000 
  Citypop2=65000 Citypop3=115000
Year=1999 Taxyear=1999 Gain=10000 i=4 
_ERROR_=0 _N_=2
Values at beginning of DATA step:
  City1=  City2=  City3=  Citypop1=25000 
  Citypop2=65000 Citypop3=115000
Year=1999 Taxyear=1999 Gain=. i=. 
_ERROR_=0 _N_=3</PRE>
<P>The first PUT statement is executed three times, while
the second PUT statement is executed only twice. The DATA step ceases execution
when the INPUT statement executes for the third time and reaches the end of
the file.
<BR><H3> <A name="z0290033">Example 3: Selecting One Value from a Series of Observations</A> </H3>


<P>In this example, the data set ALLSCORES contains several
observations for each identification number and variable ID. Different observations
for a particular ID value may have different values of the variable GRADE.
This example creates a new data set, CLASS.BESTSCORES, which contains one
observation for each ID value. The observation must have the highest GRADE
value of all observations for that ID in BESTSCORES.  




<PRE>libname class '<I>SAS-data-library</I>';

proc sort data=class.allscores;
   by id;
run;

data class.bestscores;
   drop grade;
   set class.allscores;
   by id;
      /* Prevents HIGHEST from being reset*/
      /* to missing for each iteration.   */
   retain highest;
      /* Sets HIGHEST to missing for each */
      /* different ID value.              */
   if first.id then highest=.;
      /* Compares HIGHEST to GRADE in     */
      /* current iteration and resets     */
      /* value if GRADE is higher.        */
   highest=max(highest,grade);
   if last.id then output;
run;</PRE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><FONT size="5"><A name="z0290035">See Also</A></FONT>
</FONT></B></TD></TR></TABLE>
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>Statements:
<P>
<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD><A href="z0214494.htm">Assignment</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0202968.htm">BY</A></TD></TR>
<TR valign="top"><TD></TD><TD><A href="z0146292.htm">INPUT</A></TD></TR></TABLE></TD></TR></TABLE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0293668.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0201991.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0201969.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0214163">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>