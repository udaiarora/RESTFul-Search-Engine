<HTML>
<!-- This page produced Thu Jul  8 15:57:47 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Procedures : DBF </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0217368.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0217399.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0217402.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">DBF</FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="z0502271">DBF</A></FONT></H1>

<P><HR><BR><B>Converts a dBASE file to a SAS data set or a SAS data set to a
dBASE file</B><p>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top">
<TD align="right" bgcolor="#F5F5F5" nowrap><B>OS/390 specifics:</B></TD>
<TD bgcolor="#CCCCCC" align="left">all
</TD></TR>
</TABLE><HR>
<TABLE cellspacing="0" cellpadding="1">
<TR>
<TD colspan="2"><A href="z0502271.htm#znid-169"><FONT size="2"><B>Syntax</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0502271.htm#z0502330"><FONT size="2"><B>Details</b></FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0502271.htm#z0502334"><FONT size="2">Converting DBF Fields to SAS Variables</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0502271.htm#z0502336"><FONT size="2">Converting SAS Variables to DBF Fields</FONT></A></TD></TR>
<TR>
<TD width="18"></TD>
<TD><A href="z0502271.htm#z0508072"><FONT size="2">Transferring Other Software Files to DBF Files</FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0502271.htm#z0508073"><FONT size="2"><B>Example 1: Converting a dBASE IV File to a SAS Data Set</b></FONT></A></TD></TR>
<TR>
<TD colspan="2"><A href="z0502271.htm#z0508078"><FONT size="2"><B>Example 2: Converting a dBASE 5 file to a SAS Data Set</b></FONT></A></TD></TR></TABLE>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><H2><A name="znid-169">Syntax</A></H2></TD></TR></TABLE>

<TABLE cellpadding="4" cellspacing="2">
<TR valign="top"><TD>
<B>PROC DBF</B> <I>options</I> ;
</TD></TR></TABLE><A name="znid-170">&#13;</A>
<P>  
 
<DL>
<DT><B>options</B></DT>
<DD>
<P>
<DL>
<DT><A name="z0552724">&#13;DB2|DB3|DB4|DB5=<B><I>fileref</I></B> </A></DT>
<DD>specifies the fileref of a DBF file. The
fileref may be allocated via a SAS FILENAME statement, a JCL DD statement
(in batch mode), or a TSO ALLOC command (under TSO). For further information
on fileref specification, see <A href="zxf-ways.htm">Ways of Allocating External Files</A>



.
The DBF file can be stored as a sequential data set (such as sasdemo.emp.dbf),
a partitioned OS/390 data set member (such as sasdemo.dbf.pds(emp)), or a
file in an hierarchical file system (such as /u/sasdemo/emp.dbf). For further
information on file naming requirements, see <A href="zf-refer.htm">Referring to External Files</A>



.
<P>If the fileref is allocated with a FILENAME statement,
the statement may optionally specify RECFM=N to identify the DBF file as binary.
<P>The DB<I>n</I> option must correspond to the version
of dBASE with which the DBF file is compatible. Specify a DBF file with the
DB<I>n</I> option, where <I>n</I> is 2, 3, 4, or 5. You can specify
only one of these values.<P></DD>

<DT><A name="z0552728">&#13;DATA=<B><I>&lt;libref.>member</I></B></A></DT>
<DD>names the input SAS data set, using 1-32
characters. Use this option if you are creating a DBF file from a SAS data
set. If you use the DATA= option, do not use the OUT= option. If you omit
the DATA= option, SAS creates an output SAS data set from the DBF file.<P></DD>

<DT><A name="z0552730">&#13;OUT=<B><I>&lt;libref.>member</I></B></A></DT>
<DD>names the SAS data set that is created to
hold the converted data, using 1-32 characters. Use this option only
if you do not specify the DATA= option. If OUT= is omitted, SAS creates a
temporary data set  in the WORK library. The name of the temporary data set
is DATA1 [...DATA<I>n</I>]. If OUT= is omitted or if you do not specify
a two-level name in the OUT= option, the SAS data set that is created by PROC
DBF remains available during your current SAS session (under the temporary
data set name), but it is not permanently saved.<P></DD>
</DL>
<P></DD>
</DL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0502330">Details</A></FONT></B></TD></TR></TABLE>

<P>You can use PROC DBF in the OS/390 environment
if your site has a license for SAS/ACCESS for PC File Formats. To see a list
of your licences, submit:



<PRE>proc setinit; run;</PRE>
<P>If you are licensed, you will see an entry in your SAS
log for SAS/ACCESS for PC File Formats.
<P>The DBF procedure converts files in DBF format to SAS
data sets that are compatible with the current SAS release.  You can also
use PROC DBF to convert SAS data sets to files in DBF format.
<P>Before you convert a DBF file to a SAS file, you must
first upload your DBF file from the Windows, OS/2, NT, or UNIX environment
to the OS/390 environment, using a mechanism such as FTP (file transfer protocol).
If you are licensed for SAS/CONNECT, you can use PROC UPLOAD:



<PRE>filename out1 'sasdemo.emp.dbf';
proc upload infile='c:\employee\emp.dbf'
   outfile=out1 binary;
run;</PRE>
<P>In the OS/390 environment, sequential data sets are
recommended for use with DBF, with the following attributes: 



<TABLE cellpadding="6" cellspacing="2">
<TR valign="top"><TD></TD><TD>RECFM=FS</TD></TR>
<TR valign="top"><TD></TD><TD>DSORG=PS</TD></TR>
<TR valign="top"><TD></TD><TD>LRECL=6160</TD></TR>
<TR valign="top"><TD></TD><TD>BLKSIZE=6160</TD></TR></TABLE>The
following example illustrates the specification of attributes
for a sequential data set:



<PRE>sasdemo.emp.dbf = 
   (DSORG=PS,RECFM=FS,LRECL=6160,BLKSIZE=6160)</PRE>
<P>PROC DBF produces one output file but no printed output.
The output file contains the same information as the input file but in a different
format.
<P>The DBF procedure works with DBF files created by all
the current versions and releases of dBASE (II, III, III PLUS, IV, and 5.0)
and with most DBF files that are created by other software products.
<BR><H3><A name="z0502334">Converting DBF Fields to SAS Variables</A></H3>


<P><A name="z0552742">&#13;When you convert a DBF file a to SAS data set, DBF numeric variables
become SAS numeric variables. Similarly, DBF character variables become SAS
character variables.  Any DBF character variable of length greater than 200
is truncated to 200 in SAS. Logical fields become SAS character variables
with a length of 1.  Date fields become SAS date variables. </A>
<P>DBF fields whose data are stored in auxiliary files
(Memo, General, binary, and OLE data types) are ignored in SAS.
<P>If a DBF file has missing numeric or date fields, SAS
fills those missing fields with a series of the digit 9 or with blanks, respectively.
<P>When a dBASE II file is translated into a SAS data set,
any colons in dBASE variable names are changed to underscores in SAS variable
names. Conversely, when a SAS data set is translated into a dBASE file, any
underscores in SAS variable names are changed to colons in dBASE field names.
<BR><H3><A name="z0502336">Converting SAS Variables to DBF Fields</A></H3>


<P><A name="z0552746">&#13;In DBF files, numeric variables are stored in character form.
 When converting from a SAS data set to a DBF file, SAS numeric variables
become DBF numeric variables with a total length of 16.  A SAS numeric variable
with a decimal value must be stored in a decimal format in order to be converted
to a DBF numeric field with a decimal value.  In other words, unless you associate
the SAS numeric variable with an appropriate format in a SAS FORMAT statement,
the corresponding DBF field will not have any value to the right of the decimal
point.  You can associate a format with the variable in a SAS data set when
you create the data set or by using the DATASETS procedure (see </A><A href="z0217399.htm">DATASETS</A>).
<P>If the number of
digits--including a possible decimal
point--exceeds 16, a warning message is issued and the DBF numeric field
is filled with a series of the digit 9. All SAS character variables become
DBF fields of the same length. When converting from a SAS data set to a DBF
file that is compatible with dBASE III or later, SAS date variables become
DBF date fields.  When converting to a dBASE II file, SAS date variables become
dBASE II character fields in the form YYYYMMDD.
<BR><H3><A name="z0508072">Transferring Other Software Files to DBF Files</A></H3>


<P><A name="z0552748">&#13;You might find it helpful to save another software vendor's file
to a DBF file and then convert that file into a SAS data set. For example,
you could save an Excel XLS file in DBF format, upload the file, and use PROC
DBF to convert that file into a SAS data set. Or you could do the reverse;
use PROC DBF to convert a SAS data set into a DBF file and then load that
file into an Excel spreadsheet. </A>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0508073">Example 1: Converting a dBASE IV File to a SAS Data Set</A></FONT></B></TD></TR></TABLE>

<P><A name="z0552749">&#13;In this
example, a dBASE IV file named SASDEMO.EMPLOYEE.DBF is
converted to a SAS data set. A FILENAME statement specifies a fileref that
names the dBASE IV file. The FILENAME statement must appear before the PROC
DBF statement, as shown:


</A>
<PRE>libname save 'sasdemo.employee.data';
filename dbfin 'sasdemo.employee.dbf';
proc dbf db4=dbfin out=save.employee;
run;</PRE>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5"><A name="z0508078">Example 2: Converting a dBASE 5 file to a SAS Data Set</A></FONT></B></TD></TR></TABLE>

<P>In this example,  a dBASE 5 file  is converted to a
SAS data set.



<PRE>libname demo 'sasdemo.employee.data';
filename dbfout 'sasdemo.newemp.dbf' recfm=n;
proc dbf db5=dbfout data=demo.employee;
run;</PRE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="z0217368.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="z0217399.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z0217402.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#z0502271">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>