<HTML>
<!-- This page produced Tue Jul 20 10:24:46 EDT 1999
 -->
<!-- Used program version 1.118.1.2 from beta -->
<HEAD>
<!-- <META http-equiv="Content-Type" content="text/html; charset="> -->
<TITLE>Map Control : Using the Map Control </TITLE></HEAD>
<BODY bgcolor="#FFFFFF">
<!-- navigation -->
<TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="zp-c-doc.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="zp-cover.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z11ttrs.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
</TR></TABLE>
<!-- running head -->
<TABLE width="100%" cellpadding="4">
<TR valign="MIDDLE">
<TD bgcolor="#CCCC99"><I><FONT size="2">SAS/AF Software: Class Dictionary                                                                                         </FONT></I></TD>
</TR>
</TABLE><H1><FONT size="5"><A name="zngmap-c">Using the Map Control</A></FONT></H1>


<P>A map
object uses individual map areas (or markers placed on these areas) to convey
up to four different pieces of information:
<P>
<UL>

<LI>the location of a marker on a map area<P>

<LI>the color of a map area or of a
marker<P>

<LI>the size of a marker<P>

<LI>the label on a map area or marker.<P>
</UL>

<P>Methods that return the exact value of each
area allow you to write
complete applications using the Map object as an interface tool.  When a specific
map area is selected, SCL code can be invoked to display graphs or generate
reports based on the selection.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Parts of a Map</FONT></B></TD></TR></TABLE>

<P>
<DL>
<DT>map area</DT>
<DD>an area within a map such as a country, state, or
province. Each map area has its own identification (ID) value. The border
of a map area is defined by X and Y variables for all observations in the
map data set that have the same ID value. 
<P>In area maps, the color of each map area represents a response value
for that area. If the area has no response value, it uses the default map
color. By default the map color is blue. You can use the mapColor attribute
or the _setColor method to change the map color.
<P>In marker maps, all map areas are the same color; only the marker color
changes.<P></DD>

<DT>marker  (marker maps only)</DT>
<DD>a graphical symbol whose size and color represent
response values. The size of the marker, for example the height of a bar,
is determined by the value of the response variable assigned to marker size.
 The color of the marker is determined by the value of the response variable
assigned to marker color. The marker label is also generated from response
data set values.<P></DD>

<DT>label</DT>
<DD>the text associated with the map area or marker and
displayed in conjunction with it.  The text of the label is contained in the
response variable assigned to the label.<P></DD>

<DT>legend</DT>
<DD>one or two symbols that relate map area or marker
characteristics to the data: 
<P>
<UL>

<LI>The color bar represents the values of the color variable or the
values of the color RANGE entry. By default the legend displays the minimum
and maximum values of the color variable. If you assign a RANGE entry, the
legend displays the minimum and maximum values defined by the RANGE entry.
The color bar appears on the legend for both area maps and marker maps.<P>

<LI>The wedge-shaped size symbol shows the minimum and maximum values
from the size variable.  The size symbol appears on the legend for marker
maps only.<P>
</UL>
<P></DD>
</DL>
 
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">About Map Types</FONT></B></TD></TR></TABLE>

<P>The Map control produces two types of maps: area maps and marker maps.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">About Area Maps</FONT></B></TD></TR></TABLE>

<P>Area
maps are two-dimensional maps that display data by coloring the individual
map areas according to the associated data values.  For example, you can display
data like this sales data for selected European countries:  



<PRE>ID    NAME       VOLUME    REVENUE
--    ----       ------    -------
350    France        10       25000
394    Germany      100      250000
830    Spain         25      100000
925    UK            25       50000
480    Italy         75      150000</PRE>
<P>On an area map of Europe where revenue is mapped to color, countries
with the highest revenue values would be green and those with the lowest revenue
values would be red, if the default RANGE entry is used.
<P>Area maps are similar to the maps produced by the CHORO statement of
the GMAP procedure in SAS/GRAPH software.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">About Marker Maps</FONT></B></TD></TR></TABLE>

<P>Marker maps display the values of one to three variables as graphical
symbols whose size, color, and label represent the data values. In the example
of sales in Europe, the color of the marker could represent the volume of
sales, and the size of the marker could represent sales revenue. In this case,
tall green bars would indicate high sales volume and revenue; tall red bars
would indicate a country that has low sales, but has high revenue from those
sales.  In most cases, the color and size variables should be related or the
map may be confusing.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Sources of Information</FONT></B></TD></TR></TABLE>

<P>The map object uses information from three SAS data sets:
<UL>
<LI>map data set
<LI>marker
data set
<LI>response data set
</UL><BR>
<P>In addition, it uses the IDMATCH Info dialog to obtain data from the
user and a color RANGE entry to define the colors that are associated with
the ranges of response values.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">About Map Data Sets</FONT></B></TD></TR></TABLE>

<P>A <B>map data set</B>  contains coordinates that define
the boundaries of map
areas, such as states or counties. Institute supplied map data sets are stored
in a library that is usually assigned the libref MAPS.
<P>A map data set must contain these variables: 
<P>
<UL>

<LI>a numeric variable named X containing the horizontal
coordinates
of the boundary points.<P>

<LI>a numeric variable named Y containing the vertical coordinates
of the boundary points.<P>

<LI>an identification variable, usually named ID, that identifies
the map area to which the coordinates belong. The map identification variable
links the map data set and the response data set either directly, or indirectly
via the marker data set. Map area identification variables can be either character
or numeric.<P>
</UL>

<P>The following is an observation from the MAPS.US map data set. Notice
that the ID variable is named STATE.  



<PRE>
<B><I>Single Observation from MAPS.US Map Data Set</I></B><BR>


STATE     X          Y
-----     -------    -------
23        0.31618    0.14411</PRE>
<P>You must specify a map data set. If the map data set is the only input
to the map object, then the result is a simple marker map. In this case, all
markers placed on such a map will use the default marker color and all be
the same size because they have no response values.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">About Response Data Sets</FONT></B></TD></TR></TABLE>

<P>The <B>response data set</B> provides the data that you want the
map to display, such as sales figures, population statistics, or income ranges.
<P>The response data set must contain these variables: 
<P>
<UL>

<LI>at least one identification
variable that identifies the map area,
such as a state, a country, or a business office, to which a response value
belongs. For example, in the response data set of European sales data, the
response identification variable is ID, which contains the country code for
each country.
<P>The response identification variable links the response values with
the corresponding map areas and must match the IDMATCH variable in the marker
data set. It may also match the ID variable in the map data set.
<P>Although referred to as the ID variable, this variable can have any
name and can be either numeric or character.  Character variables have a maximum
length of 40.<P>

<LI>one or more variables with information about the map areas. These
variables control the characteristics of the map: 
<P>
<UL>

<LI>marker or map area color<P>

<LI>marker size<P>

<LI>marker or map area
label<P>
</UL>
<P>
</UL>

<P>The following is an example of an observation from a response data set.
 



<PRE>
<B><I>Single Observation from a Response Data Set</I></B><BR>


FIPS    STORES    AVGSALES
----    ------    --------
23          15      250000</PRE>
<P>The response variable assigned to the colorVariable attribute affects
the color of the markers on a marker map or of the map areas on an area map.
This variable must be numeric. Each value is compared to the ranges specified
in the color RANGE entry. The markers will be the color specified for the
particular range that the value fits into.  For example, you could assign
the AVGSALES variable to the colorVariable attribute.
<P>The response variable assigned to the sizeVariable attribute affects
the height or width of the markers.  This variable must be numeric. For example,
you could assign the STORES variable to the sizeVariable attribute.
<P>The response variable assigned to the labelVariable attribute contains
the text displayed at the base of the markers or on the map area in area maps.
 This variable can be either numeric or character.
<P>A variable must be assigned to either the sizeVariable or colorVariable
attribute for the response data to be used.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">About Marker Data Sets</FONT></B></TD></TR></TABLE>

<P>The marker data set is a standard SAS data set that determines or records
the position of the markers on the map.  It also serves to link the map and
response data sets when they do not share an identification variable.
<P>The marker data set contains these four variables: 
<P>
<UL>

<LI>X and Y are numeric variables that
contain the coordinates of
the location of each marker. These variables get their values from the map
data set X and Y variables.<P>

<LI>an identification variable named ID that matches the identification
variable in the map data set in both type and content.  The corresponding
variable in the map data set may have a different name, such as STATE. This
variable can be either numeric or character.  Character variables have a maximum
length of 40.<P>

<LI>another identification variable named IDMATCH that matches a variable
in the response data set in type and content.  The corresponding variable
in the response data set may have a different name, such as OFFICE.  This
variable can be either numeric or character.  Character variables have a maximum
length of 40.<P>
</UL>

<P>A marker data set can be temporary or permanent.
<P>Each observation in the marker data set specifies the location (X and
Y) of a marker and its ID and IDMATCH values.  The marker ID value must match
the map ID value of the area where the marker is placed. The IDMATCH value
must match the response ID value, which may also be the same as the map ID.
<P>The following is an example of an observation from a Marker data set.
 



<PRE>
<B><I>Single Observation from a Marker Data Set</I></B><BR>


X          Y          ID    IDMATCH
-------    -------    --    -------
0.31618    0.14411    23         23</PRE>
<P>Notice that in this example the value of the IDMATCH variable, which
comes from the response data set, is the same as the ID value, which comes
from the map data set.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Creating a Marker Data Set</FONT></B></TD></TR></TABLE>

<P>You
can create a marker data set from a SAS session or interactively from within
the map object.  Once you have created a marker data set you can assign it
to the map object with the markerDataSetName or markerDataSetID attributes.
<P>To create a marker data set in a SAS session, use a DATA step or FSEDIT
to enter the X and Y location, the map identification value of each marker,
and the IDMATCH variable.  You can use map data sets like MAPS.USCENTER to
obtain the X and Y locations for the center of each state as well as the state's
ID value. You must supply the values for the IDMATCH variable.  These values
must correspond to the identification values in the response data set.
<P>You can also create a marker data set interactively when your map data
set and response data set have different identification values and you do
not already have a marker data set. In this case the map object automatically
enters values in a marker data set as you add markers to the map.
<P>These are the steps:
<P>
<OL START="1" type="1">
<LI>Be sure the IDMATCH Info dialog is enabled by
setting the IDQuery
attribute value to On.<P>

<LI>In the frame, use the popup menu to select Map Control ->
Add.<P>

<LI>Click on a map area to add a marker to the map. The map object
copies the X, Y, and ID values from the map data set to the current observation
in the marker data set.<P>

<LI>When the IDMATCH Info dialog opens, enter the value of the response
ID variable that corresponds to the currently selected map area. The map object
assigns that value to the IDMATCH variable.<P>
</OL>
 
<P>By default it saves the marker data set as WORK.DATA<B>n</B>.
To create a permanent data set enter a libref and data set name for the markerDataSetName
attribute, and then save the frame.
<P>Another way to create a marker data set of locations and IDMATCH values
is to simply specify a map data set and a marker data set but no response
data set. Place the markers on the map at the locations you plan to use and
enter the IDMATCH value in the IDMATCH Info dialog. 
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;The map object automatically assigns the type of the IDMATCH variable
so that it is the same type as the map identification variable. Therefore,
your IDMATCH values must be the same type as the map ID values.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR>
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Saving the Marker Data Set</FONT></B></TD></TR></TABLE>

<P>While you are in BUILD mode, the map object saves the current marker
information to the marker data set whenever you save the frame (


<CODE><B>File -->
Save</B></CODE>), open the Property sheet, or exit the frame.  When the application
is running, you can save the marker data set at any time with the _saveAs
method.
<P>You can save the default marker data set WORK.DATA<B>n</B> as
a permanent data set in one of these ways: 
<P>
<UL>

<LI>Assign a libref and use the DATA step, for example  



<PRE>libname mylib '<I>pathname</I>';

data mylib.marker1;
set work.data1;
run;</PRE><P>

<LI>Use the _saveAs method from your SCL program, for example  



<PRE>map._saveAs('mylib.marker1');</PRE><P>
</UL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">About the IDMATCH Info Dialog</FONT></B></TD></TR></TABLE>

<P>The IDMATCH Info dialog allows you to enter the value of the response
ID variable that corresponds to the currently selected map area. 
<DL>
<DT><CODE><B>Numeric ID response value </B></CODE>
<BR><CODE><B>Character ID response value</B></CODE></DT>
<DD>specifies the value of the response ID variable that
corresponds to the currently selected map area. This value is assigned to
the IDMATCH variable in the current marker data set.<P></DD>
</DL>

<P>You are prompted to enter either a numeric or character value depending
on the data sets already assigned to the map object.  The map object assigns
a type to the IDMATCH variable. It looks for the following variables and assigns
the type of the first one it finds: 
<OL START="1" type="1">
<LI>IDMATCH in the current marker data set<P>

<LI>response ID  variable<P>

<LI>map ID
variable<P>
</OL>

<P>Use this window to interactively build a marker data set by dragging
a marker on a map area and entering the IDMATCH value for that area in the
window.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">About the Color RANGE Entry</FONT></B></TD></TR></TABLE>

<P>The
color RANGE entry determines which color is assigned to the response value
that is represented by color. These colors appear either on the map areas
(in area maps) or as the marker color (in marker maps).
<P>By default the response values are divided into three ranges and each
range is assigned a color: values in the lowest third are red, values in the
middle third are yellow, and values in the highest third are green.
<P>You can define your own color ranges by creating a color RANGE entry
and assigning it to the map object's colorRange attribute.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">How the Data Sets Work Together</FONT></B></TD></TR></TABLE>

<P>If
the identification variables in the map data set and response data set contain
the same values, then the link between the two is direct. The example below
shows a response data set containing sales data for three states and uses
FIPS codes to identify the states Maine (23), New Hampshire (33), and Vermont
(50). 
<P>The example below also shows representative observations from the corresponding
map data set, MAPS.US. MAPS.US also uses FIPS codes in a variable named STATE
to identify each state.  



<PRE>
<B><I>Response Data Set and Map Data Set with Matching ID Values</I></B><BR>


Response Data Set                 Map Data Set (MAPS.US)
==========================        =============================

FIPS    STORES    AVGSALES        STATE    X          Y
----    ------    --------        -----    -------    -------
23          15      250000        23       0.31618    0.14411
33           8      450000        23       0.31572    0.14427
50          10      350000        [...]
                                  33       0.31618    0.14411
                                  33       0.31596    0.13988
                                  [...]
                                  50       0.29623    0.13249
                                  50       0.29067    0.13122</PRE>
<P>When the identification variables match, as they do here, you can link
the two data sets directly by specifying STATE as the ID variable for the
map data set and FIPS as the ID variable for the response data set. In this
case, when the map object builds the marker data set it automatically uses
STATE as the ID variable and FIPS as the IDMATCH variable, as shown below.
So long as the two variables contain the same values, it doesn't matter if
they are named the same or not.  
<P>
<PRE>
<B><I>Marker Data Set with Matching ID Values</I></B><BR>


X          Y          ID    IDMATCH
-------    -------    --    -------
0.32609    0.18508    23         23
0.33324    0.14181    33         33
0.28606    0.16714    50         50</PRE>
<P>However, the identification values in the response data set may be different
from those in the map data set. For example, if the response ID value contains
the names of cities instead of FIPS codes, the map and response ID values
do not match. In this case, you must specify the city names as IDMATCH values,
so the map object can use the ID and IDMATCH variables in the marker data
set to build the link between the map and response data sets, as shown below.
 



<PRE>
<B><I>Marker Data Set with Different ID Values</I></B><BR>


Map Data Set     Marker Data Set         Response Data Set
============     ===============         ================

STATE            ID   IDMATCH            OFFICE         AVGSALES
-----            --   -------            ------         --------
23               23   'Portland'         'Portland'     250000
33               33   'Dover'            'Dover'        450000
50               50   'Burlington'       'Burlington'   350000</PRE>
<P>If you place a marker on Maine (FIPS code 23) the marker data set associates
23 with 'Portland' and displays the response data for Portland on the map.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Creating a Map Object</FONT></B></TD></TR></TABLE>

<P>This
section describes the steps for creating a simple map object and displaying
response data. Because the steps depends on whether the response data set
contains an ID variable that matches the ID variable in MAPS.AUSTRAL, there
are two versions of the process. Both versions use the map data set of  Australia,
MAPS.AUSTRAL, which contains information for these map areas: 
<P>
<TABLE cellpadding="6" cellspacing="0" border="0">


<TR valign="bottom" bgcolor="#CCCCCC">
  <TH  align="LEFT" valign="BOTTOM" ><B>Area Name </B></TH>
  <TH  align="LEFT" valign="BOTTOM" ><B>Identification  Value (ID)</B></TH>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NORTHERN TERRITORY </TD>
  
<TD  align="LEFT" valign="TOP">1</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">NEW SOUTH WALES    </TD>
  
<TD  align="LEFT" valign="TOP">2</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">QUEENSLAND         </TD>
  
<TD  align="LEFT" valign="TOP">3</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">SOUTH AUSTRALIA    </TD>
  
<TD  align="LEFT" valign="TOP">4</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">TASMANIA           </TD>
  
<TD  align="LEFT" valign="TOP">5</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">VICTORIA           </TD>
  
<TD  align="LEFT" valign="TOP">6</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">WESTERN AUSTRALIA  </TD>
  
<TD  align="LEFT" valign="TOP">7</TD>
</TR>

</TABLE>

<BR>
<P>Each version uses a different response data set. If you want
to create
these maps, you must first create the response data sets on your own system.
<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Version 1: Map ID and Response ID Match</FONT></B></TD></TR></TABLE>

<P>The response data set MYLIB.AUSREV shown below contains an ID variable
that matches in type and content the ID variable in the map data set.  



<PRE>
<B><I>Response Data Set MYLIB.AUSREV</I></B><BR>


ID    NAME                  VOLUME    REVENUE
--    ----                  ------    -------
 1    NORTHERN TERRITORY       10       25000
 2    NEW SOUTH WALES         100      250000
 4    SOUTH AUSTRALIA          25      100000
 5    TASMANIA                 25       50000
 6    VICTORIA                 75      150000</PRE>
<P>Note that not all map areas have data. 
<OL START="1" type="1">
<LI>In a frame, create a map object by selecting a Map Control from
the Components window.<P>

<LI>Set the following attribute values for the map information:
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Attribute</TD>
  
<TD  align="LEFT" valign="TOP">Value</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">mapDataSetName</TD>
  
<TD  align="LEFT" valign="TOP">Maps.Austral</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">mapIDVariable</TD>
  
<TD  align="LEFT" valign="TOP">ID</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">mapType</TD>
  
<TD  align="LEFT" valign="TOP">Marker (the default)</TD>
</TR>

</TABLE>

<BR><P>

<LI>Set the following attribute values for the response
information:
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Attribute</TD>
  
<TD  align="LEFT" valign="TOP">Value</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">responseDataSetName</TD>
  
<TD  align="LEFT" valign="TOP">Mylib.Ausrev</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">responseIDVariable</TD>
  
<TD  align="LEFT" valign="TOP">ID</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">sizeVariable</TD>
  
<TD  align="LEFT" valign="TOP">Volume</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">colorVariable</TD>
  
<TD  align="LEFT" valign="TOP">Revenue</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">labelVariable</TD>
  
<TD  align="LEFT" valign="TOP">Name</TD>
</TR>

</TABLE>

<BR> <P>

<LI>Return to the frame and use the popup menu to select Map Control
->
Add.<P>

<LI>In the frame, click on a map area to add a marker. If the response
data set has data for the area, the marker will be sized, colored, and labeled
accordingly. Otherwise it will be gray (the default marker color), indicating
no data.<P>
</OL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Version 2: Map ID and Response ID Do Not Match</FONT></B></TD></TR></TABLE>

<P>The response data set MYLIB.AUSCITY shown below has an ID variable that
does not match the ID variable in the map data set.  



<PRE>
<B><I>Response Data Set MYLIB.AUSCITY</I></B><BR>


OFFICE       VOLUME    REVENUE
------       ------    -------
DARWIN           10       25000
SYDNEY          100      250000
ADELAIDE         25      100000
MELBOURNE        75      150000</PRE>
<P>OFFICE, which contains the city names, is the ID variable. 
<OL START="1" type="1">
<LI>In a frame, create a map object by selecting a Map Control from
the Components window.<P>

<LI>Set the following attribute values for the map information:
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Attribute</TD>
  
<TD  align="LEFT" valign="TOP">Value</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">mapDataSetName</TD>
  
<TD  align="LEFT" valign="TOP">Maps.Austral</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">mapIDVariable</TD>
  
<TD  align="LEFT" valign="TOP">ID</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">mapType</TD>
  
<TD  align="LEFT" valign="TOP">Marker (the default)</TD>
</TR>

</TABLE>

<BR><P>

<LI>Set the following attribute values for the response
information:
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Attribute</TD>
  
<TD  align="LEFT" valign="TOP">Value</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">responseDataSetName</TD>
  
<TD  align="LEFT" valign="TOP">Mylib.Auscity</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">responseIDVariable</TD>
  
<TD  align="LEFT" valign="TOP">Office</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">sizeVariable</TD>
  
<TD  align="LEFT" valign="TOP">Volume</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">colorVariable</TD>
  
<TD  align="LEFT" valign="TOP">Revenue</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">labelVariable</TD>
  
<TD  align="LEFT" valign="TOP">Office</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">IDQuery</TD>
  
<TD  align="LEFT" valign="TOP">On</TD>
</TR>

</TABLE>

<BR>  <P>

<LI>Return to the frame and use the popup menu to select Map Control
->
Add.<P>

<LI>Click on an area to add a marker. The IDMATCH Info dialog opens.
In the window, type the value of OFFICE that corresponds to the map area.
For example, if the map area is Victoria, type MELBOURNE. At this point the
map object assigns MELBOURNE as the value for IDMATCH; when you clicked on
Victoria, it assigned the map ID value, 6, to the marker data set ID. Now
the link between the map area, 6, and the response value, MELBOURNE is complete.
Click OK.
<P>The marker for Melbourne appears, sized, colored, and labeled accordingly.
<P>
<P><B>Note:</B>&nbsp;&nbsp;&nbsp;Because you are making the connection for the marker data set,
you can assign any response value you like to the IDMATCH variable. Descriptionce
the marker is created you can drag it to any area of the map and either change
its IDMATCH value when the IDMATCH Info dialog opens or select OK to keep
it.&nbsp;&nbsp;<IMG border="0" src="../common/images/cautend.gif" alt="[cautionend]" align="bottom"><BR><P>
</OL>

<P><TABLE width="100%" cellpadding="0" cellspacing="0">
<TR valign="bottom"><TD><HR></TD></TR>
<TR valign="top"><TD><B><FONT size="5">Using Legends</FONT></B></TD></TR></TABLE>

<P>A
map object can display two types of legends, a color legend that is displayed
as a color bar, and a size legend that is displayed as a wedge.
<P>The color bar represents the values of the color variable or the values
of the color RANGE entry. By default the legend displays the minimum and maximum
values of the color variable. If you assign a RANGE entry, the legend displays
the minimum and maximum values defined by the RANGE entry. The legend title
is the color variable's label, if it has one, or the variable name. The color
bar appears on the legend for both area maps and marker maps.
<P>The wedge-shaped size symbol shows the minimum and maximum values from
the size variable.  The legend title is the size variable's label, if it has
one, or the variable name. The size symbol appears on the legend for marker
maps only.
<P>You can control and manage the two legends separately. On maps that
support both legend types, you can display either legend or both legends.
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Attribute</TD>
  
<TD  align="LEFT" valign="TOP">Description</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">colorLegendState</TD>
  
<TD  align="LEFT" valign="TOP">determines whether the color legend is displayed. Valid values are On
and Off.</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">sizeLegendState</TD>
  
<TD  align="LEFT" valign="TOP">determines whether the size legend is displayed. Valid values are On
and Off.</TD>
</TR>

</TABLE>

<BR>
<P>For a map object named map1, the following code displays both legends:



<PRE>map1.colorLegendState='on';
map1.sizeLegendState='on';</PRE>
<P>Both legends are interactive in the object; you can move them or change
their size. As you change the legend's size, legend information is hidden
if it cannot fit within the legend. For example, if you make the legend too
narrow to display the title, the title is hidden.
<P>To move the legend, click on the middle of the legend, and then drag
the legend to the desired location within the object's border. To change the
legend's size, click just inside the legend border that you want to size,
and then enlarge or reduce the size. For example, to make the legend taller,
click on the legend's top border and drag the border up.
<P>You can also move and size the object through its size and location
attributes:
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Attribute</TD>
  
<TD  align="LEFT" valign="TOP">Description</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">colorLegendXSize</TD>
  
<TD  align="LEFT" valign="TOP">width of the color legend, measured as a percent of the object region</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">colorLegendYSize</TD>
  
<TD  align="LEFT" valign="TOP">height of the color legend, measured as a percent of the the object
region</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">colorLegendXLoc</TD>
  
<TD  align="LEFT" valign="TOP">X location of the top left corner of the color legend, measured as a
percent of the object region</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">colorLegendYLoc</TD>
  
<TD  align="LEFT" valign="TOP">Y location of the top left corner of the color legend, mesaured as a
percent of the object region</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">sizeLegendXSize</TD>
  
<TD  align="LEFT" valign="TOP">width of the size legend, measured as a percent of the object region</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">sizeLegendYSize</TD>
  
<TD  align="LEFT" valign="TOP">height of the size legend, measured as a percent of the object region</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">sizeLegendXLoc</TD>
  
<TD  align="LEFT" valign="TOP">X location of the top left corner of the size legend, measured as a
percent of the object region</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">sizeLegendYLoc</TD>
  
<TD  align="LEFT" valign="TOP">Y location of the top left corner of the size legend, measured as a
percent of the object region</TD>
</TR>

</TABLE>

<BR> 
<P>In SCL code, you can use the _getValue method to determine whether a
legend has been clicked on and what variable the legend represents. The method
arguments are:
<P>
<TABLE cellpadding="6" cellspacing="0" border="1">


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">Argument</TD>
  
<TD  align="LEFT" valign="TOP">What it returns</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">ON_LEGEND</TD>
  
<TD  align="LEFT" valign="TOP">0 if no legend was clicked<P>1 if the color legend was clicked<P>2 if the size legend was clicked</TD>
</TR>


<TR valign="top" bgcolor="#FFFFFF">
  
<TD  align="LEFT" valign="TOP">LEGEND_VARIABLE</TD>
  
<TD  align="LEFT" valign="TOP">label of the variable represented by the clicked legend</TD>
</TR>

</TABLE>

<BR>
<P>For an object named map1, the
following SCL code shows how _getValue
works. If you compile and test the code, you can click on either of the legends
or on the map, and then look in the Log window to see the information returned
by the put statements.



<PRE>init:
     /* assume map1 is an existing marker map */
     map1.colorLegendState='on';
     map1.sizeLegendState='on';
return;

main:
     length legvar $32;
     x= 0;
     leg = 0;
     infolist = makelist();
     map1._getValue(infolist);

     x= getnitemn(infolist,'MAP_X',1,1);
     leg = getnitemn(infolist,'ON_LEGEND',1,1);
     legvar = getnitemc(infolist,'LEGEND_VARIABLE',1,1);

     put 'you clicked on '  x ;
     put '    A legend?  '  leg;
     put '  which is for '  legvar;

     rc = dellist(infolist);
return;

term:
return;     </PRE>

<P><!-- navigation -->
<P><TABLE cellpadding="0" cellspacing="0">
<TR valign="top">
<TD align="center">
<A href="zp-c-doc.htm">
<IMG border="0" SRC="../common/images/cont1.gif"><BR><FONT size="-2">Chapter Contents</FONT></A></TD>
<TD align="center">
<A href="zp-cover.htm">
<IMG border="0" src="../common/images/prev1.gif"><BR><FONT size="-2">Previous</FONT></A></TD>
<TD align="center">
<A href="z11ttrs.htm">
<IMG border="0" SRC="../common/images/next1.gif"><BR><FONT size="-2">Next</FONT></A></TD>
<TD align="center">
<A href="#zngmap-c">
<IMG border="0" SRC="../common/images/top1.gif"><BR><FONT size="-2">Top of Page</FONT></A></TD>
</TR></TABLE>
<P><FONT size=1><A href="../common/images/copyrite.htm">Copyright 1999 by SAS Institute Inc., Cary, NC, USA. All rights reserved.</A></FONT>
</BODY>
</HTML>